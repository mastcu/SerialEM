/* soapC.cpp
   Generated by gSOAP 2.7.3 from .\webserviceCommands.h
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.3 2010-06-04 18:49:14 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version != 1 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__short:
		return soap_in_xsd__short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_ns__SerialGotAcquireToken:
		return soap_in_ns__SerialGotAcquireToken(soap, NULL, NULL, "ns:SerialGotAcquireToken");
	case SOAP_TYPE_ns__SerialGotAcquireTokenResponse:
		return soap_in_ns__SerialGotAcquireTokenResponse(soap, NULL, NULL, "ns:SerialGotAcquireTokenResponse");
	case SOAP_TYPE_ns__CheckifOk2Acquire:
		return soap_in_ns__CheckifOk2Acquire(soap, NULL, NULL, "ns:CheckifOk2Acquire");
	case SOAP_TYPE_ns__CheckifOk2AcquireResponse:
		return soap_in_ns__CheckifOk2AcquireResponse(soap, NULL, NULL, "ns:CheckifOk2AcquireResponse");
	case SOAP_TYPE_ns__BeginMosaic:
		return soap_in_ns__BeginMosaic(soap, NULL, NULL, "ns:BeginMosaic");
	case SOAP_TYPE_ns__BeginMosaicResponse:
		return soap_in_ns__BeginMosaicResponse(soap, NULL, NULL, "ns:BeginMosaicResponse");
	case SOAP_TYPE_ns__QueryMosaicImages:
		return soap_in_ns__QueryMosaicImages(soap, NULL, NULL, "ns:QueryMosaicImages");
	case SOAP_TYPE_ns__QueryMosaicImagesResponse:
		return soap_in_ns__QueryMosaicImagesResponse(soap, NULL, NULL, "ns:QueryMosaicImagesResponse");
	case SOAP_TYPE_ns__NextMosaicMove:
		return soap_in_ns__NextMosaicMove(soap, NULL, NULL, "ns:NextMosaicMove");
	case SOAP_TYPE_ns__NextMosaicMoveResponse:
		return soap_in_ns__NextMosaicMoveResponse(soap, NULL, NULL, "ns:NextMosaicMoveResponse");
	case SOAP_TYPE_ns__setY:
		return soap_in_ns__setY(soap, NULL, NULL, "ns:setY");
	case SOAP_TYPE_ns__setYResponse:
		return soap_in_ns__setYResponse(soap, NULL, NULL, "ns:setYResponse");
	case SOAP_TYPE_ns__setX:
		return soap_in_ns__setX(soap, NULL, NULL, "ns:setX");
	case SOAP_TYPE_ns__setXResponse:
		return soap_in_ns__setXResponse(soap, NULL, NULL, "ns:setXResponse");
	case SOAP_TYPE_ns__getZ:
		return soap_in_ns__getZ(soap, NULL, NULL, "ns:getZ");
	case SOAP_TYPE_ns__getZResponse:
		return soap_in_ns__getZResponse(soap, NULL, NULL, "ns:getZResponse");
	case SOAP_TYPE_ns__getY:
		return soap_in_ns__getY(soap, NULL, NULL, "ns:getY");
	case SOAP_TYPE_ns__getYResponse:
		return soap_in_ns__getYResponse(soap, NULL, NULL, "ns:getYResponse");
	case SOAP_TYPE_ns__getX:
		return soap_in_ns__getX(soap, NULL, NULL, "ns:getX");
	case SOAP_TYPE_ns__getXResponse:
		return soap_in_ns__getXResponse(soap, NULL, NULL, "ns:getXResponse");
	case SOAP_TYPE_ns__setZ:
		return soap_in_ns__setZ(soap, NULL, NULL, "ns:setZ");
	case SOAP_TYPE_ns__setZResponse:
		return soap_in_ns__setZResponse(soap, NULL, NULL, "ns:setZResponse");
	case SOAP_TYPE_ns__setXYStagePosition:
		return soap_in_ns__setXYStagePosition(soap, NULL, NULL, "ns:setXYStagePosition");
	case SOAP_TYPE_ns__setXYStagePositionResponse:
		return soap_in_ns__setXYStagePositionResponse(soap, NULL, NULL, "ns:setXYStagePositionResponse");
	case SOAP_TYPE_ns__setTiltAngle:
		return soap_in_ns__setTiltAngle(soap, NULL, NULL, "ns:setTiltAngle");
	case SOAP_TYPE_ns__setTiltAngleResponse:
		return soap_in_ns__setTiltAngleResponse(soap, NULL, NULL, "ns:setTiltAngleResponse");
	case SOAP_TYPE_ns__getCurrentTiltAngle:
		return soap_in_ns__getCurrentTiltAngle(soap, NULL, NULL, "ns:getCurrentTiltAngle");
	case SOAP_TYPE_ns__getCurrentTiltAngleResponse:
		return soap_in_ns__getCurrentTiltAngleResponse(soap, NULL, NULL, "ns:getCurrentTiltAngleResponse");
	case SOAP_TYPE_xsd__string:
	{	char **s;
		s = soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_xsd__short;
			return soap_in_xsd__short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SerialGotAcquireToken"))
		{	*type = SOAP_TYPE_ns__SerialGotAcquireToken;
			return soap_in_ns__SerialGotAcquireToken(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SerialGotAcquireTokenResponse"))
		{	*type = SOAP_TYPE_ns__SerialGotAcquireTokenResponse;
			return soap_in_ns__SerialGotAcquireTokenResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:CheckifOk2Acquire"))
		{	*type = SOAP_TYPE_ns__CheckifOk2Acquire;
			return soap_in_ns__CheckifOk2Acquire(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:CheckifOk2AcquireResponse"))
		{	*type = SOAP_TYPE_ns__CheckifOk2AcquireResponse;
			return soap_in_ns__CheckifOk2AcquireResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:BeginMosaic"))
		{	*type = SOAP_TYPE_ns__BeginMosaic;
			return soap_in_ns__BeginMosaic(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:BeginMosaicResponse"))
		{	*type = SOAP_TYPE_ns__BeginMosaicResponse;
			return soap_in_ns__BeginMosaicResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryMosaicImages"))
		{	*type = SOAP_TYPE_ns__QueryMosaicImages;
			return soap_in_ns__QueryMosaicImages(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryMosaicImagesResponse"))
		{	*type = SOAP_TYPE_ns__QueryMosaicImagesResponse;
			return soap_in_ns__QueryMosaicImagesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:NextMosaicMove"))
		{	*type = SOAP_TYPE_ns__NextMosaicMove;
			return soap_in_ns__NextMosaicMove(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:NextMosaicMoveResponse"))
		{	*type = SOAP_TYPE_ns__NextMosaicMoveResponse;
			return soap_in_ns__NextMosaicMoveResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setY"))
		{	*type = SOAP_TYPE_ns__setY;
			return soap_in_ns__setY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setYResponse"))
		{	*type = SOAP_TYPE_ns__setYResponse;
			return soap_in_ns__setYResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setX"))
		{	*type = SOAP_TYPE_ns__setX;
			return soap_in_ns__setX(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setXResponse"))
		{	*type = SOAP_TYPE_ns__setXResponse;
			return soap_in_ns__setXResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getZ"))
		{	*type = SOAP_TYPE_ns__getZ;
			return soap_in_ns__getZ(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getZResponse"))
		{	*type = SOAP_TYPE_ns__getZResponse;
			return soap_in_ns__getZResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getY"))
		{	*type = SOAP_TYPE_ns__getY;
			return soap_in_ns__getY(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getYResponse"))
		{	*type = SOAP_TYPE_ns__getYResponse;
			return soap_in_ns__getYResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getX"))
		{	*type = SOAP_TYPE_ns__getX;
			return soap_in_ns__getX(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getXResponse"))
		{	*type = SOAP_TYPE_ns__getXResponse;
			return soap_in_ns__getXResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setZ"))
		{	*type = SOAP_TYPE_ns__setZ;
			return soap_in_ns__setZ(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setZResponse"))
		{	*type = SOAP_TYPE_ns__setZResponse;
			return soap_in_ns__setZResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setXYStagePosition"))
		{	*type = SOAP_TYPE_ns__setXYStagePosition;
			return soap_in_ns__setXYStagePosition(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setXYStagePositionResponse"))
		{	*type = SOAP_TYPE_ns__setXYStagePositionResponse;
			return soap_in_ns__setXYStagePositionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setTiltAngle"))
		{	*type = SOAP_TYPE_ns__setTiltAngle;
			return soap_in_ns__setTiltAngle(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setTiltAngleResponse"))
		{	*type = SOAP_TYPE_ns__setTiltAngleResponse;
			return soap_in_ns__setTiltAngleResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getCurrentTiltAngle"))
		{	*type = SOAP_TYPE_ns__getCurrentTiltAngle;
			return soap_in_ns__getCurrentTiltAngle(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getCurrentTiltAngleResponse"))
		{	*type = SOAP_TYPE_ns__getCurrentTiltAngleResponse;
			return soap_in_ns__getCurrentTiltAngleResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_xsd__string;
			s = soap_in_xsd__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
			return soap->error = SOAP_TAG_MISMATCH;
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_xsd__short:
		return soap_out_xsd__short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__long:
		return soap_out_xsd__long(soap, tag, id, (const float *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_out_xsd__float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_xsd__double:
		return soap_out_xsd__double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_ns__SerialGotAcquireToken:
		return soap_out_ns__SerialGotAcquireToken(soap, tag, id, (const struct ns__SerialGotAcquireToken *)ptr, "ns:SerialGotAcquireToken");
	case SOAP_TYPE_ns__SerialGotAcquireTokenResponse:
		return soap_out_ns__SerialGotAcquireTokenResponse(soap, tag, id, (const struct ns__SerialGotAcquireTokenResponse *)ptr, "ns:SerialGotAcquireTokenResponse");
	case SOAP_TYPE_ns__CheckifOk2Acquire:
		return soap_out_ns__CheckifOk2Acquire(soap, tag, id, (const struct ns__CheckifOk2Acquire *)ptr, "ns:CheckifOk2Acquire");
	case SOAP_TYPE_ns__CheckifOk2AcquireResponse:
		return soap_out_ns__CheckifOk2AcquireResponse(soap, tag, id, (const struct ns__CheckifOk2AcquireResponse *)ptr, "ns:CheckifOk2AcquireResponse");
	case SOAP_TYPE_ns__BeginMosaic:
		return soap_out_ns__BeginMosaic(soap, tag, id, (const struct ns__BeginMosaic *)ptr, "ns:BeginMosaic");
	case SOAP_TYPE_ns__BeginMosaicResponse:
		return soap_out_ns__BeginMosaicResponse(soap, tag, id, (const struct ns__BeginMosaicResponse *)ptr, "ns:BeginMosaicResponse");
	case SOAP_TYPE_ns__QueryMosaicImages:
		return soap_out_ns__QueryMosaicImages(soap, tag, id, (const struct ns__QueryMosaicImages *)ptr, "ns:QueryMosaicImages");
	case SOAP_TYPE_ns__QueryMosaicImagesResponse:
		return soap_out_ns__QueryMosaicImagesResponse(soap, tag, id, (const struct ns__QueryMosaicImagesResponse *)ptr, "ns:QueryMosaicImagesResponse");
	case SOAP_TYPE_ns__NextMosaicMove:
		return soap_out_ns__NextMosaicMove(soap, tag, id, (const struct ns__NextMosaicMove *)ptr, "ns:NextMosaicMove");
	case SOAP_TYPE_ns__NextMosaicMoveResponse:
		return soap_out_ns__NextMosaicMoveResponse(soap, tag, id, (const struct ns__NextMosaicMoveResponse *)ptr, "ns:NextMosaicMoveResponse");
	case SOAP_TYPE_ns__setY:
		return soap_out_ns__setY(soap, tag, id, (const struct ns__setY *)ptr, "ns:setY");
	case SOAP_TYPE_ns__setYResponse:
		return soap_out_ns__setYResponse(soap, tag, id, (const struct ns__setYResponse *)ptr, "ns:setYResponse");
	case SOAP_TYPE_ns__setX:
		return soap_out_ns__setX(soap, tag, id, (const struct ns__setX *)ptr, "ns:setX");
	case SOAP_TYPE_ns__setXResponse:
		return soap_out_ns__setXResponse(soap, tag, id, (const struct ns__setXResponse *)ptr, "ns:setXResponse");
	case SOAP_TYPE_ns__getZ:
		return soap_out_ns__getZ(soap, tag, id, (const struct ns__getZ *)ptr, "ns:getZ");
	case SOAP_TYPE_ns__getZResponse:
		return soap_out_ns__getZResponse(soap, tag, id, (const struct ns__getZResponse *)ptr, "ns:getZResponse");
	case SOAP_TYPE_ns__getY:
		return soap_out_ns__getY(soap, tag, id, (const struct ns__getY *)ptr, "ns:getY");
	case SOAP_TYPE_ns__getYResponse:
		return soap_out_ns__getYResponse(soap, tag, id, (const struct ns__getYResponse *)ptr, "ns:getYResponse");
	case SOAP_TYPE_ns__getX:
		return soap_out_ns__getX(soap, tag, id, (const struct ns__getX *)ptr, "ns:getX");
	case SOAP_TYPE_ns__getXResponse:
		return soap_out_ns__getXResponse(soap, tag, id, (const struct ns__getXResponse *)ptr, "ns:getXResponse");
	case SOAP_TYPE_ns__setZ:
		return soap_out_ns__setZ(soap, tag, id, (const struct ns__setZ *)ptr, "ns:setZ");
	case SOAP_TYPE_ns__setZResponse:
		return soap_out_ns__setZResponse(soap, tag, id, (const struct ns__setZResponse *)ptr, "ns:setZResponse");
	case SOAP_TYPE_ns__setXYStagePosition:
		return soap_out_ns__setXYStagePosition(soap, tag, id, (const struct ns__setXYStagePosition *)ptr, "ns:setXYStagePosition");
	case SOAP_TYPE_ns__setXYStagePositionResponse:
		return soap_out_ns__setXYStagePositionResponse(soap, tag, id, (const struct ns__setXYStagePositionResponse *)ptr, "ns:setXYStagePositionResponse");
	case SOAP_TYPE_ns__setTiltAngle:
		return soap_out_ns__setTiltAngle(soap, tag, id, (const struct ns__setTiltAngle *)ptr, "ns:setTiltAngle");
	case SOAP_TYPE_ns__setTiltAngleResponse:
		return soap_out_ns__setTiltAngleResponse(soap, tag, id, (const struct ns__setTiltAngleResponse *)ptr, "ns:setTiltAngleResponse");
	case SOAP_TYPE_ns__getCurrentTiltAngle:
		return soap_out_ns__getCurrentTiltAngle(soap, tag, id, (const struct ns__getCurrentTiltAngle *)ptr, "ns:getCurrentTiltAngle");
	case SOAP_TYPE_ns__getCurrentTiltAngleResponse:
		return soap_out_ns__getCurrentTiltAngleResponse(soap, tag, id, (const struct ns__getCurrentTiltAngleResponse *)ptr, "ns:getCurrentTiltAngleResponse");
	case SOAP_TYPE_xsd__string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns__SerialGotAcquireToken:
		soap_serialize_ns__SerialGotAcquireToken(soap, (const struct ns__SerialGotAcquireToken *)ptr);
		break;
	case SOAP_TYPE_ns__SerialGotAcquireTokenResponse:
		soap_serialize_ns__SerialGotAcquireTokenResponse(soap, (const struct ns__SerialGotAcquireTokenResponse *)ptr);
		break;
	case SOAP_TYPE_ns__CheckifOk2Acquire:
		soap_serialize_ns__CheckifOk2Acquire(soap, (const struct ns__CheckifOk2Acquire *)ptr);
		break;
	case SOAP_TYPE_ns__CheckifOk2AcquireResponse:
		soap_serialize_ns__CheckifOk2AcquireResponse(soap, (const struct ns__CheckifOk2AcquireResponse *)ptr);
		break;
	case SOAP_TYPE_ns__BeginMosaic:
		soap_serialize_ns__BeginMosaic(soap, (const struct ns__BeginMosaic *)ptr);
		break;
	case SOAP_TYPE_ns__BeginMosaicResponse:
		soap_serialize_ns__BeginMosaicResponse(soap, (const struct ns__BeginMosaicResponse *)ptr);
		break;
	case SOAP_TYPE_ns__QueryMosaicImages:
		soap_serialize_ns__QueryMosaicImages(soap, (const struct ns__QueryMosaicImages *)ptr);
		break;
	case SOAP_TYPE_ns__QueryMosaicImagesResponse:
		soap_serialize_ns__QueryMosaicImagesResponse(soap, (const struct ns__QueryMosaicImagesResponse *)ptr);
		break;
	case SOAP_TYPE_ns__NextMosaicMove:
		soap_serialize_ns__NextMosaicMove(soap, (const struct ns__NextMosaicMove *)ptr);
		break;
	case SOAP_TYPE_ns__NextMosaicMoveResponse:
		soap_serialize_ns__NextMosaicMoveResponse(soap, (const struct ns__NextMosaicMoveResponse *)ptr);
		break;
	case SOAP_TYPE_ns__setY:
		soap_serialize_ns__setY(soap, (const struct ns__setY *)ptr);
		break;
	case SOAP_TYPE_ns__setYResponse:
		soap_serialize_ns__setYResponse(soap, (const struct ns__setYResponse *)ptr);
		break;
	case SOAP_TYPE_ns__setX:
		soap_serialize_ns__setX(soap, (const struct ns__setX *)ptr);
		break;
	case SOAP_TYPE_ns__setXResponse:
		soap_serialize_ns__setXResponse(soap, (const struct ns__setXResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getZ:
		soap_serialize_ns__getZ(soap, (const struct ns__getZ *)ptr);
		break;
	case SOAP_TYPE_ns__getZResponse:
		soap_serialize_ns__getZResponse(soap, (const struct ns__getZResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getY:
		soap_serialize_ns__getY(soap, (const struct ns__getY *)ptr);
		break;
	case SOAP_TYPE_ns__getYResponse:
		soap_serialize_ns__getYResponse(soap, (const struct ns__getYResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getX:
		soap_serialize_ns__getX(soap, (const struct ns__getX *)ptr);
		break;
	case SOAP_TYPE_ns__getXResponse:
		soap_serialize_ns__getXResponse(soap, (const struct ns__getXResponse *)ptr);
		break;
	case SOAP_TYPE_ns__setZ:
		soap_serialize_ns__setZ(soap, (const struct ns__setZ *)ptr);
		break;
	case SOAP_TYPE_ns__setZResponse:
		soap_serialize_ns__setZResponse(soap, (const struct ns__setZResponse *)ptr);
		break;
	case SOAP_TYPE_ns__setXYStagePosition:
		soap_serialize_ns__setXYStagePosition(soap, (const struct ns__setXYStagePosition *)ptr);
		break;
	case SOAP_TYPE_ns__setXYStagePositionResponse:
		soap_serialize_ns__setXYStagePositionResponse(soap, (const struct ns__setXYStagePositionResponse *)ptr);
		break;
	case SOAP_TYPE_ns__setTiltAngle:
		soap_serialize_ns__setTiltAngle(soap, (const struct ns__setTiltAngle *)ptr);
		break;
	case SOAP_TYPE_ns__setTiltAngleResponse:
		soap_serialize_ns__setTiltAngleResponse(soap, (const struct ns__setTiltAngleResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getCurrentTiltAngle:
		soap_serialize_ns__getCurrentTiltAngle(soap, (const struct ns__getCurrentTiltAngle *)ptr);
		break;
	case SOAP_TYPE_ns__getCurrentTiltAngleResponse:
		soap_serialize_ns__getCurrentTiltAngleResponse(soap, (const struct ns__getCurrentTiltAngleResponse *)ptr);
		break;
	case SOAP_TYPE_xsd__string:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__short(struct soap *soap, short *a)
{	soap_default_short(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__short);
	if (soap_out_xsd__short(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_xsd__short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_xsd__short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__short(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_xsd__short(struct soap *soap, const char *tag, short *a, const char *type)
{
	return soap_inshort(soap, tag, a, type, SOAP_TYPE_xsd__short);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_short);
	if (soap_out_short(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{
	return soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__int(struct soap *soap, int *a)
{	soap_default_int(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__int);
	if (soap_out_xsd__int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__long(struct soap *soap, float *a)
{	soap_default_float(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__long(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__long);
	if (soap_out_xsd__long(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__float(struct soap *soap, float *a)
{	soap_default_float(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__float);
	if (soap_out_xsd__float(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__double(struct soap *soap, double *a)
{	soap_default_double(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__double);
	if (soap_out_xsd__double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->faultcode, SOAP_TYPE__QName);
	soap_serialize__QName(soap, &a->faultcode);
	soap_embedded(soap, &a->faultstring, SOAP_TYPE_string);
	soap_serialize_string(soap, &a->faultstring);
	soap_embedded(soap, &a->faultactor, SOAP_TYPE_string);
	soap_serialize_string(soap, &a->faultactor);
	soap_embedded(soap, &a->detail, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_embedded(soap, &a->SOAP_ENV__Code, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_embedded(soap, &a->SOAP_ENV__Reason, SOAP_TYPE_string);
	soap_serialize_string(soap, &a->SOAP_ENV__Reason);
	soap_embedded(soap, &a->SOAP_ENV__Node, SOAP_TYPE_string);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_embedded(soap, &a->SOAP_ENV__Role, SOAP_TYPE_string);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_embedded(soap, &a->SOAP_ENV__Detail, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Reason);
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_string(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode = 0;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, ""))
				{	soap_flag_faultstring = 0;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, ""))
				{	soap_flag_faultactor = 0;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, ""))
				{	soap_flag_SOAP_ENV__Node = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, ""))
				{	soap_flag_SOAP_ENV__Role = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->fault, "fault", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->SOAP_ENV__Value, SOAP_TYPE__QName);
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_embedded(soap, &a->SOAP_ENV__Subcode, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	/* transient dummy skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient dummy skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SerialGotAcquireToken(struct soap *soap, const struct ns__SerialGotAcquireToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->confirm, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SerialGotAcquireToken(struct soap *soap, struct ns__SerialGotAcquireToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &a->confirm);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SerialGotAcquireToken(struct soap *soap, const struct ns__SerialGotAcquireToken *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__SerialGotAcquireToken);
	if (soap_out_ns__SerialGotAcquireToken(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SerialGotAcquireToken(struct soap *soap, const char *tag, int id, const struct ns__SerialGotAcquireToken *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SerialGotAcquireToken), type);
	soap_out_xsd__int(soap, "confirm", -1, &a->confirm, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__SerialGotAcquireToken * SOAP_FMAC4 soap_get_ns__SerialGotAcquireToken(struct soap *soap, struct ns__SerialGotAcquireToken *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SerialGotAcquireToken(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__SerialGotAcquireToken * SOAP_FMAC4 soap_in_ns__SerialGotAcquireToken(struct soap *soap, const char *tag, struct ns__SerialGotAcquireToken *a, const char *type)
{
	short soap_flag_confirm = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__SerialGotAcquireToken *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SerialGotAcquireToken, sizeof(struct ns__SerialGotAcquireToken), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__SerialGotAcquireToken(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confirm && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "confirm", &a->confirm, "xsd:int"))
				{	soap_flag_confirm = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_confirm))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__SerialGotAcquireToken *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__SerialGotAcquireToken, 0, sizeof(struct ns__SerialGotAcquireToken), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SerialGotAcquireTokenResponse(struct soap *soap, const struct ns__SerialGotAcquireTokenResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SerialGotAcquireTokenResponse(struct soap *soap, struct ns__SerialGotAcquireTokenResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SerialGotAcquireTokenResponse(struct soap *soap, const struct ns__SerialGotAcquireTokenResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__SerialGotAcquireTokenResponse);
	if (soap_out_ns__SerialGotAcquireTokenResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SerialGotAcquireTokenResponse(struct soap *soap, const char *tag, int id, const struct ns__SerialGotAcquireTokenResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SerialGotAcquireTokenResponse), type);
	soap_element_result(soap, "result");
	soap_out_int(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__SerialGotAcquireTokenResponse * SOAP_FMAC4 soap_get_ns__SerialGotAcquireTokenResponse(struct soap *soap, struct ns__SerialGotAcquireTokenResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SerialGotAcquireTokenResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__SerialGotAcquireTokenResponse * SOAP_FMAC4 soap_in_ns__SerialGotAcquireTokenResponse(struct soap *soap, const char *tag, struct ns__SerialGotAcquireTokenResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__SerialGotAcquireTokenResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SerialGotAcquireTokenResponse, sizeof(struct ns__SerialGotAcquireTokenResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__SerialGotAcquireTokenResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__SerialGotAcquireTokenResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__SerialGotAcquireTokenResponse, 0, sizeof(struct ns__SerialGotAcquireTokenResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__CheckifOk2Acquire(struct soap *soap, const struct ns__CheckifOk2Acquire *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->MosaicType, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CheckifOk2Acquire(struct soap *soap, struct ns__CheckifOk2Acquire *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &a->MosaicType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CheckifOk2Acquire(struct soap *soap, const struct ns__CheckifOk2Acquire *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__CheckifOk2Acquire);
	if (soap_out_ns__CheckifOk2Acquire(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CheckifOk2Acquire(struct soap *soap, const char *tag, int id, const struct ns__CheckifOk2Acquire *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__CheckifOk2Acquire), type);
	soap_out_xsd__int(soap, "MosaicType", -1, &a->MosaicType, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__CheckifOk2Acquire * SOAP_FMAC4 soap_get_ns__CheckifOk2Acquire(struct soap *soap, struct ns__CheckifOk2Acquire *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__CheckifOk2Acquire(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__CheckifOk2Acquire * SOAP_FMAC4 soap_in_ns__CheckifOk2Acquire(struct soap *soap, const char *tag, struct ns__CheckifOk2Acquire *a, const char *type)
{
	short soap_flag_MosaicType = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__CheckifOk2Acquire *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__CheckifOk2Acquire, sizeof(struct ns__CheckifOk2Acquire), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__CheckifOk2Acquire(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MosaicType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "MosaicType", &a->MosaicType, "xsd:int"))
				{	soap_flag_MosaicType = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_MosaicType))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__CheckifOk2Acquire *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__CheckifOk2Acquire, 0, sizeof(struct ns__CheckifOk2Acquire), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__CheckifOk2AcquireResponse(struct soap *soap, const struct ns__CheckifOk2AcquireResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CheckifOk2AcquireResponse(struct soap *soap, struct ns__CheckifOk2AcquireResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CheckifOk2AcquireResponse(struct soap *soap, const struct ns__CheckifOk2AcquireResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__CheckifOk2AcquireResponse);
	if (soap_out_ns__CheckifOk2AcquireResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CheckifOk2AcquireResponse(struct soap *soap, const char *tag, int id, const struct ns__CheckifOk2AcquireResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__CheckifOk2AcquireResponse), type);
	soap_element_result(soap, "result");
	soap_out_int(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__CheckifOk2AcquireResponse * SOAP_FMAC4 soap_get_ns__CheckifOk2AcquireResponse(struct soap *soap, struct ns__CheckifOk2AcquireResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__CheckifOk2AcquireResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__CheckifOk2AcquireResponse * SOAP_FMAC4 soap_in_ns__CheckifOk2AcquireResponse(struct soap *soap, const char *tag, struct ns__CheckifOk2AcquireResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__CheckifOk2AcquireResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__CheckifOk2AcquireResponse, sizeof(struct ns__CheckifOk2AcquireResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__CheckifOk2AcquireResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__CheckifOk2AcquireResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__CheckifOk2AcquireResponse, 0, sizeof(struct ns__CheckifOk2AcquireResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__BeginMosaic(struct soap *soap, const struct ns__BeginMosaic *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->MosaicType, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__BeginMosaic(struct soap *soap, struct ns__BeginMosaic *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &a->MosaicType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__BeginMosaic(struct soap *soap, const struct ns__BeginMosaic *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__BeginMosaic);
	if (soap_out_ns__BeginMosaic(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__BeginMosaic(struct soap *soap, const char *tag, int id, const struct ns__BeginMosaic *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__BeginMosaic), type);
	soap_out_xsd__int(soap, "MosaicType", -1, &a->MosaicType, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__BeginMosaic * SOAP_FMAC4 soap_get_ns__BeginMosaic(struct soap *soap, struct ns__BeginMosaic *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__BeginMosaic(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__BeginMosaic * SOAP_FMAC4 soap_in_ns__BeginMosaic(struct soap *soap, const char *tag, struct ns__BeginMosaic *a, const char *type)
{
	short soap_flag_MosaicType = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__BeginMosaic *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__BeginMosaic, sizeof(struct ns__BeginMosaic), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__BeginMosaic(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MosaicType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "MosaicType", &a->MosaicType, "xsd:int"))
				{	soap_flag_MosaicType = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_MosaicType))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__BeginMosaic *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__BeginMosaic, 0, sizeof(struct ns__BeginMosaic), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__BeginMosaicResponse(struct soap *soap, const struct ns__BeginMosaicResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__BeginMosaicResponse(struct soap *soap, struct ns__BeginMosaicResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__BeginMosaicResponse(struct soap *soap, const struct ns__BeginMosaicResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__BeginMosaicResponse);
	if (soap_out_ns__BeginMosaicResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__BeginMosaicResponse(struct soap *soap, const char *tag, int id, const struct ns__BeginMosaicResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__BeginMosaicResponse), type);
	soap_element_result(soap, "result");
	soap_out_int(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__BeginMosaicResponse * SOAP_FMAC4 soap_get_ns__BeginMosaicResponse(struct soap *soap, struct ns__BeginMosaicResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__BeginMosaicResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__BeginMosaicResponse * SOAP_FMAC4 soap_in_ns__BeginMosaicResponse(struct soap *soap, const char *tag, struct ns__BeginMosaicResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__BeginMosaicResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__BeginMosaicResponse, sizeof(struct ns__BeginMosaicResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__BeginMosaicResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__BeginMosaicResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__BeginMosaicResponse, 0, sizeof(struct ns__BeginMosaicResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryMosaicImages(struct soap *soap, const struct ns__QueryMosaicImages *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->Type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryMosaicImages(struct soap *soap, struct ns__QueryMosaicImages *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &a->Type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryMosaicImages(struct soap *soap, const struct ns__QueryMosaicImages *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__QueryMosaicImages);
	if (soap_out_ns__QueryMosaicImages(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryMosaicImages(struct soap *soap, const char *tag, int id, const struct ns__QueryMosaicImages *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__QueryMosaicImages), type);
	soap_out_xsd__int(soap, "Type", -1, &a->Type, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__QueryMosaicImages * SOAP_FMAC4 soap_get_ns__QueryMosaicImages(struct soap *soap, struct ns__QueryMosaicImages *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryMosaicImages(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__QueryMosaicImages * SOAP_FMAC4 soap_in_ns__QueryMosaicImages(struct soap *soap, const char *tag, struct ns__QueryMosaicImages *a, const char *type)
{
	short soap_flag_Type = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__QueryMosaicImages *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__QueryMosaicImages, sizeof(struct ns__QueryMosaicImages), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__QueryMosaicImages(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Type && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "Type", &a->Type, "xsd:int"))
				{	soap_flag_Type = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Type))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryMosaicImages *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__QueryMosaicImages, 0, sizeof(struct ns__QueryMosaicImages), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryMosaicImagesResponse(struct soap *soap, const struct ns__QueryMosaicImagesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryMosaicImagesResponse(struct soap *soap, struct ns__QueryMosaicImagesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryMosaicImagesResponse(struct soap *soap, const struct ns__QueryMosaicImagesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__QueryMosaicImagesResponse);
	if (soap_out_ns__QueryMosaicImagesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryMosaicImagesResponse(struct soap *soap, const char *tag, int id, const struct ns__QueryMosaicImagesResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__QueryMosaicImagesResponse), type);
	soap_element_result(soap, "result");
	soap_out_int(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__QueryMosaicImagesResponse * SOAP_FMAC4 soap_get_ns__QueryMosaicImagesResponse(struct soap *soap, struct ns__QueryMosaicImagesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryMosaicImagesResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__QueryMosaicImagesResponse * SOAP_FMAC4 soap_in_ns__QueryMosaicImagesResponse(struct soap *soap, const char *tag, struct ns__QueryMosaicImagesResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__QueryMosaicImagesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__QueryMosaicImagesResponse, sizeof(struct ns__QueryMosaicImagesResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__QueryMosaicImagesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryMosaicImagesResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__QueryMosaicImagesResponse, 0, sizeof(struct ns__QueryMosaicImagesResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__NextMosaicMove(struct soap *soap, const struct ns__NextMosaicMove *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->MoveType, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__NextMosaicMove(struct soap *soap, struct ns__NextMosaicMove *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &a->MoveType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__NextMosaicMove(struct soap *soap, const struct ns__NextMosaicMove *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__NextMosaicMove);
	if (soap_out_ns__NextMosaicMove(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__NextMosaicMove(struct soap *soap, const char *tag, int id, const struct ns__NextMosaicMove *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__NextMosaicMove), type);
	soap_out_xsd__int(soap, "MoveType", -1, &a->MoveType, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__NextMosaicMove * SOAP_FMAC4 soap_get_ns__NextMosaicMove(struct soap *soap, struct ns__NextMosaicMove *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__NextMosaicMove(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__NextMosaicMove * SOAP_FMAC4 soap_in_ns__NextMosaicMove(struct soap *soap, const char *tag, struct ns__NextMosaicMove *a, const char *type)
{
	short soap_flag_MoveType = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__NextMosaicMove *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__NextMosaicMove, sizeof(struct ns__NextMosaicMove), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__NextMosaicMove(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MoveType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "MoveType", &a->MoveType, "xsd:int"))
				{	soap_flag_MoveType = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_MoveType))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__NextMosaicMove *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__NextMosaicMove, 0, sizeof(struct ns__NextMosaicMove), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__NextMosaicMoveResponse(struct soap *soap, const struct ns__NextMosaicMoveResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__NextMosaicMoveResponse(struct soap *soap, struct ns__NextMosaicMoveResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_float(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__NextMosaicMoveResponse(struct soap *soap, const struct ns__NextMosaicMoveResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__NextMosaicMoveResponse);
	if (soap_out_ns__NextMosaicMoveResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__NextMosaicMoveResponse(struct soap *soap, const char *tag, int id, const struct ns__NextMosaicMoveResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__NextMosaicMoveResponse), type);
	soap_element_result(soap, "result");
	soap_out_float(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__NextMosaicMoveResponse * SOAP_FMAC4 soap_get_ns__NextMosaicMoveResponse(struct soap *soap, struct ns__NextMosaicMoveResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__NextMosaicMoveResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__NextMosaicMoveResponse * SOAP_FMAC4 soap_in_ns__NextMosaicMoveResponse(struct soap *soap, const char *tag, struct ns__NextMosaicMoveResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__NextMosaicMoveResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__NextMosaicMoveResponse, sizeof(struct ns__NextMosaicMoveResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__NextMosaicMoveResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__NextMosaicMoveResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__NextMosaicMoveResponse, 0, sizeof(struct ns__NextMosaicMoveResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setY(struct soap *soap, const struct ns__setY *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->y, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setY(struct soap *soap, struct ns__setY *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__float(soap, &a->y);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setY(struct soap *soap, const struct ns__setY *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setY);
	if (soap_out_ns__setY(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setY(struct soap *soap, const char *tag, int id, const struct ns__setY *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setY), type);
	soap_out_xsd__float(soap, "y", -1, &a->y, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__setY * SOAP_FMAC4 soap_get_ns__setY(struct soap *soap, struct ns__setY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setY(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__setY * SOAP_FMAC4 soap_in_ns__setY(struct soap *soap, const char *tag, struct ns__setY *a, const char *type)
{
	short soap_flag_y = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__setY *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setY, sizeof(struct ns__setY), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setY(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_y && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__float(soap, "y", &a->y, "xsd:float"))
				{	soap_flag_y = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_y))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setY *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__setY, 0, sizeof(struct ns__setY), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setYResponse(struct soap *soap, const struct ns__setYResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setYResponse(struct soap *soap, struct ns__setYResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_float(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setYResponse(struct soap *soap, const struct ns__setYResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setYResponse);
	if (soap_out_ns__setYResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setYResponse(struct soap *soap, const char *tag, int id, const struct ns__setYResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setYResponse), type);
	soap_element_result(soap, "result");
	soap_out_float(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__setYResponse * SOAP_FMAC4 soap_get_ns__setYResponse(struct soap *soap, struct ns__setYResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setYResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__setYResponse * SOAP_FMAC4 soap_in_ns__setYResponse(struct soap *soap, const char *tag, struct ns__setYResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__setYResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setYResponse, sizeof(struct ns__setYResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setYResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setYResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__setYResponse, 0, sizeof(struct ns__setYResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setX(struct soap *soap, const struct ns__setX *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->x, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setX(struct soap *soap, struct ns__setX *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__float(soap, &a->x);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setX(struct soap *soap, const struct ns__setX *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setX);
	if (soap_out_ns__setX(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setX(struct soap *soap, const char *tag, int id, const struct ns__setX *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setX), type);
	soap_out_xsd__float(soap, "x", -1, &a->x, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__setX * SOAP_FMAC4 soap_get_ns__setX(struct soap *soap, struct ns__setX *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setX(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__setX * SOAP_FMAC4 soap_in_ns__setX(struct soap *soap, const char *tag, struct ns__setX *a, const char *type)
{
	short soap_flag_x = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__setX *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setX, sizeof(struct ns__setX), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setX(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_x && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__float(soap, "x", &a->x, "xsd:float"))
				{	soap_flag_x = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_x))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setX *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__setX, 0, sizeof(struct ns__setX), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setXResponse(struct soap *soap, const struct ns__setXResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setXResponse(struct soap *soap, struct ns__setXResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_float(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setXResponse(struct soap *soap, const struct ns__setXResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setXResponse);
	if (soap_out_ns__setXResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setXResponse(struct soap *soap, const char *tag, int id, const struct ns__setXResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setXResponse), type);
	soap_element_result(soap, "result");
	soap_out_float(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__setXResponse * SOAP_FMAC4 soap_get_ns__setXResponse(struct soap *soap, struct ns__setXResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setXResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__setXResponse * SOAP_FMAC4 soap_in_ns__setXResponse(struct soap *soap, const char *tag, struct ns__setXResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__setXResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setXResponse, sizeof(struct ns__setXResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setXResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setXResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__setXResponse, 0, sizeof(struct ns__setXResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getZ(struct soap *soap, const struct ns__getZ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->z, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getZ(struct soap *soap, struct ns__getZ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__float(soap, &a->z);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getZ(struct soap *soap, const struct ns__getZ *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getZ);
	if (soap_out_ns__getZ(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getZ(struct soap *soap, const char *tag, int id, const struct ns__getZ *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getZ), type);
	soap_out_xsd__float(soap, "z", -1, &a->z, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__getZ * SOAP_FMAC4 soap_get_ns__getZ(struct soap *soap, struct ns__getZ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getZ(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__getZ * SOAP_FMAC4 soap_in_ns__getZ(struct soap *soap, const char *tag, struct ns__getZ *a, const char *type)
{
	short soap_flag_z = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__getZ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getZ, sizeof(struct ns__getZ), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getZ(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_z && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__float(soap, "z", &a->z, "xsd:float"))
				{	soap_flag_z = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_z))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getZ *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__getZ, 0, sizeof(struct ns__getZ), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getZResponse(struct soap *soap, const struct ns__getZResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getZResponse(struct soap *soap, struct ns__getZResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_float(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getZResponse(struct soap *soap, const struct ns__getZResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getZResponse);
	if (soap_out_ns__getZResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getZResponse(struct soap *soap, const char *tag, int id, const struct ns__getZResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getZResponse), type);
	soap_element_result(soap, "result");
	soap_out_float(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__getZResponse * SOAP_FMAC4 soap_get_ns__getZResponse(struct soap *soap, struct ns__getZResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getZResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__getZResponse * SOAP_FMAC4 soap_in_ns__getZResponse(struct soap *soap, const char *tag, struct ns__getZResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__getZResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getZResponse, sizeof(struct ns__getZResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getZResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getZResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__getZResponse, 0, sizeof(struct ns__getZResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getY(struct soap *soap, const struct ns__getY *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->y, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getY(struct soap *soap, struct ns__getY *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__float(soap, &a->y);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getY(struct soap *soap, const struct ns__getY *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getY);
	if (soap_out_ns__getY(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getY(struct soap *soap, const char *tag, int id, const struct ns__getY *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getY), type);
	soap_out_xsd__float(soap, "y", -1, &a->y, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__getY * SOAP_FMAC4 soap_get_ns__getY(struct soap *soap, struct ns__getY *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getY(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__getY * SOAP_FMAC4 soap_in_ns__getY(struct soap *soap, const char *tag, struct ns__getY *a, const char *type)
{
	short soap_flag_y = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__getY *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getY, sizeof(struct ns__getY), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getY(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_y && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__float(soap, "y", &a->y, "xsd:float"))
				{	soap_flag_y = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_y))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getY *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__getY, 0, sizeof(struct ns__getY), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getYResponse(struct soap *soap, const struct ns__getYResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getYResponse(struct soap *soap, struct ns__getYResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_float(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getYResponse(struct soap *soap, const struct ns__getYResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getYResponse);
	if (soap_out_ns__getYResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getYResponse(struct soap *soap, const char *tag, int id, const struct ns__getYResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getYResponse), type);
	soap_element_result(soap, "result");
	soap_out_float(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__getYResponse * SOAP_FMAC4 soap_get_ns__getYResponse(struct soap *soap, struct ns__getYResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getYResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__getYResponse * SOAP_FMAC4 soap_in_ns__getYResponse(struct soap *soap, const char *tag, struct ns__getYResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__getYResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getYResponse, sizeof(struct ns__getYResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getYResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getYResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__getYResponse, 0, sizeof(struct ns__getYResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getX(struct soap *soap, const struct ns__getX *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->x, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getX(struct soap *soap, struct ns__getX *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__float(soap, &a->x);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getX(struct soap *soap, const struct ns__getX *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getX);
	if (soap_out_ns__getX(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getX(struct soap *soap, const char *tag, int id, const struct ns__getX *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getX), type);
	soap_out_xsd__float(soap, "x", -1, &a->x, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__getX * SOAP_FMAC4 soap_get_ns__getX(struct soap *soap, struct ns__getX *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getX(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__getX * SOAP_FMAC4 soap_in_ns__getX(struct soap *soap, const char *tag, struct ns__getX *a, const char *type)
{
	short soap_flag_x = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__getX *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getX, sizeof(struct ns__getX), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getX(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_x && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__float(soap, "x", &a->x, "xsd:float"))
				{	soap_flag_x = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_x))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getX *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__getX, 0, sizeof(struct ns__getX), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getXResponse(struct soap *soap, const struct ns__getXResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getXResponse(struct soap *soap, struct ns__getXResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_float(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getXResponse(struct soap *soap, const struct ns__getXResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getXResponse);
	if (soap_out_ns__getXResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getXResponse(struct soap *soap, const char *tag, int id, const struct ns__getXResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getXResponse), type);
	soap_element_result(soap, "result");
	soap_out_float(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__getXResponse * SOAP_FMAC4 soap_get_ns__getXResponse(struct soap *soap, struct ns__getXResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getXResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__getXResponse * SOAP_FMAC4 soap_in_ns__getXResponse(struct soap *soap, const char *tag, struct ns__getXResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__getXResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getXResponse, sizeof(struct ns__getXResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getXResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getXResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__getXResponse, 0, sizeof(struct ns__getXResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setZ(struct soap *soap, const struct ns__setZ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->z, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setZ(struct soap *soap, struct ns__setZ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__float(soap, &a->z);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setZ(struct soap *soap, const struct ns__setZ *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setZ);
	if (soap_out_ns__setZ(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setZ(struct soap *soap, const char *tag, int id, const struct ns__setZ *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setZ), type);
	soap_out_xsd__float(soap, "z", -1, &a->z, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__setZ * SOAP_FMAC4 soap_get_ns__setZ(struct soap *soap, struct ns__setZ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setZ(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__setZ * SOAP_FMAC4 soap_in_ns__setZ(struct soap *soap, const char *tag, struct ns__setZ *a, const char *type)
{
	short soap_flag_z = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__setZ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setZ, sizeof(struct ns__setZ), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setZ(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_z && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__float(soap, "z", &a->z, "xsd:float"))
				{	soap_flag_z = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_z))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setZ *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__setZ, 0, sizeof(struct ns__setZ), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setZResponse(struct soap *soap, const struct ns__setZResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setZResponse(struct soap *soap, struct ns__setZResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_float(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setZResponse(struct soap *soap, const struct ns__setZResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setZResponse);
	if (soap_out_ns__setZResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setZResponse(struct soap *soap, const char *tag, int id, const struct ns__setZResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setZResponse), type);
	soap_element_result(soap, "result");
	soap_out_float(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__setZResponse * SOAP_FMAC4 soap_get_ns__setZResponse(struct soap *soap, struct ns__setZResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setZResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__setZResponse * SOAP_FMAC4 soap_in_ns__setZResponse(struct soap *soap, const char *tag, struct ns__setZResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__setZResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setZResponse, sizeof(struct ns__setZResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setZResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setZResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__setZResponse, 0, sizeof(struct ns__setZResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setXYStagePosition(struct soap *soap, const struct ns__setXYStagePosition *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->x, SOAP_TYPE_xsd__float);
	soap_embedded(soap, &a->y, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setXYStagePosition(struct soap *soap, struct ns__setXYStagePosition *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__float(soap, &a->x);
	soap_default_xsd__float(soap, &a->y);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setXYStagePosition(struct soap *soap, const struct ns__setXYStagePosition *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setXYStagePosition);
	if (soap_out_ns__setXYStagePosition(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setXYStagePosition(struct soap *soap, const char *tag, int id, const struct ns__setXYStagePosition *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setXYStagePosition), type);
	soap_out_xsd__float(soap, "x", -1, &a->x, "");
	soap_out_xsd__float(soap, "y", -1, &a->y, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__setXYStagePosition * SOAP_FMAC4 soap_get_ns__setXYStagePosition(struct soap *soap, struct ns__setXYStagePosition *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setXYStagePosition(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__setXYStagePosition * SOAP_FMAC4 soap_in_ns__setXYStagePosition(struct soap *soap, const char *tag, struct ns__setXYStagePosition *a, const char *type)
{
	short soap_flag_x = 1, soap_flag_y = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__setXYStagePosition *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setXYStagePosition, sizeof(struct ns__setXYStagePosition), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setXYStagePosition(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_x && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__float(soap, "x", &a->x, "xsd:float"))
				{	soap_flag_x = 0;
					continue;
				}
			if (soap_flag_y && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__float(soap, "y", &a->y, "xsd:float"))
				{	soap_flag_y = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_x || soap_flag_y))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setXYStagePosition *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__setXYStagePosition, 0, sizeof(struct ns__setXYStagePosition), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setXYStagePositionResponse(struct soap *soap, const struct ns__setXYStagePositionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->r, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setXYStagePositionResponse(struct soap *soap, struct ns__setXYStagePositionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_float(soap, &a->r);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setXYStagePositionResponse(struct soap *soap, const struct ns__setXYStagePositionResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setXYStagePositionResponse);
	if (soap_out_ns__setXYStagePositionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setXYStagePositionResponse(struct soap *soap, const char *tag, int id, const struct ns__setXYStagePositionResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setXYStagePositionResponse), type);
	soap_element_result(soap, "r");
	soap_out_float(soap, "r", -1, &a->r, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__setXYStagePositionResponse * SOAP_FMAC4 soap_get_ns__setXYStagePositionResponse(struct soap *soap, struct ns__setXYStagePositionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setXYStagePositionResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__setXYStagePositionResponse * SOAP_FMAC4 soap_in_ns__setXYStagePositionResponse(struct soap *soap, const char *tag, struct ns__setXYStagePositionResponse *a, const char *type)
{
	short soap_flag_r = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__setXYStagePositionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setXYStagePositionResponse, sizeof(struct ns__setXYStagePositionResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setXYStagePositionResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_r && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "r", &a->r, ""))
				{	soap_flag_r = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_r))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setXYStagePositionResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__setXYStagePositionResponse, 0, sizeof(struct ns__setXYStagePositionResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setTiltAngle(struct soap *soap, const struct ns__setTiltAngle *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->tilt, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setTiltAngle(struct soap *soap, struct ns__setTiltAngle *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__float(soap, &a->tilt);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setTiltAngle(struct soap *soap, const struct ns__setTiltAngle *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setTiltAngle);
	if (soap_out_ns__setTiltAngle(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setTiltAngle(struct soap *soap, const char *tag, int id, const struct ns__setTiltAngle *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setTiltAngle), type);
	soap_out_xsd__float(soap, "tilt", -1, &a->tilt, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__setTiltAngle * SOAP_FMAC4 soap_get_ns__setTiltAngle(struct soap *soap, struct ns__setTiltAngle *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setTiltAngle(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__setTiltAngle * SOAP_FMAC4 soap_in_ns__setTiltAngle(struct soap *soap, const char *tag, struct ns__setTiltAngle *a, const char *type)
{
	short soap_flag_tilt = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__setTiltAngle *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setTiltAngle, sizeof(struct ns__setTiltAngle), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setTiltAngle(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tilt && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__float(soap, "tilt", &a->tilt, "xsd:float"))
				{	soap_flag_tilt = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_tilt))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setTiltAngle *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__setTiltAngle, 0, sizeof(struct ns__setTiltAngle), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setTiltAngleResponse(struct soap *soap, const struct ns__setTiltAngleResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setTiltAngleResponse(struct soap *soap, struct ns__setTiltAngleResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_float(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setTiltAngleResponse(struct soap *soap, const struct ns__setTiltAngleResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setTiltAngleResponse);
	if (soap_out_ns__setTiltAngleResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setTiltAngleResponse(struct soap *soap, const char *tag, int id, const struct ns__setTiltAngleResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setTiltAngleResponse), type);
	soap_element_result(soap, "result");
	soap_out_float(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__setTiltAngleResponse * SOAP_FMAC4 soap_get_ns__setTiltAngleResponse(struct soap *soap, struct ns__setTiltAngleResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setTiltAngleResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__setTiltAngleResponse * SOAP_FMAC4 soap_in_ns__setTiltAngleResponse(struct soap *soap, const char *tag, struct ns__setTiltAngleResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__setTiltAngleResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setTiltAngleResponse, sizeof(struct ns__setTiltAngleResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setTiltAngleResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setTiltAngleResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__setTiltAngleResponse, 0, sizeof(struct ns__setTiltAngleResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getCurrentTiltAngle(struct soap *soap, const struct ns__getCurrentTiltAngle *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->a, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getCurrentTiltAngle(struct soap *soap, struct ns__getCurrentTiltAngle *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getCurrentTiltAngle(struct soap *soap, const struct ns__getCurrentTiltAngle *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getCurrentTiltAngle);
	if (soap_out_ns__getCurrentTiltAngle(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getCurrentTiltAngle(struct soap *soap, const char *tag, int id, const struct ns__getCurrentTiltAngle *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getCurrentTiltAngle), type);
	soap_out_int(soap, "a", -1, &a->a, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__getCurrentTiltAngle * SOAP_FMAC4 soap_get_ns__getCurrentTiltAngle(struct soap *soap, struct ns__getCurrentTiltAngle *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getCurrentTiltAngle(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__getCurrentTiltAngle * SOAP_FMAC4 soap_in_ns__getCurrentTiltAngle(struct soap *soap, const char *tag, struct ns__getCurrentTiltAngle *a, const char *type)
{
	short soap_flag_a = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__getCurrentTiltAngle *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getCurrentTiltAngle, sizeof(struct ns__getCurrentTiltAngle), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getCurrentTiltAngle(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_a && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "a", &a->a, ""))
				{	soap_flag_a = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_a))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getCurrentTiltAngle *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__getCurrentTiltAngle, 0, sizeof(struct ns__getCurrentTiltAngle), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getCurrentTiltAngleResponse(struct soap *soap, const struct ns__getCurrentTiltAngleResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->result, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getCurrentTiltAngleResponse(struct soap *soap, struct ns__getCurrentTiltAngleResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_float(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getCurrentTiltAngleResponse(struct soap *soap, const struct ns__getCurrentTiltAngleResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getCurrentTiltAngleResponse);
	if (soap_out_ns__getCurrentTiltAngleResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getCurrentTiltAngleResponse(struct soap *soap, const char *tag, int id, const struct ns__getCurrentTiltAngleResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getCurrentTiltAngleResponse), type);
	soap_element_result(soap, "result");
	soap_out_float(soap, "result", -1, &a->result, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ns__getCurrentTiltAngleResponse * SOAP_FMAC4 soap_get_ns__getCurrentTiltAngleResponse(struct soap *soap, struct ns__getCurrentTiltAngleResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getCurrentTiltAngleResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ns__getCurrentTiltAngleResponse * SOAP_FMAC4 soap_in_ns__getCurrentTiltAngleResponse(struct soap *soap, const char *tag, struct ns__getCurrentTiltAngleResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__getCurrentTiltAngleResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getCurrentTiltAngleResponse, sizeof(struct ns__getCurrentTiltAngleResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getCurrentTiltAngleResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "result", &a->result, ""))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getCurrentTiltAngleResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_ns__getCurrentTiltAngleResponse, 0, sizeof(struct ns__getCurrentTiltAngleResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__string(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (soap_out_xsd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__string, 1, 0, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
}

/* End of soapC.cpp */
