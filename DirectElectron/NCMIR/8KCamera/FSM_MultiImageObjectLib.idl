// FSM_MultiImageObjectLib.idl : IDL source for FSM_MultiImageObjectLib.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (FSM_MultiImageObjectLib.tlb) and marshalling code.

// Rectangle information used for ROI
struct Rect {
	unsigned long ulLeft;
	unsigned long ulTop;
	unsigned long ulRight;
	unsigned long ulBottom;
};

// Structure contain information for buffer allocation of simple image
// Simple image doesn't contain any extra space between pixel data.
// SimpleImage Flag : If there is no extra space in Image, this value is 1.
struct SimpleImageParameters {
	// Number of image frame in the buffer
	unsigned long ulNumberOfFrame;
	// Number of channel in a image
	unsigned long ulNumberOfChannel;
	// Image width
	unsigned long ulWidth;
	// Image height
	unsigned long ulHeight;
	// Image bit depth (8, 10, 12, 16)
	unsigned long ulBitDepth;

	// ulDataSize = ulFrameStep * NumberOfFrame
	// ulDataOffset = 0
	// ulDataGap = 0
	// ulPixelStep is minimum byte size to contain the bit depth
	// ulPixelOffset = 0
	// ulPixelGap = 0
	// ulLineStep = ulPixelStep * ulWidth * ulNumberOfChannel
	// ulLineOffset = 0
	// ulLineGap = 0
	// ulFrameStep = ulLineStep * Height
	// ulFrameOffset = 0
	// ulFrameGap = 0
};

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		uuid(29EA315F-FABA-43B6-92EC-2B2439AF960F),
		dual,
		helpstring("IImageObject Interface"),
		pointer_default(unique)
	]
	interface IImageObject : IDispatch
	{
		[id(1), helpstring("method Allocate")] HRESULT Allocate([in]int ImageNo, [in]long width,[in]long height,[in]int depth);
		[id(2), helpstring("method Free")] HRESULT Free();
		[id(3), helpstring("method GetDataPtr")] HRESULT GetDataPtr([in] int ImageNo, [out] unsigned long* *plData);
		[propget, id(4), helpstring("property ImageWidth")] HRESULT ImageWidth([in]int ImageNo, [out, retval] long *pVal);
		[propget, id(5), helpstring("property ImageHeight")] HRESULT ImageHeight([in]int ImageNo, [out, retval] long *pVal);
		[propget, id(6), helpstring("property ImageDepth")] HRESULT ImageDepth([in]int ImageNo, [out, retval] short *pVal);
	};
	[
		object,
		uuid(9BE4FD23-C61B-4211-8220-DF55F9BC621C),
		dual,
		helpstring("ISimpleImage Interface"),
		pointer_default(unique)
	]
	interface ISimpleImage : IDispatch
	{
		[id(1), helpstring("method AllocateSimpleImageBuffer")] HRESULT AllocateSimpleImageBuffer([in] struct SimpleImageParameters tParam);
		[id(2), helpstring("method FreeImageBuffer")] HRESULT FreeImageBuffer();
		[id(3), helpstring("method IsImageBufferAllocated")] HRESULT IsImageBufferAllocated([out] BOOLEAN *bIsAllocated);
		[id(4), helpstring("method GetSimpleImageBufferParameters")] HRESULT GetSimpleImageBufferParameters([out] struct SimpleImageParameters *ptParam);
		[id(5), helpstring("method SetROI")] HRESULT SetROI([in] struct Rect tRect);
		[id(6), helpstring("method GetROI")] HRESULT GetROI([in] struct Rect *ptRect);
		[id(7), helpstring("method GetDataPtr")] HRESULT GetDataPtr([out] unsigned long* *pDataPtr);
		[id(8), helpstring("method GetImagePtr")] HRESULT GetImagePtr([out] unsigned long* *pImagePtr);
		[id(9), helpstring("method GetFramePtr")] HRESULT GetFramePtr([in] unsigned long ulFrameNumber, [out] unsigned long* *pulFramePtr);
	};

[
	uuid(32C1B1CC-FD16-4916-AB49-DA8F6F83AD73),
	version(1.0),
	helpstring("FSM_MultiImageObjectLib 1.0 Type Library")
]
library FSM_MULTIIMAGEOBJECTLIBLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(E32A3833-BF51-4ECC-BA7C-DE1F7EFB2A6E),
		helpstring("ImageObject Class")
	]
	coclass ImageObject
	{
		[default] interface IImageObject;
	};
	[
		uuid(EB88546C-AA74-4C0F-A442-668A03CCD176),
		helpstring("SimpleImage Class")
	]
	coclass SimpleImage
	{
		[default] interface ISimpleImage;
	};
};
