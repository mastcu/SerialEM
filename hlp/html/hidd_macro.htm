<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
  <HEAD>
    <TITLE>Script Editing Window</TITLE>
    <META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
    <style type="text/css"> <!-- BODY { font-family:"Arial" } TD { font-size:16 } 
  --></style>
  </HEAD>
  <BODY BGCOLOR="#ffffff" TEXT="#000000">
    <basefont size="2">
    <P><A NAME="hidd_macro"></A><B><FONT size="3">Script Editing Window</FONT></B></P>
    <P>These windows allow one to edit scripts. For a list of available commands see <A HREF="script_commands.htm">
        Script Commands</A>; for general information about scripts see <A HREF="about_scripts.htm">
        About scripts</A>. Several basic editing functions are available in the 
      window. Text can be selected with the mouse. Text can be cut with Ctrl X, 
      copied with Ctrl C, and pasted with Ctrl V. Ctrl Z will undo the last action. 
      While you are editing a script, the text in the window will not match the 
      version of the script stored in the program. However, running the script, closing 
      the editing window with the OK button, switching the editing window to another 
      script, or even exiting the program will transfer the text in the window to the 
      program's memory.</P>
    <P>The buttons above the text area can be used to switch the Editor window to the 
      next or previous available script, or to shift the current script down or up in 
      the list of scripts.&nbsp; Specifically:</P>
    <P><b>Left and Right Editor buttons</b> - Switch the editor window to the previous 
      or next script that is not already open in an editor.</P>
    <P><b>Up and Down Script buttons</b> - Shift a script in the list of 
      scripts; i.e., swap it with the previous or next numbered script.&nbsp; &#39;Up&#39; and 
      &#39;down&#39; here refer to the vertical position of scripts in the menu and toolbar.&nbsp; The window will 
      stay with the current script and change its number.&nbsp; If the adjacent script 
      is also open in an editor, both windows will change.&nbsp; These buttons can be 
      disabled unless in Administrator mode with the property 
      &#39;ShiftScriptOnlyInAdmin&#39;.</P>
    <P><strong>Indentation Buttons</strong> - This row of buttons is useful for scripting in Python; they can be 
      hidden with the <a href="menu_script.htm#hid_script_showindentbuttons">Show Indent Buttons</a>
       command in the script menu.</P>
    <P><em>Indent</em> - <strong>Fix</strong> - Adjust the indentation of all selected 
      (highlighted) lines to be the nearest multiple of the indent size.&nbsp; The 
      program will examine all the selected to see what deviations need to be fixed.&nbsp; 
      If they all involve changes by 1 space, it will make the changes.&nbsp; If any 
      of the deviations cannot be resolved because they are half of the indent size, 
      it will ask whether to cancel the operation so that you can examine the lines 
      first.&nbsp; If any of them involve more than one space but are not ambiguous 
      (you would need an indent size over 4 for this to happen), it will ask whether 
      you want to fix just the ones that are off by one space or to fix all of them.</P>
    <P><em>Indent</em> - <strong>Increase</strong> - Add one unit of indentation (the 
      indent size) to all of the selected lines.</P>
    <P><em>Indent</em> - <strong>Reduce</strong> - Remove one unit of indentation from 
      all of the selected lines if possible.&nbsp; If any lines are indented by less 
      than one unit, nothing will be done.</P>
    </basefont>
    <P><b>Completions and Auto-indenting</b> - Below these buttons is a line of text that starts out with a reminder that you 
      can use Tab or ` (the back-tick character) to automatically complete a command 
      name (the first word on a line) as well as convert it to a standard mixed-case 
      form.&nbsp; Tab may not work on non-US keyboards, but ` always will.&nbsp; When 
      you start editing in a window, this line will list up to 10 possible completions 
      of the current text as you type a command.&nbsp; Only a few will show up at the 
      default window size; make the window wider to see more completions.&nbsp; </P>
    <P>Another consequence of typing Tab or ` anywhere on the line is that the editor 
      will set the indentation of the current line based on the indentation of the 
      previous line, whether the previous line starts a block (i.e., with If, Else, 
      Elseif, Loop, or Function), whether the current line ends such a block, and 
      whether it is a continuation line.&nbsp; 
      The amount of additional space in a block or for continuation lines can be controlled with the
      <a href="menu_script.htm#hid_script_setindentsize">Set Indent Size</a> command in 
      the Script menu.</P>
    <P><strong>Behavior for Python scripts</strong> - If a script starts with 
      &quot;#!Pyth&quot;, the editor scans the start of the script to see how Serialem script 
      functions should be prefixed, stopping at the first non-blank line that is neither a comment nor an 
      import line.&nbsp; If it encounters either a line importing serialem, or a 
      &#39;#serialemPrefix&#39; line specifying the prefix,&nbsp;that determines what prefix it expects to find before 
      commands: either no prefix if you import as &#39;from serialem import *&#39;, prefix 
      &#39;serialem&#39; if you use &#39;import serialem&#39;, or the alias if you import with an 
      alias, such as &#39;import serialem as sem&#39;.&nbsp; When you type the completion 
      character, it looks back to the beginning of the word to see if there is already 
      a namespace prefix.&nbsp; If so, and it does not match the expected prefix, it 
      will not attempt to complete the word, just manage indentation.&nbsp; If it does 
      match or is not present, then it will try to complete the word unless it is a 
      Python keyword, and insert the prefix if appropriate.&nbsp; For example, if you 
      use &#39;import serialem&#39; and type the completion character after &#39;choo&#39;, it will 
      insert &#39;serialem.ChooserForNewFile&#39;.</P>
    <P>Completion works both at the beginning of the line and for a word after an &#39;=&#39;.</P>
    <P>Indentation will follow the indentation of the previous line, adding a unit of 
      indentation if that line ends in &#39;:&#39;.&nbsp; However, there is no way for it to 
      tell in general when to remove indentation, as there is with regular scripting.&nbsp; 
      One mildly helpful feature is available if you leave a blank line after the end 
      of a block.&nbsp; Typing the completion character more than once will make it 
      toggle between the indentation of the previous line and one less unit of 
      indentation.&nbsp; </P>
    <P>A controllable way to remove one unit of indentation at a 
      time on any line is to hold down the Shift key while typing the completion character.&nbsp; 
      This allows you to close a block without a blank line or close more than one 
      block.&nbsp; The 'Indent' buttons at the bottom of the editor should also be 
      helpful.</P>
    <P>The buttons below the text area perform the following functions:</P>
    <P><B>Run - </B>will save the script in program memory and run it.&nbsp; 
      Pressing Ctrl-Enter within the editing window will also run the script.</P>
    <P><B>Cancel - </B>will close the window without saving the most recent 
      changes in program memory.</P>
    <P><B>OK - </B>will save the script in program memory and close the window.</P>
    <P><B>Load </B>- will allow you to read a script from a file into the current 
      script. Once a script has been read from a file, the Save button will save it 
      back to that file.</P>
    <P><b>Find -</b> will search for text in the script.&nbsp; An entry box will 
      open for the text to find.&nbsp; The search is case-insensitive.</P>
    <p>
      <strong>To Line -</strong> will allow you to enter a line number to go to.&nbsp; 
      After an error in a Python script, the default value i nthe entry box will be 
      line with the error.&nbsp; The cursor will be moved to the specified line, the 
      window will be scrolled, and the first three characters on the line will be 
      selected to make it more visible.&nbsp;
    </p>
    <P><B>Save </B>- will allow you to save this script to a text file. If you 
      have saved it to a file before, or if you loaded it from a file, it will be 
      saved to the same file. Otherwise you will enter the <A HREF="afx_hidd_filesave.htm">
        Save As dialog box</A> to specify a file</P>
    <P><B>Save As </B>- will allow you to save this script to a different file via 
      the <A HREF="afx_hidd_filesave.htm">Save As dialog box</A>.</P>
    </BODY>
</HTML>
