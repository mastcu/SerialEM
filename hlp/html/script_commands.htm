<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<!--

	STYLE GUIDE

	* The initial verb of a commands' description should end with -s, e.g., "Acquires an image" instead of
	 "Acquire an image"

	* Numeric parameters are abbreviated with a single #, or a # and one letter and one optional index
	 (e.g., #, #A, #A1, #AX),in the description of a command they are printed in <b></b> without quotation marks

	* Numeric parameters are given as a lower case string, in the description of a command they are printed
	 in <b></b> without quotation marks

	* Variables in the description of command start with lower case (including reportedValue) and are printed
	 in <i></i> w/o quotation marks

	* Strings and numbers that are to be entered literally are put into single quotes

-->

<HTML>
  <HEAD>
    <TITLE>Script Commands</TITLE>
    <META content="text/html; charset=Windows-1252" http-equiv="Content-Type">
    <style type="text/css">
     BODY {
       font-family:"Arial"
       }
     TD {
  	    font-size:16
       }
     TD.scriptcommand {
       width: 20em;
	    }
     TR {
       vertical-align: top;
       }
      </style>
  </HEAD>
  <BODY bgColor="#ffffff" text="#000000">
    <basefont size="2">
      <P><A name="script_commands"></A><B><FONT size="3">Script commands</FONT></B></P>
      <P>The script processor is case-insensitive; you can enter commands as ALLCAPS or
        alllowercase, but for readability it is helpful to use MixedCase as in the
        table. Completing a command by typing tab or ` will convert it to MixedCase.&nbsp;
        Parameters to the individual commands are abbreviated as follows:</P>
        <UL>
        <LI>#, #A, #B, ... - A mandatory numeric parameter</LI>
        <LI>[#], [#A], [#B], ... - An optional numeric parameter, do not include the brackets in your script</LI>
        <LI>buf, text, var, prompt, ... - A mandatory non-numeric parameter, can be single letter, keyword or text</LI>
        <LI>[buf], [text], [var], [prompt], ... - An optional non-numeric parameter, can be single letter, keyword or text</LI>
        </UL>
     <P>When there are multiple optional entries, there needs to be an entry for every one up
        to the last one that you want to enter.&nbsp; If there are several entries
        within one set of brackets, they must all be entered if any of them are desired.&nbsp;
        For example, &#39;RealignToNavItem #R [#C] [#S #N #Z]&#39; must have at least one entry,
        and can have 2 or 5, such as &#39;RealignToNavItem 0&#39;, &#39; RealignToNavItem 0 1&#39;, or
        &#39;RealignToNavItem 0 0 0.3 2 0&#39;.</P>
    <P>Frequently used non-numeric parameters used in SerialEM scripting are referred 
      to by these names:</P>
    <UL>
      <LI>buf - A single buffer letter or number, where A is numbered one, or two
        letters like &#39;AF&#39; for commands that can work on a buffer in the FFT window</LI>
      <LI>file - A file name</LI>
      <LI>ID - A text file identifying string</LI>
      <LI>set - A camera parameter set, given by a single letter or number</LI>
      <LI>var - A SerialEM scripting variable name, without leading $</LI>
    </UL>
    <P>Commands assign the primary values that they report to the variables <i>reportedVariable1</i>, etc.&nbsp; 
      When the command description lists the various values that it reports, with no 
      other details, it can be assumed that these variables are each assigned to one 
      of the <i>reportedVariables</i>, in the order in which they are listed.</P>
    <P>Commands starting with &#39;Report...&#39; will assign output to one or more variable
        names listed after the command (omitting the &#39;$&#39;), except where the table notes
        otherwise.&nbsp; For other commands, the table explicitly states when they
      accept variable names.&nbsp; Arithmetic expressions can be used after virtually
      all commands starting with 'Set' and with the commands listed in
      <A HREF="#arithForArgs">Commands Allowing Arithmetic Expressions for Arguments</A>.</P>
    <P>Some commands will call functions that may not be supported by the Thermo/FEI
      scripting adapter or JEOL scripting interface on your scope.&nbsp; In either
      case, the program will crash if it calls a function that does not exist in the
      scripting interface.&nbsp; (Neither of these interfaces has a version number
      that could be used to prevent this.)&nbsp; For a JEOL, the version of TemExt.dll
      that provides the interface may be new enough to have the function, but the call
      will fail with an error if it is not supported by the microscope
      software/hardware.</P>
    <P>All commands not available from Python are marked as &#39;Not from Python&#39;.</P>
      <BR>
      <A href="#macro_control_commands">Script Control Commands</A>
      <BR>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#flow_control">Flow Control Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#var_array">Variable and Array Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#other_control">Other Script Operation Control Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#interaction">Log Output, User Input, and Other Communication Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#python_only">Functions Available Only from Python</A><br>
      <A href="#camera_commands">Camera Commands</A>
      <BR>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#cam_control">Camera Control</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#acquisition">Acquisition Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#params">Parameter Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#continuous_mode">Continuous Mode Control</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#framesaving_alignment">Frame Saving and Alignment</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#hwspecific_camera">Hardware Specific Camera Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#other_camera">Other Camera Commands</A><br>
      <A href="#buffer_file_commands">Buffer and File Commands</A>
      <BR>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#buffer_image">Buffer and Image Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#image_process">Image Processing Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#directory">Directory and Miscellaneous Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#imagefile">Image File Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#montage">Montage File Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#textfile">Text File Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#autodoc">Autodoc/.mdoc File Commands</A><br>
      <A href="#scope_filter_commands">Microscope and Filter Commands</A>
      <BR>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#stage_commands">Stage-Related Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#focus_commands">Focus-Related Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#mag_commands">Magnification-Related Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#beam_commands">Beam-Related Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#image_shift">Image Shift-Related Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#misc_scope">Miscellaneous Scope Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#filter_commands">Energy Filter Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#loader_vacuum">Autoloader, Refrigerant, and Vacuum Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#piezo_commands">Piezo Drive Commands</A><br>
      <A href="#high_level_operations">Higher Level Operations and Tasks</A>
      <BR>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#autoalign">Autoalign-Related Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#autofocus">Autofocus/Autotuning-Related Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#low_dose">Low Dose Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#task_commands">Task-Related Commands</A><br>
      <A href="#navigator">Navigator</A>
      <br>
	   &nbsp;&nbsp;&nbsp;&nbsp; <A href="#navigatorlist">Navigator Window and List Commands</A><br>
	   &nbsp;&nbsp;&nbsp;&nbsp; <A href="#navigatoritems">Item and Group Commands</A><br>
	   &nbsp;&nbsp;&nbsp;&nbsp; <A href="#navigatoritemgen">Item Generating Commands</A><br>
	   &nbsp;&nbsp;&nbsp;&nbsp; <A href="#navigatorali">Alignment and Shift Commands</A><br>
	   &nbsp;&nbsp;&nbsp;&nbsp; <A href="#acqcontrol">Acquisition Control Commands</A><br>
      <A href="#miscellaneous">Miscellaneous Commands</A><br />
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#time_output">Time-Related Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#scale_matrix">Scale Matrix Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#process_running">Process Running Commands</A><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <A href="#other_misc">Other Commands</A><br>
    <A HREF="#arithForArgs">Commands Allowing Arithmetic Expressions for Arguments</A><br>

    <P></P>
      <P><A name="macro_control_commands"></A><B>Script Control Commands</B></P>
      <TABLE border="1" cols="2">
       <TR>
         <TD colspan="2"><A name="flow_control"></A><B>Flow Control Commands</B></TD>
       </TR>
        <TR>
          <TD class="scriptcommand">Repeat</TD>
          <TD>Place at end of script to repeat it.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Loop # [var]</TD>
          <TD>Loops the given <b>#</b> of times until EndLoop; optionally set <b>var</b> with index.&nbsp;
              A loop count less than or equal to 0 is allowed and
            will cause the loop to be skipped.&nbsp; If a script relying on this is liable
            to run on earlier versions, it should include the line 'Require zeroloop'.&nbsp;
            <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">DoLoop var #S #E [#I]</TD>
          <TD>Loops from <b>#S</b> to <b>#E</b>, inclusive, assigning the loop index to <b>var</b>.&nbsp;
              The optional <b>#I</b> can be entered to set the increment, which is 1 by default.&nbsp;
              If the starting index is already past the ending one, the loop will be skipped.&nbsp;
              Integer values should be entered; non-integer values will be truncated to
              integers.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EndLoop</TD>
          <TD>Marks the end of a loop.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">DoScript #<br />
            DoMacro #</TD>
          <TD>Switches to given script <b>#</b>.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CallScript # [arg1 arg2 ...]<br />
            CallMacro # [arg1 arg2 ...]</TD>
          <TD>Calls other script by <b>#</b> and returns.&nbsp; The <b>#</b> can be -1 to use the script
            number found by a previous 'FindScriptByName'.&nbsp; A regular SerialEM script
            may call a Python script provided that the top-level script was not Python.&nbsp;
            When doing so, optional arguments can be added and will be placed into a list of
            strings named 'SEMargStrings' in the Python script.
            <br>Callable from Python with the number of a regular SerialEM script, but with no optional arguments.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">FindScriptByName text</TD>
          <TD>Finds the number of the script whose name is <b>text</b> and stores its number internally
            so that it can be used in a following 'CallScript -1'. &nbsp;Names are case-sensitive
             and  must match exactly, including spaces.<br />
            Not from Python.&nbsp; Command added in 3.9.0, 5/4/21</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Call text</TD>
          <TD>Calls other script by name. Names are case-sensitive and must match exactly,
            including spaces.&nbsp;  A regular SerialEM script may call a Python script provided
             that the top-level script was not Python. <br>Callable from Python with the name
            of a regular SerialEM script.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CallStringArray var [#E]</TD>
          <TD>
            Places the array of strings in <i>var</i> into an &#39;extra&#39; script and runs
            it.&nbsp; Extra scripts are temporary and available only until a script ends.&nbsp; Up to
              5 extra scripts can be defined; they are added sequentially to positions
              numbered 1 to 5.&nbsp; The optional <b>#E</b> can be entered to place a script into a
              previously used position or the next unused position.&nbsp; If the script
              depends on other temporary scripts, they can be loaded first with
              'StringArrayToScript'.&nbsp; <br>Callable from Python if the string array contains a
             regular SerialEM script and the Python script was not called from a regular script.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Function name [#N] [#S] [args]</TD>
          <TD>Defines a function with the given <b>name</b> (without embedded spaces).&nbsp; The
            optional <b>#N</b> indicates the number of numeric arguments and <b>#S</b> is non-zero to
            indicate that a string argument occurs after the numeric ones.&nbsp; Optional
            variable names can be provided for the arguments.&nbsp; Functions
            must be placed at the ends of scripts.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EndFunction</TD>
          <TD>Required ending to a function definition.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CallFunction name [args]</TD>
          <TD>Calls the function with the given <b>name</b> and supplies arguments for the function
            to receive.&nbsp; If the name could occur in more than one script, it must be
            qualified with a script number or name, i.e. &#39;5::GoodFunc&#39; or &#39;Func
            Script::GoodFunc&#39;.&nbsp; The variable <i>functionName</i> is defined with the
            name.&nbsp; <br>Callable from Python with the name of a regular script function as
             its first, string argument.&nbsp; The order of arguments is changed from what is used in
            a regular script: the first optional argument is the string argument that the function
            may allow, and then up to 17 numeric arguments can be passed.&nbsp; If a function takes
            no string argument, you can just use an empty string.&nbsp; For example:<br />
            &nbsp; &nbsp; &nbsp; &nbsp; retVals = CallFunction('My Functions::Cycle Defocus', '', 1., 10)
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">PythonScript [arg1 arg2 ...]</TD>
          <TD>Allows a Python script to be embedded in a regular script and run at that point. &nbsp;
            Optional arguments can be added and will be placed into a list of strings named
            'SEMargStrings' in the Python script. &nbsp;This is equivalent to having the Python
            text by itself in a different script and calling it with 'CallScript'. <br />
            Not from Python.&nbsp; Command added in 3.9.0, 5/4/21</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EndPythonScript</TD>
          <TD>This line must occur at the end of an embedded Python script started with 'PythonScript'.&nbsp;<br />
            Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">If expression</TD>
          <TD>Starts a block that is executed conditionally on the value of 'expression'.&nbsp;
            <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Endif</TD>
          <TD>Ends a block started with 'If'.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Elseif expression</TD>
          <TD>Inside of an If/Endif block, starts a block that is executed conditionally on
            the value of 'expression' if the expressions in the starting 'If' statement and
            any preceding 'Elseif' statements were not true.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Else</TD>
          <TD>Inside of an If/Endif block, starts a block that is executed if the expression
            after the 'If' and any preceding 'Elseif' commands is false.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Break</TD>
          <TD>Stops execution of the innermost Loop containing this statement.&nbsp; Not from
            Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">KeyBreak [key]</TD>
          <TD>If the user presses &#39;B&#39;, or the key given by the optional <b>key</b> entry, the
            script breaks out of the innermost Loop containing this statement.&nbsp; <b>key</b>
            should be a letter or number; the test for the key is case-insensitive.<br />
            Callable from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Continue</TD>
          <TD>Skips the rest of the current iteration of the innermost Loop containing this
            statement.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SkipTo label</TD>
          <TD>Skips forward to the line starting with the given label, where the label has a
            colon (:) at the end of it and is the only item on the line.&nbsp; The colon is
            not included in the label in the 'SkipTo' statement.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Try</TD>
          <TD>Starts a block within which an error will result in the script jumping to the
            line after the following &#39;Catch&#39; statement instead of a message box appearing.&nbsp;
            See <A HREF="about_scripts.htm#tryCatch">Error Handling and TRY - CATCH - ENDTRY Blocks</A>.

            &nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Catch</TD>
          <TD>Starts the block of commands that are run only when an error occurs or &#39;Throw&#39;
            statement is used inside the 'Try' portion of the block.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EndTry</TD>
          <TD>Ends the block of commands run upon error.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Throw [text]</TD>
          <TD>Jumps to the 'Catch' section of the 'Try' block containing this statement,
            adding the optional <b>text</b> to the message given in the log about the jump.

            &nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OnStopCallFunc name</TD>
          <TD>Calls the function with the given <b>name</b> when the script is stopped by the user
            pressing STOP or by an error in a script operation or in an external routine.&nbsp;
            The function must not take any arguments, and it should not call other functions
            or scripts (such calls will be skipped).&nbsp; The function will be called only
            once, even if there is an error or STOP while it is running.&nbsp; The script
            will be aborted (not left in a resumable state) when the end of the function is
            reached.&nbsp;&nbsp; <br>Not from Python. </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Return [r1] [r2] [r3] [r4] r[5] [r6]</TD>
          <TD>Without executing to the end of the current script, returns to calling script or
            ends execution if this is the top-level script.&nbsp; As of SerialEM 3.9, 4.28.21, up to 6
             return values can be placed in <i>reportedValue1</i> to <i>reportValue6</i> with optional
            arguments <b>r1</b> to <b>r6</b>&nbsp; If any such arguments are included, existing reported
            values will be cleared; otherwise they will be preserved.&nbsp; If there is any chance that a script relying on this
            feature will be run on an earlier version, include the line 'require 203' in the script.
            <br>Callable from Python with the same functionality, except that existing reported values
            are always cleared.&nbsp; The returned arguments must all be strings.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Exit [text]</TD>
          <TD>Ends execution unconditionally and prints the optional <b>text</b> to the log.&nbsp;
            <br />
            Callable from Python: From a Python script, there are <i>two</i> optional arguments, an integer then a
            string; i.e., it is called as Exit([exc], [text]).&nbsp; In a script run from
            SerialEM, <b>exc</b> should be 0 when exiting from normal code or positive when exiting from
            a Python exception; the default is 0.&nbsp; In a script run from an externally started Python,
            the default is 1 to keep the script from raising a SEMexited exception.&nbsp; You can call
            with a 0 if you want to catch this exception.
            </TD>
        </TR>
       <TR>
         <TD colspan="2"><A name="var_array"></A><B>Variable and Array Commands</B></TD>
         </TR>
        <TR>
          <TD class="scriptcommand">CompareStrings var text</TD>
          <TD>Compares the strings in the given variable <b>var</b> (without a $) and in the <b>text</b> on
            the rest of the line.&nbsp; Sets <I>reportedValue1</I> to 0 if the strings are equal, a
            negative number if the variable is alphabetically before the text, and a
            positive number if it is after.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CompareNoCase var text</TD>
          <TD>Like CompareStrings except that upper/lower case differences are ignored
            in the comparison.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">StripEndingDigits var1 var2</TD>
          <TD>Removes any digits from the end of the variable <b>var1</b> and assigns it to the
            variable <b>var2</b> (both named without a $).&nbsp; The digits are converted to a
            number and assigned to <I>reportedValue1</I>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">TrimString var #F token</TD>
          <TD>Trims a string in variable <B>var</B>from either the back or the front, depending on whether
             <B>#F</B> is 0 or nonzero.&nbsp; Trimming from the back, it starts at and includes the 
            last occurrence of <b>token</b> (one character or word without spaces).&nbsp; From 
            the front, it trims through the first occurrence of <b>token</b>.&nbsp; The result can be assigned
             to a variable at the end of the command.&nbsp; Command added in 4.1, 7/14/22.</TD>
        </TR>
        <TR>
            <TD class="scriptcommand">ListVars</TD>
            <TD>Lists all variables and their values in the log window, including reported
            values, persistent variables, and loop indices.
            </TD>
        </TR>
        <TR>
            <TD class="scriptcommand">ListPersistentVars</TD>
            <TD>Lists all variables defined as persistent and their values in the log
            window.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ClearPersistentVars</TD>
          <TD>Removes all persistent variables defined with ':='</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MakeVarPersistent var [#]</TD>
          <TD>Changes a regular variable to persistent, or if a 0 is entered for <b>#</b>, makes a
              persistent variable non-persistent.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">IsVariableDefined var</TD>
          <TD>Reports whether a variable is defined, placing a 1 in
            <I>reportedValue1</I> if it is and a 0 if it is not.&nbsp; Follow with the variable
            name without a $.&nbsp; Value can be assigned to a variable at end of command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LocalVar var [var] ...</TD>
          <TD>Creates the listed variables as variables local to the current script or
            function.&nbsp; They will not be accessible outside this script or function and
            will become undefined when returning from the script or function.&nbsp; Not from
            Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LocalLoopIndexes</TD>
          <TD>Makes loop indexes local; this means that a called function or script cannot
            access the index value in the caller and is free to reuse the variable name
              as a loop index or other variable.&nbsp; If this feature is used, this
              command should
            be near the start of any script that may be started independently.&nbsp; Once
            the feature is invoked, it cannot be turned off.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">NewArray var #T #E</TD>
          <TD>Creates a new variable with the name <b>var</b>, making it persistent or local if
               <b>#T</b> is 1 or -1, respectively, or a regular variable if <b>#T</b> is 0.&nbsp; The
            array is initialized with <b>#E</b> zeros.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">New2DArray var [#T] [#R #E]</TD>
          <TD>Creates a 2D array variable with the name <b>var</b>, making it persistent or
              local if <b>#T</b> is 1 or -1, respectively, or a regular variable if <b>#T</b> is 0.&nbsp; If
             the optional <b>#R</b> and <b>#E</b> are
               given, the array is initialized with <b>#R</b> rows of <b>#E</b> zeros each, where both
               must be positive.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AppendToArray var item</TD>
          <TD>Appends one item or an array or items either to a 1D variable, which may
               already be an array or not, or to a row of a 2D array, specified with <b>var[row]</b>, or as a new row of a 2D array, specified without a subscript.&nbsp;
               As with setting a variable, if there are multiple items on the line not
              specified as an array, only the first item will be added, whereas if there
              the multiple items are enclosed in '{ }', all items will be added to the
              array.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">TruncateArray var #</TD>
          <TD>Truncates the given array variable <b>var</b> to <b>#</b> elements; <b>#</b> must be positive. For a
               1D array,&nbsp; the values is truncated to <b>#</b> elements; for a row of a 2D
               array,&nbsp; specified by var[row], the row of values is truncated; for a
              2D array given without a subscript, the number of rows is truncated to <b>#</b>.&nbsp;
            <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ArrayStatistics var</TD>
          <TD>For the set of values in the given array variable, computes and reports the
              total number of values, the minimum, the maximum, the mean, the standard deviation
              and the median.&nbsp; For a 2D array, the statistics can be of the whole array, or of
              one row if the variable is given with a row subscript. Values can be assigned
               to variables at end of command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LinearFitToVars var1 var2 [var3]</TD>
          <TD>Computes a linear least-squares fit between values in 2 or 3 array variables.&nbsp; With
            two variables, fits to the equation&nbsp; v2 = slope * v1 + intercept and reports the
            number of values, slope, intercept, and correlation coefficient 'ro'.&nbsp; With
            three variables, fits to the equation v3 = a1 * v1 + a2 * v2 + c and reports the
            number of values, a1, a2, and c.&nbsp; All variables must have the same number
            of values.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">StringArrayToScript var [#E]</TD>
          <TD>Loads the array of strings in <b>var</b> into an 'extra' or regular script.&nbsp; Use
              this command to make functions in an extra script available, such as to another
              extra script.&nbsp; Extra scripts are added sequentially to positions numbered 1
              to 5.&nbsp; A positive value <b>#E</b> can be entered to place a script into a
              previously used position or the next unused position.&nbsp; A negative value (-1
              to -40) can be used to replace the script in one of the regular script positions
              that are editable and saved to settings.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="other_control"></A><B>Other Script Operation
          Control Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ScriptName text<br />
            MacroName text</TD>
          <TD>Names the script to the given <b>text</b>, which can include spaces.&nbsp; The
            variable <i>scriptName</i> is defined with either this name, or "Script #n" if no name
            has been defined, when the script is started running.&nbsp; Not called as a
            function from Python, but can be present as a comment.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LongName text</TD>
          <TD>A longer name to appear in the Run submenu of the Script menu; if this name is
            not defined, the regular name defined by ScriptName or MacroName appears there.&nbsp; The
            variable <i>longName</i> is defined with this name when a script is started running.
            Not called as a function from Python, but can be present as a comment.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReadOnlyUnlessAdmin</TD>
          <TD>Prevents changing the script in the script editor from this command to the end
            of the script, unless Administrator mode is
            turned on in the Calibration menu.&nbsp; Place the command at the beginning of
            script to make the whole script read-only. Not called as a function from Python,
            but can be present as a comment.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Delay # [units]</TD>
          <TD>Waits for given amount of time. The optional <B>units</B> can be 'msec', 'sec', or
            'min'. If no units are given, a <B>#</B> &lt;= 60 is taken to be seconds, and a <B>#</B> &gt;
            60 is taken to be milliseconds</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">WaitForMidnight [#B] [#A] [#H #M]</TD>
          <TD>If the current time is between <b>#B</b> (default 5) minutes before and <b>#A</b> (default 5) minutes after
            midnight, or an alternative time specified by the optional entries <b>#H</b> (the hour from 0 to 23) and
            <b>#M</b> (the minute from 0 to 59), the script will wait until <b>#A</b> minutes after
            midnight or the given time.</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">ParseQuotedStrings [#]</TD>
          <TD>Allows strings that may have spaces to be enclosed in <B><i>single quotes</i></B> (e.g.,
            'text string') and treated as a single entity in cases where it would be broken
            up at the spaces.&nbsp; Follow with a 0 to turn off such parsing.&nbsp; The best
            use of this feature would be for making an array of strings in a single
            statement that encloses the entries with braces.&nbsp; It also allows a string
            to be assigned to a variable without using '@='. &nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Verbose #</TD>
          <TD>Turns echoing of each script line on or off for <b>#</b> 1 or 0</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SuppressReports [#]</TD>
          <TD>Disables printing of reports and other script output, and just assigns the values to report
            variables.&nbsp; Including 0 for the optional <b>#</b> reenables printing.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SuspendNavRedraw [#]</TD>
          <TD>Disables updating of the table list box in the Navigator window and redrawing of
            the image window when Navigator items are changed, to speed up scripting changes of
            multiple items.&nbsp; Updating is reenabled and done when this command is given again
            with 0 for the optional <b>#</b> or when the script ends.&nbsp; Command added in 3.9, 9/23/20.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">DeferLogUpdates [#]</TD>
          <TD>Makes output to the log window be held in a buffer and added to the window
             periodically, to speed up repetitive printing to log.&nbsp; The buffering ends
             when this command is given again with 0 for the optional <b>#</b> or when the script
             ends.&nbsp; Command added in 3.9, 9/23/20.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ErrorsToLog [#]</TD>
          <TD>Makes most script error messages be duplicated in the log
            window.&nbsp; Follow with a 0 to turn off the feature again.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">NoMessageBoxOnError [#]</TD>
          <TD>Outputs an error message to the log instead of opening a message box.&nbsp;
            The script stops, but if it is being run from Navigator Acquire at Items, the
            Navigator is able to go to the next item.&nbsp; Follow with 0 to turn the
            feature off again.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">GetFileInWatchedDir pattern</TD>
          <TD>Looks for a file matching the given <b>pattern</b>, where pattern can be a directory
            followed by a filename including &#39;*&#39; to match multiple names.&nbsp; If
             just a directory is entered, the program appends a &#39;*&#39;.&nbsp; If a file
             is found, it returns 1 in <I>reportedValue1</I> and the filename in <I>reportedValue2</I>;
            otherwise it returns 0 and 'none'.&nbsp; A file is ignored if a file with the same
            name plus &#39;.lock&#39; is found as well.&nbsp; Thus, if there is a risk that a file
            might not all be present when SerialEM first sees it, the program creating the file
            should create the &#39;.lock&#39; file (which can be empty), then create and finish
             writing to the file to be found, then remove the &#39;.lock&#39; file.&nbsp;
             The file will need to be removed to avoid finding it again on the next call.

          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">IsFFTWindowOpen</TD>
          <TD>Reports whether the FFT window is open; the value can be assigned to a
            variable after the command.&nbsp; Command added in 3.9, 2/6/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RunScriptInWatchedDir pattern</TD>
          <TD>Looks for a file matching the given <b>pattern</b>, like &#39;GetFileInWatchedDir&#39;,
            and reads the file, places its contents in an extra script position, removes the file,
            and runs that script. &nbsp;It sets <I>reportedValue1</I> and <I>2</I> just as
            for 'GetFileInWatchedDir'. &nbsp;As for &#39;GetFileInWatchedDir&#39;, a &#39;.lock&#39;
            file can be used to avoid the risk that the file is not complete when SerialEM
            sees it.<br>Not from Python, although the script may be Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RunScriptInFile file</TD>
          <TD>Runs a script in <b>file</b> by reading it into an extra script position and 
            calling it from the current script.&nbsp; Command added in 4.0, 3/7/22.
            <br>Not from Python, although the script may be Python.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Require feature [feature] ...<br />
            Require script_version_number</TD>
          <TD>This command tests whether scripting features used in the script are available in this
            version of SerialEM.&nbsp; Earlier versions will not generate an error when some
            newer features are used, so including this command is the only way to test
            whether the script will run correctly.&nbsp; Initially these features were
            specified by name, but this was silly and the command now takes a scripting
            version number, which is unrelated to the program version number.&nbsp; You can
            enter either the latest feature name or the version number that your script
            needs. The available features, in order of addition, were: 1) &#39;variable1&#39;,
               which includes two capabilities: assigning reported values
            directly to variables listed after a command, and assigning function arguments
            directly to variables listed on the &#39;Function&#39; line.&nbsp; 2) &#39;arrays&#39;,
            which is the ability to define a variable with an indexable array of values.&nbsp;
            3) &#39;keepcase&#39;, which means that case will be preserved when assigning text to a
            variable.&nbsp; 4) 'zeroloop', which means that a non-positive loop count is
            allowed.&nbsp; 5) &#39;evalargs&#39;, which means that arithmetic expressions will be
            evaluated in arguments to some commands.&nbsp; 6) Scripting version 201, which
            means commands can be continued onto multiple lines with backslash.&nbsp;
              7) Version 202, which means that limited arithmetic can be done in
              array subscripts (without spaces) and that arithmetic clauses can start with a minus sign.&nbsp;
            8) Version 203, in which the 'Return' command can
             return values from a function or script.&nbsp; 9) Version 204, in which string assignments
            can have embedded newlines, and string assignments and defining an array of quoted strings can
            have more than ~55 words.
            <br>Not from Python.&nbsp; 
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">IsVersionAtLeast #V [#D]</TD>
          <TD>Tests whether the program version is at least the version specified with <b>#V</b>,
            and also if its build date is at least that specified by the optional <b>#D</b>.&nbsp;
            The version should be 5 digits: the initial version number (currently 3) times
            10000, plus the major release version times 100, plus the minor version (.e.g,
            3.6.3 is 30603).&nbsp; The build date should have the format yyyymmdd, e.g.,
            'Sep 12 2017'; is specified as 20170912.&nbsp; Sets <I>reportedValue1</I> to 1 if the
            version is high enough, 0 if not.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SkipIfVersionLessThan #V [#D]</TD>
          <TD>Skips the command on the next line if the program version is earlier than the
            version specified with <b>#V</b>, or if the build date is earlier than the optional
            entry <b>#D</b>.&nbsp; The format of these entries is as just described.&nbsp; The next
            line will be skipped unconditionally when checking the script before execution.&nbsp;
            Thus, loop and conditional control statements cannot be on that line.&nbsp; This
            command is intended to provide a way to place a newer command into a script and
            allow it to be runnable on older versions.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Test expression</TD>
          <TD>Evaluates a conditional expression (just as would be used for an IF statement)
            or a single number or variable value and stores whether the test passed (i.e.,
            if the expression is true or if the number is non-zero) internally, as well as
            storing a 1 for success or 0 for failure in <I>reportedValue1</I> and a variable
            <i>TestResult. &nbsp; </i><br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">PauseIfFailed [text]</TD>
          <TD>If the last &#39;Test&#39; command failed, this command opens a message box with the
            optional text plus the question of whether to proceed with the script, even if
            NoMessageBoxOnError is set.&nbsp; <br>Not from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AbortIfFailed [text]</TD>
          <TD>If the last &#39;Test&#39; command failed, this command opens a message box with the
            optional text (unless NoMessageBoxOnError; is set) and aborts the script.&nbsp; Not
            from Python.</TD>
        </TR>
       <TR>
          <TD colspan="2"><A name="interaction"></A><B>Log Output, User Input, and Other 
            Communication Commands</B></TD>
        </TR>
       <TR>
          <TD class="scriptcommand">Echo [text]</TD>
          <TD>Prints the <b>text</b> to the log window, or a blank line if there is no text.&nbsp;
            Variables are substituted but arithmetic expressions are not evaluated.&nbsp;
            Multiple spaces between words are preserved, as well as extra spaces before the text.  The two 
            characters '\n' will print unchanged, so file paths will print correctly.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EchoBreakLines [text]</TD>
          <TD>Prints the <b>text</b> to the log window, or a blank line if none, after substituting variables
            and breaking the line at either escaped newlines (the two characters '\n') in <b>text</b> or at 
            embedded newline characters, which are the separators between
            array elements.&nbsp; I.e., an array of strings will be printed on separate 
            lines.&nbsp; Command added in 4.0, 1/24/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EchoEval [text]</TD>
          <TD>Prints the <b>text</b> to the log window after substituting variables and evaluating
            arithmetic expressions.&nbsp; Multiple spaces between words will be lost.&nbsp; Not
            from Python.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EchoNoLineEnd text</TD>
          <TD>Prints the <b>text</b> to the log window after substituting variables and evaluating
            arithmetic expressions, without adding a line ending, so more text can be
            written to the line.&nbsp; Multiple spaces between words will be lost.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EchoReplaceLine [text]</TD>
          <TD>Removes existing text from the log back to the last line ending, if there is
            any such text, then prints the optional <b>text</b> to the log after substituting
            variables and evaluating arithmetic expressions, without adding a line ending.&nbsp;
            This command can be used repeatedly to update the text on a line, such as with a
            status output.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EchoNoVarSub [text]</TD>
          <TD>Prints the <b>text</b> verbatim to the log window including initial extra spaces,
            or a blank line if there is
            no text, without substituting variables.&nbsp; <br>Not from Python.&nbsp; Command added in 4.9, 1/8/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Pause [text]</TD>
          <TD>Opens message box with optional <b>text</b> plus question of whether to proceed with
            script.&nbsp; Is not suppressed by NoMessageBoxOnError.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">YesNoBox text</TD>
          <TD>Opens a Yes-No message box with the given <b>text</b>, which should be a question that
            can be answered with yes or no. Sets <I>reportedValue1</I> to 1 or 0 for a yes or no
            answer.&nbsp; If NoMessageBoxOnError is set, no box appears, the text is printed to the
            log, and <I>reportedValue1</I> is 0.&nbsp; If you do not like the way lines are broken in
            the standard message box, use the command 'NoLineWrapInMessageBox' and a 'three-choice box'
            with Yes and No buttons will be used instead.
          </TD>
        </TR>
       <TR>
          <TD class="scriptcommand">OKBox text</TD>
          <TD>Opens a message box with the given <b>text</b> and just an OK button.&nbsp; The box is
            not suppressed by NoMessageBoxOnError.&nbsp; If you do not like the way lines are broken in
            the standard message box, use the command 'NoLineWrapInMessageBox' and a 'three-choice box'
            with one OK button will be used instead.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EnterOneNumber text</TD>
          <TD>Opens a dialog box for the user to enter one floating point number, with the
            given text as the prompt.&nbsp; Sets <I>reportedValue1</I> to the entered value.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EnterDefaultedNumber #V #D text</TD>
          <TD>Opens a dialog box for the user to enter one floating point or
            integer value.&nbsp; Follow with the default value <b>#V</b> to show in the box, the
            number of decimal places <b>#D</b> to show for a float entry or -1 for an integer entry,
            and the prompt <b>text</b> on the rest of the line.&nbsp; Sets <I>reportedValue1</I> to the
            entered value.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EnterString var text</TD>
          <TD>Opens a dialog box for the user to enter a string of <b>text</b>, with the
            given text as the prompt, and assigns it to the given variable <b>var</b> (without a
            $).</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ThreeChoiceBox header choice1 [choice2] [choice3] buttons</TD>
          <TD>Opens a dialog box to allow the user to choose between two or three options, although 
            just one response is also allowed.&nbsp;
            Follow with 3 to 5 variable names.&nbsp; Put initial text to appear at the top of the box
            in variable <b>header</b>, descriptions of the choices in variables
            <b>choice1</b>, the optional <b>choice2</b>, and the optional <b>choice3</b>, and button labels as an
            array of strings in <b>buttons</b>.&nbsp; These names are arbitrary.&nbsp; Use an array of
            strings to have multiple lines of text for the header or descriptions.&nbsp; Use a line with
            just 'header @=' to make a variable for omitting the header text.&nbsp; The number of the
            choice (1, 2, or 3) is placed in <i>reportedValue1</i>.&nbsp; See Three Choice Box in
            <A HREF="about_scripts.htm#examples">Advanced Examples</A>.&nbsp; Command added in 3.9, 3/5/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">NoLineWrapInMessageBox [#]</TD>
          <TD>Disables line wrapping in the message boxes opened with 'ThreeChoiceBox', 'YesNoBox', 
            and OKBox', or re-enables it with if the optional <b>#</b> is 0.&nbsp; Command added 4.0, 1/24/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EnterNameOpenFile [prompt]</TD>
          <TD>Gets a filename through a dialog with a simple text box and open it as a new
            file.&nbsp; If the optional <b>prompt</b> string is not supplied, the prompt is 'Enter
            name for new file:'.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChooserForNewFile # var</TD>
          <TD>Opens a file chooser for the user to specify a new file; <b>#</b> should be 0 for an
            MRC file or non-zero for an .idoc file, and <b>var</b> must be the name of a variable
            to which the full filename will be assigned.&nbsp; Since the user will confirm
            the replacement of a file, the command also allows &#39;OpenNewFile&#39; and
            &#39;OpenNewMontage&#39; to overwrite an existing file.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">UserOpenOldFile</TD>
          <TD>Opens a file chooser for a user to open an existing MRC, HDF or .idoc file and opens the file,
            just like the <a href="menu_file.htm#hidm_file_openold">Open Old</a> item in the File menu.
            The script is suspended if the user cancels or pick a file that cannot be
            opened.&nbsp; Command added in 3.9, 2/6/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetStatusLine #L text</TD>
          <TD>Places the given text in status line <b>#L</b> at the bottom of the Camera & Script control panel and makes 
            sure that enough lines are displayed there to show this line (see <a href="menu_script.htm#hid_script_set_num_status">Set
               # of Status Lines</a> in the Script menu).&nbsp; There are currently up to 6 lines allowed so <B>#L</B> can be between
            1 and 6.&nbsp; Command added in 4.1, 9-Mar-23.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">HighlightStatusLine #L #O</TD>
          <TD>Sets the background color of status line <b>#L</b> to magenta if <b>#O</b> is nonzero or restores
            it to yellow if it is 0, or does so to all lines if <b>#L</b> is 0.&nbsp; Command added in 4.1, 9-Mar-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ClearStatusLine #L</TD>
          <TD>Clears the text out of status line <b>#L</b> and restores it from using the highlight color, or does
            so with all lines if <b>#L</b> is 0.&nbsp; Command added in 4.1, 9-Mar-23.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">FlashDisplay [#T] [#D] [rgb]</TD>
          <TD>Flashes between a uniformly colored screen and normal image display
            several times.&nbsp; The first optional entry, <b>#T</b>, sets the number of times to
            flash (default 4) and the second optional entry, <b>#D</b>, sets the duration of each
            state in seconds (default 0.3).&nbsp; Total duration may not exceed 6 seconds.
            The third optional entry, <b>rgb</b>, sets the color of the flashing screen in
            hexadecimal (RRGGBB) notation, e.g. FF5500 is orange.</TD>
        </TR>
         <TD colspan="2"><A name ="python_only"></A><B>Functions Available Only from Python</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetVariable(var, value)</TD>
          <TD>Sets variable <B>var</B> within SerialEM scripting with <b>value</b>, which
            must be a string.&nbsp; A one-dimensional array variable can be passed by separating
            each value with newlines ('\n', written as '|\n' within SerialEM).&nbsp; The Python wrapper
             function 'listToSEMarray' can be used to convert a list with numeric and/or string
            values to a newline-separated string.&nbsp; Variable names are stored as upper case within
             SerialEM, so all variable specifications are case-insensitive.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">SetPersistentVar(var, value)</TD>
          <TD>Like SetVariable, but sets it as a persistent variable.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">SetFloatVariable(var, value [, #P])</TD>
          <TD>Sets variable <B>var</B> within SerialEM scripting with <b>value</b>, which
            must be numeric, and sets it as a persistent variable if the optional <b>#P</b> is
            non-zero.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">GetVariable(var)</TD>
          <TD>Returns the value of a variable <b>var</b> as string or floating point value, depending
             on whether the variable was designated as numeric when it was stored&nbsp; The Python wrapper
             function 'SEMarrayToFloats' can be used to create a list of float values from the return value
            if the variable contains either a single numeric value or an array of numeric values</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">bufferImage(buf)</TD>
          <TD>Constructs an instance of the 'bufferImage' type that has an image pointer and other
            essential information about the image in buffer <b>buf</b>, which is a
            non-numeric string and can specify an FFT buffer.&nbsp; This type instance can
            provide the image to other classes via the Python &#39;Buffer Protocol&#39;.&nbsp; To convert to
            a numpy array, use 'numpy.asarray()'; numpy.frombuffer() requires extra steps to set the shape and data size.&nbsp; The
            image may have padding (i.e., not be strictly contiguous) and a request that does not permit
             striding between lines could generate an exception.&nbsp; Not available below Python 3.4.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">PutImageInBuffer(image, buf [,#X, #Y, base, #B, #C])</TD>
          <TD>Places an image that provides the 'Buffer Protocol' for array access into buffer <b>buf</b>.&nbsp; If
            <b>buf</b> is 'A' then buffers are rolled as when making a new processed image.  Optional arguments
             are: <b>#X</b> and <b>#Y</b> with the X and Y size of the image (<I>this seems to be required for
            an image from numpy</I>); <b>base</b> with the letter of a buffer to use as the basis for various
            buffer parameters (the default is the buffer where the image is being placed); <b>#B</b> with a
            value of additional binning (default 1); <b>#C</b> with a 'capture flag' to define how the image is
            labeled in the buffer status window (the default is -1 for 'Processed').
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ConnectToSEM([#P, IP])</TD>
          <TD>When running Python externally to control SerialEM, this function can be used
            optionally as the first call to SerialEM
            to define an alternative port in <b>#P</b> (the default is 48888) or an alternative
            IP address in <b>IP</b> (the default is '127.0.0.1').  If you use a different port, it
            must be specified in a property entry 'SocketServerPort 8'.
          </TD>
        </TR>
      </TABLE>
      <BR>
      <P><A name="camera_commands"></A><B>Camera Commands</B></P>
      <TABLE border="1" cols="2">
        <TR>
          <TD colspan="2"><A name="cam_control"></A><B>Camera Control</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SelectCamera #</TD>
          <TD>Makes the given camera be the active camera, where the <b>#</b> is the position
            of the camera in the ActiveCameraList property or Camera setup dialog, numbered
            from 1.&nbsp; Will switch
            in and out of EFTEM mode or STEM mode if appropriate.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RetractCamera</TD>
          <TD>Retracts all retractable cameras</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CameraProperties [#C] [#M]</TD>
          <TD>Reports unbinned size in X and Y, RotationAndFlip property, size of
            detector pixel in microns, and unbinned pixel size, and active camera number of the current camera, or
            of the active camera whose number is given by the optional <b>#C</b>&nbsp; Active
            camera values are numbered from 1.
             The unbinned pixel size is for the current magnification, or for the magnification
             index given by the optional <b>#M</b>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportCameraName #</TD>
          <TD>Reports the name of the active camera <b>#</b> (numbered from 1), or of the current
             camera if <b>#</b> is not positive.&nbsp; <i>reportedValue1</i> is set to NOCAM if
            <b>#</b> is out of range.&nbsp; Command added in 4.1, 7/17/22.  
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetDivideBy2 #</TD>
          <TD>Turns division by 2 for the current camera on or off if <b>#</b> is 1 or 0,
            respectively.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ArePostActionsEnabled</TD>
          <TD>Reports whether post-exposure actions are allowed for the current camera for
            all shots, and for Record shots specifically, and
            sets <I>reportedValue1</I> and <I>reportedValue2</I> to 1 if so, 0 if not.&nbsp; For Falcon
            and DE cameras, post-actions are allowed only when frames are being aligned in
            SerialEM.&nbsp; The values can be assigned to a
            variable after the command.</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">ReportCountScaling</TD>
          <TD>Reports two values of current camera: either the scaling being applied to
            counting/super-resolution mode images returned from a K2 camera, or the
            'CountsPerElectron' property; and whether division by 2 is on.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="acquisition"></A><B>Acquisition Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">V or View</TD>
          <TD>Acquires image with 'View' parameters</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">F or Focus</TD>
          <TD>Acquires image with 'Focus' parameters</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">T or Trial</TD>
          <TD>Acquires image with 'Trial' parameters</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">R or Record</TD>
          <TD>Acquire image with 'Record' parameters</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">L or Preview</TD>
          <TD>Acquires image with 'Preview' parameters</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">M or Montage</TD>
          <TD>Acquires montage</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Search</TD>
          <TD>Acquires image with 'Search' parameters, or with 'View'
            parameters if the option is set to use those for Search.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">PreCookMontage #D [#P] [#C] [#S]</TD>
          <TD>If montaging is enabled with stage movement, lowers the screen to
            expose the specimen, then moves the stage to each piece position and waits there
            for the number of seconds indicated by <b>#D</b>, if the number is positive.&nbsp; If
              <b>#D</b> is negative or <b>#P</b> is entered, it skips pieces within each column, with an interval given by the
              <b>#P</b> or the negative
            of <b>#D</b>: 2 will stop at every second piece, 3 at every third, etc.&nbsp;
            For convenience, 1 is equivalent to a large interval and will make
            it stop only at the bottom and top of each column.&nbsp; Set <b>#C</b> non-zero to skip
              columns partially or 0 not to: in every other column, the stage will be moved
              only to the first and last piece and to any piece that does not have an adjacent
              piece in the columns on both sides.&nbsp; This entry will make no difference if
              you use 1 or a very large number for the skip interval.&nbsp; Set <b>#S</b> with a stage movement speed factor or
              0 for normal speed.&nbsp; If setting a speed factor crashes SerialEM or
              FEI-SEMserver, see notes under <a href="#tiltDuringRecord">TiltDuringRecord</a>.</TD>
        </TR>
                <TR>
          <TD colspan="2"><A name="params"></A><B>Parameter Commands</B></TD>
        </TR>
         <TR>
          <TD colspan="2">The commands in this section report or change values in one of the camera parameter
            sets for the current camera.&nbsp; The <B>set</B> entries can be specified as either V,
            F, T, R, P, S, M or 0, 1, 2, 3,
            4, 5, 6 for View, Focus, Trial,
            Record, Preview, Search, and Mont-Map, respectively.&nbsp; Changed parameters will be restored whenever the
            script ends or stops or when a different camera is selected.&nbsp; However, if
            the script is suspended, any changed parameters will be set again when the script
            resumes.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportExposure set</TD>
          <TD>Reports the exposure time and drift settling for <b>set</b>.&nbsp; Command added in 4.0, 9/28/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetExposure set #E [#D]</TD>
          <TD>Sets exposure and, optionally, drift settling for <B>set</B>&nbsp; to the given values <B>#E</B> and <B>#D</B>.&nbsp;&nbsp; If <B>#D</B> is omitted, the existing
            drift settling will be unchanged.&nbsp;</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportBinning set</TD>
          <TD>Reports the binning for <b>set</b>.&nbsp; Command added in 4.0, 9/28/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetBinning set #B</TD>
          <TD>Sets binning for <B>set</B> to <B>#B</B>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportCameraSetArea set</TD>
          <TD>Reports the (binned) image size in X and Y that would be acquired by <b>set</b>, plus the unbinned left, right, top and bottom coordinates as they are shown in the Camera Setup dialog.&nbsp; Command added in 4.0, 9/28/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetCameraArea set #L #R #T #B<br />
          SetCameraArea set area</TD>
          <TD>Sets the acquisition area for <B>set</B>.&nbsp; Follow the <B>set</B> with
            either 4 numbers <b>#L #R #T #B</b> for the unbinned left, right, top, and bottom coordinates (the
            same kind of numbers as in the camera setup dialog) or with <b>area</b> set to 'F', 'H', 'Q', 'WH' or 'WQ'
            for full, half, quarter, wide half, or wide quarter.&nbsp; Values will be adjusted
            for a legal area.&nbsp; <i>Python:</i> The second argument, <b>#L</b>, is defined as a string argument, 
            so a number must be quoted, or a numeric variable must be converted to string.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetCenteredSize set #B #X #Y</TD>
          <TD>Sets <B>set</B> for acquisition from a centered area.&nbsp; Follow <b>set</b> with 3 numbers: the binning <B>#B</B>, the binned size in X, and the binned
            size in Y.&nbsp; </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetContinuous set #</TD>
          <TD>Sets the acquisition mode for <B>set</B> for continuous if <B>#</B> is non-zero,
            or single-frame if <B>#</B> is 0.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetSTEMDetectors set #D [#D] [#D] ...</TD>
          <TD>Sets the STEM detectors for each available channel of <B>set</B>.&nbsp;
            Follow <B>set</B> with a detector number <B>#D</B> for each channel, numbered
            from 0, or -1 to select no detector for that channel.&nbsp; At least one actual
            detector must be specified.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetProcessing set #P</TD>
          <TD>Sets processing for <B>set</B> to the given value <b>#P</b>, which should be 0 for
            unprocessed, 1 for dark-subtracted, or 2 for gain-normalized.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportReadMode set</TD>
          <TD>Reports the read mode for <b>set</b>: 0 for linear, 1 for counting, 2 for super-resolution.&nbsp; Command added in 4.0, 9/28/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetK2ReadMode set #M&nbsp;</TD>
          <TD>Sets the processing mode for <B>set</B> to the given value.&nbsp; For a K2
          or DE camera, <b>#M</b> should be
            0 for linear, 1 for counting, or 2 for super-resolution mode.&nbsp; For a Falcon
            or K3 camera, <b>#M</b> would be 0 for linear or 1 for counting mode.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetFrameTime set #F</TD>
          <TD>Sets the frame time in <B>set</B> for a K2/K3, Falcon 4 where the
            parameter set will result in saving as EER (even just for aligning), DE, or generic frame-saving camera
             to the given number <B>#F</B>.&nbsp; <I>reportedValue1</I> is set to the actual frame time
            after constraints are applied; for DE, <I>reportedValue2</I> is set to the new exposure 
            time.&nbsp; For a Falcon 4 where the parameter set
            would not result in saving as EER, or a Falcon 3, or a Falcon 2 that can save more than 7 frames,
             the fractions for saving in MRC files are adjusted to give a
            mean fraction time close to <b>#F</b>, and <i>reportedValue1-3</i> are set with the number
            of fractions, mean fraction time, and exposure time.&nbsp; For Falcon 4, the frame time for aligning
            EER frames is also modified as when parameters are set for saving as EER, but not set in <I>reportedValue1</I>.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChangeFrameAndExposure set #F</TD>
          <TD>Changes the frame time and exposure time in <B>set</B> for a K2/K3, Falcon 4 where the
            parameter set will result in saving as EER (even just for aligning), DE, or generic
             frame-saving camera by the given factor <B>#F</B>, maintaining the same number of
            frames.&nbsp; <I>reportedValue1</I> and <I>reportedValue2</I> are set to the actual frame time
            and exposure time after constraints are applied.&nbsp; &nbsp; For a Falcon 4 where the parameter set
            would not result in saving as EER, or a Falcon 3, or a Falcon 2 that can save more than 7 frames, the 
            exposure time is adjusted by the given amount, as closely as possible, and fractions for saving
             in MRC files are adjusted to change the mean fraction time by <b>#F</b>;
            <i>reportedValue1-3</i> are set with the number of fractions, mean fraction time, and exposure 
            time.&nbsp; For Falcon 4, the frame time for aligning
            EER frames is also modified as when parameters are set for saving as EER, but not set 
            in <I>reportedValue1</I>&nbsp; Command added in 3.9, 2/9/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportCurrentPixelSize set</TD>
          <TD>Reports the pixel size for images that would be acquired by <b>set</b> (i.e., with 
            its binning) at the current magnification.&nbsp; Command added in 4.0, 9/28/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetDoseFracParams set #D [#S] [#A] [#M] [#C]&nbsp;</TD>
          <TD>Sets dose fractionation parameters for <B>set</B>; follow with up to 5
            numbers: <B>#D</B> non-zero for dose-fractionation mode on K2/K3; <B>#S</B> non-zero to save frames
            (not just for K2/K3); <B>#A</B> non-zero to align frames; <B>#M</B> 0 to align in DM, 1 to align in
            plugin, or 2 to save a command file for alignframes; <B>#C</B> non-zero to combine
            frames into sums.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RestoreCameraSet [set]</TD>
          <TD>Restores one or all camera parameter set(s) modified with the &#39;Set&#39; commands
            above.&nbsp; If <B>set</B> is omitted, all modified sets will be restored.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">KeepCameraSetChanges [set]</TD>
          <TD>Retains changes in one or all modified camera parameter sets when script ends.&nbsp;
              Use this after making all the changes with the &#39;Set&#39; commands that you wish to
              retain.&nbsp; If <B>set</B> is omitted, all modified sets will be retained.&nbsp; &#39;RestoreCameraSet&#39;
              cannot be used on a set that has been retained.&nbsp; Subsequent changes by the
              &#39;Set&#39; commands will be restored on script end or by &#39;RestoreCameraSet&#39;,&nbsp;
              unless this command is given again. </TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="continuous_mode"></A><B>Continuous Mode Control</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">StopContinuous</TD>
          <TD>Stops continuous acquisition if it is running.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportContinuous</TD>
          <TD>Returns -1 if continuous acquisition is not running, or the camera parameter
            set number being used if it is running, numbered from 0.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">UseContinuousFrames #</TD>
          <TD>If <b>#</b> is non-zero, the script keeps executing commands (such as stage
            movement and alignment) even when the camera is acquiring in continuous mode.&nbsp;
            Use 0 to return to normal operation, in which the script will wait for continuous
            acquisition to be ended by the user.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">WaitForNextFrame [#S] [#A]</TD>
          <TD>After starting a continuous acquisition, this command waits until the
            next image becomes available in buffer A.&nbsp; The program will wait until the exposure
            time has elapsed so that the image is likely to be taken after completion of
            previous operations, unless the command &#39;StartFrameWaitTime -1&#39; is used first.&nbsp; For the next script command, the image will be available
            in buffers A and B, but for commands after that, buffer B should be accessed instead
            because the copy in A may be overwritten with a new continuous frame by then.
            &nbsp; The &#39;UseContinuousFrames 1&#39; command must be used before the
            acquisition is started.&nbsp; If the optional <b>#S</b> is given, that number of frames
            will be aligned with the Framealign module and summed, or averaged if the optional <b>#A</b> is non-zero.&nbsp; Use
            averaging if the sum may exceed 32767 (for signed images) or 65535.&nbsp; Essential frame
            alignment parameters are controlled by <A href ="about_properties.htm#continuousAlign">
              several properties</A>; the default is for alignment
            to a cumulative sum, which is somewhat faster than pairwise alignments and should be adequate
            for high-contrast frames.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">StartFrameWaitTimer [#]</TD>
          <TD>With no optional value <b>#</b>, sets the time from which the next &#39;WaitForNextFrame&#39; will require an exposure
            time to elapse.&nbsp; Without this command, the program will wait the full
            exposure time after the &#39;WaitNextFrameCommand&#39;. If this command is given
            with no value just
            after getting a frame, and operations are done before waiting for the next
            frame, the next frame may be obtained sooner.&nbsp; However, if the command is
            followed by a negative value, then the program will not wait for the exposure
            time to elapse but just return the next distinct frame.&nbsp; Use this command
            with <b>#</b> set to -1 before WaitForNextFrame to get every successive frame if possible,
            such as after starting a continuous tilt.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetLiveSettleFraction #</TD>
          <TD>Sets the fraction of the usual settling time to apply in continuous mode after
            image shift or stage movement.&nbsp; By default, no settling is applied in
            continuous mode (i.e., the fraction is 0), but some settling may be needed when
            a script or other operation is using continuous frames.&nbsp; The fraction is
            reset to zero when continuous mode ends.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="framesaving_alignment"></A><B>Frame Saving and Alignment</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportNumFramesSaved</TD>
          <TD>Reports the number of frames saved, or being saved, in the last acquisition
            that saved frames.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportFrameAliParams</TD>
          <TD>Reports six values for the frame alignment parameter set selected to be used
            for Record images: the binning or target size for alignment, whether to keep precision for
            gain-normalized images when doing early returns or GPU frame alignment, the strategy (0 to 3,
            corresponding to the radio buttons in the Frame Alignment dialog), the number of
            frames to align all pairs among, the number of iterations to refine (negative if
            refinement off), and the group size (negative if using groups is off).</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetFrameAliParams #B [#K]<br />
&nbsp;&nbsp;&nbsp; [#S] [#A] [#R] [#G]</TD>
          <TD>In the frame alignment parameter set selected to be used for Record images,
            sets the binning to <b>#B</b> if <b>#B</b> is 1-16 or the target size to <b>#B</b> otherwise, and optionally sets whether to keep precision during
            early returns or GPU frame alignment if <b>#K</b> is 1, the strategy from
            <b>#S</b> (0, 1, or 2 for pairwise alignment using specified, half, or
            all frames; 3 for cumulative alignment), the number of frames for all pairs
            from <b>#A</b>, the number of refinement iterations from the absolute value
            of <b>#R</b> and to do refinement if <b>#R</b>
            is positive, and the group size from absolute value of <b>#G</b> and the whether to use groups if <b>#G</b> is
            positive.&nbsp; </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportFrameAli2</TD>
          <TD>Reports more values for frame alignment: whether GPU use is selected, and for
            the Record parameter set: truncation limit (negative if truncation is off),
            whether to use hybrid shifts, and the three filter radii.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetFrameAli2 #G [#T] [#H]<br />
&nbsp;&nbsp;&nbsp; [#R1] [#R2] [#R3]</TD>
          <TD>Sets whether to use GPU for frame alignment (<b>#G</b> 0 or 1) and, in the frame alignment
            parameters for Record, optionally sets truncation limit from the
            absolute value of <b>#T</b> and to truncate
            if <b>#T</b> is positive, whether to use hybrid shifts if <b>#H</b> is 1, primary filter radius
            from <b>#R1</b>, and second and third filter radii from <b>#R2</b> and <b>#R3</b> or 0 for either if <b>#R1</b>
            is present and <b>#R2</b> or <b>#R3</b> is not.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SkipFrameAliParamCheck [#]</TD>
          <TD>Disables the checking of whether the selected frame alignment parameter set
            fits the constraints for use selected in the Frame Alignment dialog.&nbsp; This
            can be used when modifying frame alignment parameters or Record parameters to
            avoid an annoying message before every shot.&nbsp; The optional value of 0 can
            be supplied to re-enable the checking. </TD>
        </TR>
                <TR>
          <TD class="scriptcommand">EarlyReturnNextShot #N [#D] [#S]</TD>
          <TD>Returns as early as possible from the next acquisition, which must involve
            either aligning or saving dose-fractionation frames from a K2/K3 camera.&nbsp; Follow with the number
            of frames <b>#N</b> to be summed in the returned image, 0 to return without any summed
            image, or -1 to return with the full sum.&nbsp; The optional <b>#D</b> should be 1 to make a deferred
            full sum when not aligning in the plugin; this sum is always made when aligning in the plugin
            for an ordinary acquisition.&nbsp; If the optional <b>#S</b> is non-zero, the plugin will <i>not</i> 
            stack frames, which is done by default in order to allow another single-shot image to be taken as 
            soon as possible; this
            stacking takes extra time and delays the ability to take another dose-fractionation image.&nbsp; However,
            stacking is always done, and <b>#S</b> thus has no effect, if the property 'EarlyReturnUseSaveThread'
             is set.&nbsp; Single-shot and dose-fractionation images can be
            requested without delay in the script.&nbsp; The single-shot images will be taken
            as soon as possible (after the
            frame stack has been accessed), do not enter <b>#S</b> if the next image will be a single-shot.&nbsp; Another
            dose-fractionation shot will be delayed until saving is finished for the current
            shot, so do use <b>#S</b> when doing a series of frame-saving shots.&nbsp; When a frame
             tilt series is to be taken, a non-zero value of
            <b>#D</b> triggers the making of separate deferred sums for each tilt angle.&nbsp;
            In this case, the Record parameters can specify just saving, just aligning, or
            both operations.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">GetDeferredSum</TD>
          <TD>Acquires the deferred full sum that was saved as a result of
            'EarlyReturnNextShot', or the next deferred tilt sum available from a frame tilt
            series.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetFolderForFrames dir</TD>
          <TD>Sets the folder for saving frames from the current camera to <b>dir</b>.&nbsp; A simple
            directory name without path separators is required for DE cameras and Thermo/FEI cameras run with
             Advanced Scripting.&nbsp; For other cameras, an absolute path is required,
             either a network path starting with two slashes or one starting with a drive
            letter.&nbsp; Command added in 3.9, 9/12/20.
          </TD>
        </TR>
                <TR>
          <TD class="scriptcommand">FrameThresholdNextShot #T [#S] [#E] [#D]</TD>
          <TD>Skips saving frames whose mean value is below the given threshold <b>#T</b> in the next
            shot&nbsp; from a K2/K3 camera.&nbsp; The mean value used for comparison with
            the threshold will be the value that the frame would have after saving, thus
            a scaled electron count value when taking normalized frames or actual electron
            counts otherwise (even if aligning also).&nbsp; The first and last frame will be saved
            regardless.&nbsp; The plugin will write a list of frames actually saved,
            numbered from 0, named as the root of the frame stack name and &#39;_saved.txt&#39;.
            &nbsp; The SEMCCD plugin must be dated
            12/18/19 or later.&nbsp; If a command file is being saved for aligning in IMOD,
             and this command includes the optional <b>#S</b> and <b>#E</b>, these values will be used for the entry
            to the PartialFrameThreshold option to Alignframes, which takes thresholds for skipping
            the frames at the start and end of a tilt.&nbsp These relative thresholds are
            between 0 and 1, where 0 sets no threshold.&nbsp If <b>#E</b> is omitted,
            <b>#S</b> will be used
            for both values.&nbsp If the optional <b>#D</b> is added, the frame threshold will be
            adjusted dynamically on each tilt angle after the first to this fraction of the mean or
            median value of the frames above threshold on the nearest previous tilt angle.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">QueueFrameTiltSeries #S #I #N [#D] [#O] [#W] [#F] [#X #Y]</TD>
          <TD>Sets up a tilt series with discrete tilts and other uniform changes to occur
            during the next shot, provided frames are saved.&nbsp; Follow with starting
            angle (<b>#S</b>), increment (<b>#I</b>) and number of tilt steps (<b>#N</b>), plus optional entries
            <b>#D</b> for the initial delay before starting the starts, <b>#O</b> for the time the beam
            should be unblanked, <b>#W</b> for time to wait between tilting and unblanking, <b>#F</b> for
            a change in focus per step, <b>#X</b> and <b>#Y</b> for a change in image shift values for
            each step.&nbsp; Image shift values are in microns in &#39;specimen&#39; coordinates,
            i.e. with the X axis along the tilt axis, and they will be converted to image
            shift units at the Record magnification if in Low Dose mode, or at the current
            magnification if not.&nbsp; All times are in seconds.&nbsp; A frame stack mdoc file
            with tilt angle and dose information is written by the SEMCCD plugin regardless of
             whether the option for one is turned on.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">FrameSeriesFromVar var #F [#D] [#P]</TD>
          <TD>Sets up a tilt series with all steps specified in the given array variable var,
            which should contain 1 to 6 values per step of the series, with the values for
            one step followed by those for the next step, etc.&nbsp; <b>#F</b> is the sum of 1 if
            there are tilt angles, 2 if there are shutter open times, 4 if there are&nbsp;
            wait times or intervals between steps, 8 if there are changes in defocus from
            the current value, 16 if there are image shift changes from the current
            value, and 32 if there are beam shift changes from the current value.&nbsp; For image shift,
             there should be values for X and Y in microns in
            &#39;specimen&#39; coordinates, i.e. with the X axis along the tilt axis.&nbsp; The
            shifts will be converted to image shift units at the Record magnification if in
            Low Dose mode, or at the current magnification if not.&nbsp; For beam shift, the values would be the
            changes in raw X and Y beam shift units.&nbsp; The values must be
            present in the order just listed.&nbsp; If there are tilt angles, then the third
            possible value in the array, wait times or intervals, is a delay between the end of the tilt and the 
            opening of the shutter, if any.&nbsp; If there are no tilt angles because
            continuous tilt is being used, then this item sets the total interval between
            steps of the series.&nbsp; In this continuous tilt case, and when there are shutter times, the
            optional <b>#P</b> sets a post-image shift delay before opening the shutter.&nbsp; <b>#D</b> is
             an optional initial delay before the first
            step.&nbsp; All times are in seconds.&nbsp; If there are discrete tilts, a frame
             stack mdoc file with tilt angle and dose information is written.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetFrameSeriesParams #B [#S] [#X #Y] [#G] [#D]</TD>
          <TD>Sets optional parameters for frame tilt series.&nbsp; Set <b>#B</b> non-zero to use
              backlash for all tilt steps not in the same direction as the first one, 0
              otherwise.  Set optional entries: <b>#S</b> with a tilting speed factor or 0 for normal speed;
            <b>#X </b>and <b>#Y</b>
              for X and Y stage coordinates to restore after the tilt, or values greater than 9000 for no
              stage restoration if further entries follow; <b>#G</b> for the minimum gap between
            frames above threshold for recognizing a new tilt angle when specifying a
            dynamic threshold with
            'FrameThresholdNextShot' or getting back deferred tilt sums with 'EarlyReturnNextShot';
            and <b>#D</b> for the number of initial frames to drop when getting simple
            deferred tilt sums.&nbsp; The default gap size is 2 frames below threshold and this value should be
            entered when dropping frames unless a different gap is desired.&nbsp; The default is not
            to drop any frames from simple sums; frames are never dropped when getting aligned sums.&nbsp;
            For CryoARM, speed factors of 100 - 105 will select pre-set speeds
              of 10, 2, 1, 0.5, 0.25, and 0.1 degrees/sec.&nbsp; If setting a speed factor crashes SerialEM or
              FEI-SEMserver, see notes under <a href="#tiltDuringRecord">TiltDuringRecord</a>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">WriteFrameSeriesAngles file</TD>
          <TD>Writes the actual tilt angles from the last frame tilt series to the given
            <b>file</b>, one per line.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportFrameTiltSum</TD>
          <TD>Reports: 0 if there is a tilt sum or 1 of there is not, the tilt angle or 0 if
             there is no tilt sum, the tilt index (numbered from 0), the number of frames in
            the sum, and the starting and ending frame
            number after getting a deferred tilt sum from a frame tilt series.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ModifyFrameTSShifts #I #X #Y</TD>
          <TD>Changes the image shift values to be imposed for each future step in the same
            tilt direction after aligning a deferred sum from a frame tilt series to the one
            at the adjacent previous tilt angle.&nbsp; <b>#I</b> specifies the
            tilt index obtained from 'ReportTiltSumProperties', and <b>#X</b> and
            <b>#Y</b> are relative image shift values needed to align this tilt sum with the
            previous one with a command such as
            'AlignTo B 1' that aligns without imposing an image shift.  There are two ways to get
            these values: 1) Use 'ReportISforBufferShift' then 'ClearAlignment 1' to remove the alignment
            shifts from the image each time, and use the values from 'ReportISforBufferShift' directly; or
            2) Keep track of the last IS values from 'ReportISforBufferShift', subtract them each time
            from the new IS values, and use those differences for <b>#X</b> and <b>#Y</b>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReplaceFrameTSShifts varX varY</TD>
          <TD>Changes the entire array of image shift values to be imposed in a frame tilt
            series with a new set of values (i.e., refined predictions) in the two array
            variables given by <b>varX</b> and <b>varY</b>.&nbsp; As of SerialEM 3.8.8, these shifts
            should be in 'specimen' coordinates just like the original shifts.&nbsp; Both
            arrays must have the same size as the original number of tilt angles.&nbsp;
            Untested</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReplaceFrameTSFocus var</TD>
          <TD>Changes the entire array of focus values to be imposed in a frame tilt series
            with a new set of values (i.e., refined predictions) in the array variable
            <b>var</b>,which must have the same size as the original number of
            tilt angles.&nbsp; Untested.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AlignWholeTSOnly [#]</TD>
          <TD>Allows a whole tilt series taken from a K2/K3, Falcon, or DE camera through the script to be
            aligned with one command file in IMOD, just as when using the tilt series
            controller.&nbsp; Specifically, no command files will be written for individual
            Record images taken after the command is given, and a single command file to
            align all frame stacks in the series is written at the end with the
            &#39;WriteComForTSAlign&#39; command.&nbsp; The command has no effect unless frame
            alignment in IMOD is selected in the Record parameter set and &#39;Align only whole
            tilt series&#39; is selected in the Frame Alignment Parameters dialog.&nbsp; If
            these conditions are satisfied, there must already be a current image file with
            an associated .mdoc file.&nbsp; The optional <b>#</b> can be 0 to turn this mode of
            operation off.&nbsp; Sets <I>reportedValue1</I> to 1 or 0 depending on whether this
            operating mode was switched to or not.</TD>
        </TR>

        <TR>
          <TD colspan="2"><A name="hwspecific_camera"></A><B>Hardware Specific Camera Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportK2FileParams</TD>
          <TD>Reports values selected in the Frame File Options dialog: 0 for MRC, 1 for
            TIFF LZW, or 2 for TIFF ZIP; sum of 1 to pack unnormalized data at all, plus 2
            to pack counting mode to bytes; 1 to save MRC files in 4-bit mode 101; 1 to save
            normalized data times 100; 1 to skip rotation and flip of frames; 1 for one file
            per frame. </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetK2FileParams #T [#P] [#M] [#N] [#R] [#O]</TD>
          <TD>Sets values to control K2/K3 frame file saving.&nbsp; Follow with up to 6 values:
            <b>#T</b> 0 for MRC, 1 for TIFF LZW, or 2 for TIFF ZIP; <b>#P</b> as the sum of 1 to pack
            unnormalized data at all, plus 2 to pack counting mode to bytes; <b>#M</b> non-zero to
            save MRC files in 4-bit mode 101; <b>#N</b> non-zero to save normalized data times 100;
            <b>#R</b> non-zero to skip rotation and flip of frames; <b>#O</b> non-zero for one file per
            frame.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportK3CDSmode</TD>
          <TD>Reports 1 if CDS mode is on for a K3 camera acquisitions, 0 if not.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetK3CDSmode #O [#P]</TD>
          <TD>Sets the CDS mode option for K3 camera acquisitions on if <b>#O</b> is non-zero, off
            otherwise.&nbsp; The existing value is restored at the end of the script unless
            <b>#P</b> as entered with a non-zero value to make it permanent.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">DeferStackingNextShot</TD>
          <TD>Disables stacking Falcon intermediate frames after the next exposure.&nbsp; To
            stack frames from multiple exposures into one stack, use this command before
            each exposure except the last one.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OpenDECameraCover</TD>
          <TD>Opens the protection cover of the Direct Electron camera for the remainder of
            the script, if it is the current camera.&nbsp; Without this command, the cover
            will be opened and closed for each exposure except during tasks.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetDECamFrameRate #</TD>
          <TD>Sets the frame rate of the current camera if it is a DE camera; follow with
            the new rate in frames per second, which must be positive and less than the
            maximum frame rate.&nbsp; The user&#39;s original frame rate is placed into
            <I>reportedValue1</I> and is restored when the script ends.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">NewDEserverDarkRef #P #H</TD>
          <TD>Acquires a dark reference in the DE server if the known interval since the
            last reference for processing mode <b>#P</b> is longer than <b>#H</b> in hours. <b>#P</b> must be 0
            for linear mode, 1 for counting mode, or -1 for the mode selected in the current Record parameters.&nbsp; Parameters for the reference are
            those specified in the <a href="hidd_de_reference.htm">Direct Electron Server
            Reference Maker Dialog</a> for the given mode, except that with -1, the hardware binning and ROI will be
            those in the Current Record parameters.&nbsp; If <b>#H</b> is 0, the reference
            is done unconditionally; if <b>#H</b> is negative (-1), the command simply records the
            current time as the time of the last reference.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">UpdateHWDarkRef #</TD>
          <TD>Updates the K2 hardware dark reference if the known interval since the last
            update is longer than <b>#</b> in hours.&nbsp; If <b>#</b> is 0, the update is done
            unconditionally; if <b>#</b> is negative (-1), it simply records the current time as
            the time of the last update.&nbsp; In order for the time interval to be kept
            track of between runs of the program, the property IgnoreShortTermCals must not
            be set.  This command is available on a K3 with GMS 3.31 or higher.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="other_camera"></A><B>Other Camera Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OppositeFocus</TD>
          <TD>In low dose mode, acquires Focus image from area on opposite side of Record from
            the defined&nbsp;Focus area.&nbsp; Opposite areas are not available if Balance
            Shifts is turned on.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OppositeTrial</TD>
          <TD>In low dose mode, acquires Trial image from area on opposite side of Record
            from the&nbsp;defined&nbsp;Trial area.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AcquireToMatchBuffer buf</TD>
          <TD>Acquires an image whose size matches that of the image in the given buffer, with
             camera parameters matching those used to acquire that image.&nbsp; The image will
             be cropped after acquisition if necessary.&nbsp; The camera parameters will be based
             on the parameter set used for buffer's image, with the exposure time and binning taken
            from values stored in the buffer.&nbsp; In Low Dose mode, the image will be acquire from the
            corresponding Low Dose area.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">StepFocusNextShot # # [# #]</TD>
          <TD>Does one or two focus changes during the next exposure.&nbsp; Follow with 2 or 4
            numbers: the time in seconds from start of the exposure to the first focus
            change, the first focus change in microns, the time from start of the exposure
            to the second focus change if any, and the second focus change relative to the
            starting focus, not relative to the focus after the first change.&nbsp; The
            command will have no effect if the exposure time is less than the time to the&nbsp;
            first change, and the second change will not be done if the time for it is
            greater than the exposure time. This command is enabled for Gatan, Falcon, and
            Tietz cameras.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SmoothFocusNextShot # #</TD>
          <TD>Changes focus linearly through next exposure.&nbsp; Follow with 2 numbers, the
            starting and ending defocus relative to the current focus.&nbsp; This command
            is enabled for Gatan, Falcon, and Tietz cameras.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RecordAndTiltUp [#R] [#X #Y]</TD>
          <TD>Starts a Record acquisition and tilts the stage up by the current increment
            after the exposure is expected to be done.&nbsp; Post-exposure actions must be
            allowed for the current camera, at least for current Record parameters, but need
            not be not enabled by the user in the Camera menu.&nbsp; If optional <b>#R</b> is
              non-zero, then the program will restore the stage X and Y positions after
              tilting, either to the position before starting or to <b>#X</b>, <b>#Y</b> if they are
              entered.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RecordAndTiltDown [#R] [#X #Y]</TD>
          <TD>Like 'RecordAndTiltUp', but tilts the stage down by the current increment.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RecordAndTiltTo #T [#B] [#R] [#X #Y]</TD>
          <TD>Like 'RecordAndTiltUp', but tilts the stage to the given angle <b>#T</b>.&nbsp; If an
            optional non-zero backlash is entered in <b>#B</b>, the stage will tilt first to <b>#T</b> +/- <b>#B</b>, then
            back to <b>#T</b>. Prior to 5/23/19, <b>#T</b> + <b>#B</b> was used and the sign of <b>#B</b> had to be set
            to correct the backlash for the desired direction; after then, the program sets
            the sign properly and a positive value can always be entered. </TD>
        </TR>

        <TR>
          <TD class="scriptcommand"><a name="tiltDuringRecord">TiltDuringRecord #A #D [#S]</a></TD>
          <TD>Starts a Record acquisition and starts the stage tilting to angle <b>#A</b> after the
            delay <b>#D</b> in milliseconds.&nbsp; On Thermo/FEI scopes with recent enough versions of Thermo/FEI
            scripting, or JEOL scopes with recent versions of TemExt.dll, <b>#S</b> can be added with a speed multiplier (&lt; 1 for slower, &gt; 1 for
            faster).&nbsp; For CryoARM, speed factors of 100 - 105 will select pre-set speeds
              of 10, 2, 1, 0.5, 0.25, and 0.1 degrees/sec.&nbsp; On Hitachi scopes, the speed factor is relative to the
            tilt speed that can be set with the property HitachiTiltSpeed.&nbsp; With the default of speed of 100, the factor can range
            from 0.4 to 1.27, and the tilt speed in degrees per second is approximately 1.65 times the factor to the 1.85 
            power.&nbsp; On Thermo/FEI scopes this command will freeze the user
            interface and prevent scope updates while the stage is tilting.  If the command
              crashes SerialEM or FEI-SEMserver with
              a speed multiplier but runs OK without one, it means
              that the Thermo/FEI scripting version is too old to support the speed command.  In that case,
              define an environment variable SEM_USE_TOMMONIKER with the value of 1 on the
              microscope computer to use an alternate interface.
          </TD>
        </TR>

        <TR>
          <TD class="scriptcommand">SetDoseAdjustmentFactor #</TD>
          <TD>Sets a factor for adjusting the exposure dose and frame doses stored in an
            .mdoc file for an image.&nbsp; Set to 0 to eliminate the adjustment; the
            factor will be reset to 0 when the script ends.&nbsp; Command added in 3.9,
            2/12/21.</TD>
        </TR>

        <TR>
          <TD class="scriptcommand">RunGatanScript var [#T]</TD>
          <TD>Run a script in DigitalMicrograph contained in an array of strings in variable 
            <b>var</b>, with an optional timeout in seconds specified in <b>#T</b>.&nbsp; The
            Exit value from the script is placed in <i>reportedValue1</i>.&nbsp; This operation
            is run on a separate thread like other camera operations.&nbsp; If
            there is no timeout, the STOP button will stop the script by killing its thread; if there
            is a timeout, STOP will not kill the script, similar to image acquisitions.&nbsp; The array
            can be created with the 'ReadStringsFromFile' command, or array of up to 
            ~55 quoted strings can be defined in one statement, or a longer script can be stored in an array 
            one line at time with 'AppendToArray'.&nbsp; In the latter two cases, you will need to use
            the 'ParseQuotedStrings' command and enclose each line of the DM script in single quotes.&nbsp; Command added in 4.0, 1/22/12.
          </TD>
        </TR>

        <TR>
          <TD class="scriptcommand">GetSTEMBrightContrast name</TD>
          <TD>Reports the brightness and contrast for the STEM detector with the given <b>name</b>,
            where this is the name in the user interface (the 'ChannelName', not the 'DetectorName',
            in SerialEMproperties.txt.)&nbsp; This command only works for Thermo/FEI STEM, and 
            STEM must be the currently selected camera.&nbsp; Command added in 4.1, 10-Jan-23.
          </TD>
        </TR>

        <TR>
          <TD class="scriptcommand">SetSTEMBrightContrast #B #C name</TD>
          <TD>Sets the brightness to <B>#B</B> and the contrast to <b>#C</b> for the STEM detector with
             the given <b>name</b>; use '-1.e9' for a value to leave it unchanged and just set the other
            value.&nbsp; This command only works for Thermo/FEI STEM, and 
            STEM must be the currently selected camera.&nbsp; Command added in 4.1, 10-Jan-23.</TD>
        </TR>

        <TR>
          <TD class="scriptcommand">SetRedoMontageXCorrs #</TD>
          <TD>Turns the option in the Camera - Correlation Filter submenu to redo montage 
            cross-correlations instead of using previous ones from the .mdoc file on or off if 
            <b>#</b> is non-zero or zero, respectively.&nbsp; Command added in 4.1, 02-Mar-23</TD>
        </TR>
     </TABLE>
      <BR>
      <P><A name="buffer_file_commands"></A><B>Buffer and File Commands</B></P>
    <P>In all commands including a buffer to operate on, the buffer can be specified
      with either the buffer letter or the corresponding number, where A corresponds
      to 1.</P>
      <TABLE border="1" cols="2">
        <TR>
          <TD colspan="2"><A name="buffer_image"></A><B>Buffer and Image Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Copy buf1 buf2</TD>
          <TD>Copies from <b>buf1</b> to <b>buf2</b> (e.g., Copy C A), where <b>buf1</b> can be in the FFT window.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Show buf</TD>
          <TD>Displays the given buffer (e.g., Show C)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportCurrentBuffer</TD>
          <TD>Returns the letter of the buffer currently open in the main window in <i>reportedValue1</i>
          and 0 or 1 in <i>reportedValue2</i> indicating if the buffer contains an image or not. FFT windows
          or image windows other than the main window are ignored. Command added in 3.9, 7/8/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportActiveViewTitle</TD>
          <TD>Reports the title of the currently active window (view), which is "Main Window"
             for the main window. Command added in 4.0, 1/20/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetActiveViewByTitle name</TD>
          <TD>Makes the window whose title matches <b>name</b> the active window, which is useful for
            making sure that a snapshot is of the intended window.&nbsp; Sets <i>reportedValue1</i> 
            to 0 if a window is found with that title, 1 if not.  Command added in 4.0, 1/20/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ImageProperties [buf]</TD>
          <TD>Reports size in X and Y, binning, exposure, pixel size, and parameter set
            used&nbsp;for the image in buffer A or in the buffer indicated by <b>buf</b>,
            which can be in the FFT window.&nbsp; It also sets the variable <i>imageTickTime</i>
            with the time that the image finished being acquired,
            in seconds since the program started.
            &nbsp; Values can be assigned to variables after the buffer letter.&nbsp; Command added in 4.1, 4/1/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ImageMarkerPosition buf</TD>
          <TD>Reports the coordinates of the green marker point in the image in buffer <b>buf</b>, where
            <B>buf</B> can be 0 or -1 to select the active image buffer.&nbsp; Reports -1, -1 if there
            is no marker point set.&nbsp; Values can be assigned to variables after the buffer 
            letter.&nbsp; Command added in 4.1, 10/31/22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ImageConditions buf</TD>
          <TD>Reports the electron dose and the magnification for the image in buffer <b>buf</b>; other items will be added upon request.&nbsp;</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ImageMetadataToVar buf var</TD>
          <TD>For the image in buffer <b>buf</b>, saves the metadata text that would be output 
            to an '.mdoc' file into the variable <b>var</b>, which will contain an array of 
            strings.&nbsp; <B>buf</B> may be in the FFT window.&nbsp; The section header in the 
            first line will be '[ImageMetadata = #]', where '#' is the buffer number (positive
             for a regular buffer and negative for an FFT buffer).&nbsp; Command added in 4.0, 9/3/21.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportMetadataValues buf key</TD>
          <TD>Reports the values that would occur for the given <b>key</b> in an .mdoc file
             if the image in <b>buf</b> were saved to file.&nbsp The value string will be broken 
            into individual strings at the spaces and assigned to up to <i>reportedValues</i> as 
            well as to variables at the end of the command.&nbsp Command added in 4.1, 13-Apr-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportMetadataString buf key</TD>
          <TD>Like 'ReportMetadataValues', but simply assigns to the value string to <i>reportedValue1</i>
            and, optionally, to an optional variable an the end of the command.&nbsp; If the string is a set
            of numbers, it can then be assigned to an array variable.&nbsp; Command added in 4.1, 13-Apr-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ImageLowDoseSet [buf]</TD>
          <TD>Reports the parameter set that an image was taken with and whether it was taken
            in Low Dose mode, for the image in buffer A or in the buffer indicated by <b>buf</b>.&nbsp;
            For one of the 5 standard parameter sets, it will report the set name.&nbsp; For
            a montage image, it will report Record.&nbsp; For a tracking image, it will
            report View if the mag matches that of View in Low Dose; if the mag matches
            Record in Low Dose, it will report Record or Preview depending on which has an
            closest exposure time closest to that of the image.
            &nbsp; Values can be assigned to variables after a buffer letter/number.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportMeanCounts [buf] [#]</TD>
          <TD>Reports the mean counts of the A buffer, or of the buffer indicated by <b>buf</b>;
            add a 1 as <b>#</b> to get unbinned counts per second instead, or add a 2 as <b>#</b> to get
            a report of mean, standard deviation, minimum and maximum.&nbsp; No optional
            assignment to variables.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ElectronStats [buf]</TD>
          <TD>Reports the min, max, mean, and SD of the A buffer, or of the buffer indicated
            by <b>buf</b>, scaled to electrons, and also reports the electrons per unbinned pixel
            per second.&nbsp; The camera must have a defined counts per electron.  Values
            recorded in electron counting mode will be linearized if possible
            (corrected for decreasing counting efficiency at higher dose rates).
            &nbsp; Values can be assigned to variables after a buffer letter/number.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RawElectronStats [buf]</TD>
          <TD>Reports the same items as 'ElectronStats' without linearizing them for loss in
          counting mode.&nbsp; Values can be assigned to variables after a buffer letter/number.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CalibrateElectronDose</TD>
          <TD>Calibrates electron dose with the image in buffer A without popping up any 
            message boxes, but generates an error if any of the preconditions for 
            calibrating dose are not met.&nbsp; Command added in 4.0, 11/6/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SubareaMean #X0 #X1 #Y0 #Y1</TD>
          <TD>Reports the mean counts in a subarea of the A buffer from <b>#X0</b> to <b>#X1</b> in X and from
            <b>#Y0</b> to <b>#Y1</b> in Y. Coordinates are numbered from 0 to size - 1 in each dimension
            and 0 in Y is at the top.&nbsp; Value can be assigned to variable at end of command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CircularSubareaMean #X #Y #R</TD>
          <TD>Reports the mean counts in a circular subarea of the A buffer defined by center point
            <b>#X</b>,<b>#Y</b> and radius <b>#R</b>. Value can be assigned to variable at end of command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">QuadrantMeans [#N] [#F1] [#F2]</TD>
          <TD>Reports means of strips along quadrant boundaries. Optional entries are <b>#N</b> for
            the number of pixels between strip and boundary (default 2), <b>#F1</b> for the strip
            width as a fraction of quadrant extent (default 0.1), and <b>#F2</b> for the fraction
            of quadrant extent to trim off the length of the strip (default 0.1). Output is
            labeled by quadrant number (1 to 4) and 'h' for horizontal strips or 'v' for
            vertical strips.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="image_process"></A><B>Image Processing Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CropImage buf #X0 #X1 #Y0 #Y1</TD>
          <TD>Crops out a subarea of the given buffer, which can be in the FFT window, from
            <b>#X0</b> to <b>#X1</b> in X and from <b>#Y0</b> to <b>#Y1</b> in
            Y (inclusive). The size in X is rounded down to be even if necessary.
            Coordinates are numbered from 0 to size - 1 in each dimension and 0 in Y is
            at the top.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CropCenterToSize buf #X #Y</TD>
          <TD>Crops out a centered subarea of size <b>#X</b> by <b>#Y</b> from the given buffer,
             which can be in the FFT window.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReduceImage buf #</TD>
          <TD>Reduces the image in the given buffer by the factor <b>#</b>, which must be greater
            than 1 but need not be an integer.&nbsp; <B>buf</B> may be in the FFT window.&nbsp; Antialiased
             reduction (with a Lanczos 2 filter) is used instead of binning.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Rotate90CW buf</TD>
          <TD>Rotates the image in the given buffer by 90 degrees clockwise. The result is placed into buffer A.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Rotate90CCW buf</TD>
          <TD>Rotates the image in the given buffer by 90 degrees counterclockwise. The result is placed into buffer A.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">FFT buf [#B]</TD>
          <TD>Takes the FFT of the image in the given buffer, optionally applying the
            binning given in <b>#B</b>.&nbsp; The FFT will appear in buffer A, or in the
            side-by-side FFT window if that option is on.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">FilterImage buf sig1 rad1 rad2 sig2 [obuf]</TD>
          <TD>Applies a filter in Fourier space to the image in the given buffer, which can be in the FFT
            window.&nbsp; The filter is
            the product of two separate filters, one controlled by <B>sig1</B> (sigma1) and the other
            by <B>rad2</B> (radius2) and <B>sig2</B> (sigma2).&nbsp; Sigma1 provides low-frequency filtering
            with an inverted Gaussian rising from 0 to 1 with that sigma, and starting at either 0 frequency or
            the frequency specified by |<B>rad1</B>| (radius1) if it is negative.&nbsp; Radius2 and sigma2 provide
            high-frequency filtering with a Gaussian that falls past radius2 with that sigma.&nbsp;
            If radius1 is positive, a Gaussian with the same sigma falls off to the left of radius1.&nbsp;
            If sigma1 is negative, it provides a band-pass filter peaking at 1.414 * |sigma1|.&nbsp; See
            Filterplot in IMOD for a complete description and ability to graph any filter.&nbsp;
            The units are reciprocal pixels (0 to 0.5 along an axis).&nbsp; The floating point output is
            placed into buffer A, and top buffers are rolled, unless the optional <b>obuf</b>
            is added specifying a different buffer, which can be <b>buf</b>.&nbsp; Command added in 3.9, 9/12/20.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AddImages buf1 buf2 [obuf]</TD>
          <TD>Adds the two images in buffers <b>buf1</b> and <b>buf2</b>&nbsp; The floating point output is
            placed into buffer A, and top buffers are rolled, unless the optional <b>obuf</b>
            is added specifying a different buffer, which can be <b>buf1</b> or <b>buf2</b>.&nbsp; Command
            added in 3.9, 11/11/20.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SubtractImages buf1 buf2 [obuf]</TD>
          <TD>Like 'AddImages', except that <b>buf2</b> is subtracted from <b>buf1</b>.&nbsp;Command
            added in 3.9, 11/11/20.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MultiplyImages buf1 buf2 [obuf]</TD>
          <TD>Like 'AddImages', except that <b>buf2</b> is multiplied by <b>buf1</b>&nbsp;Command
            added in 3.9, 11/11/20.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">DivideImages buf1 buf2 [obuf]</TD>
          <TD>Like 'AddImages', except that <b>buf1</b> is divided by <b>buf2</b>, with 0 in the
            output at pixels where <b>buf2</b> is zero.&nbsp;Command added in 3.9, 11/11/20.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ScaleImage buf #S #A [obuf] [#K]</TD>
          <TD>Scales the image in buffer <b>buf</b> by multiplying by <b>#S</b> then adding
            <b>#A</b>.&nbsp; <B>buf</B> may be in the FFT window.&nbsp; The output is
            placed into buffer A, and top buffers are rolled, unless the optional <b>obuf</b>
            is added specifying a different buffer, which can be <b>buf</b> unless that is in
             the FFT window.&nbsp; The resulting image
            is floating point unless the optional <b>#K</b> is non-zero to keep the existing image
            type.&nbsp; Command added in 3.9, 11/11/20.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ComputeIceThickness buf1 buf2 [obuf] [#C]</TD>
          <TD>Computes an ice thickness image from an unfiltered image (U) in <b>buf1</b> and an energy-filtered
            image (F) in <b>buf2</b>, using the equation C * ln( U / F ).&nbsp; The coefficient is
             taken from the property 'ThicknessCoefficient', or from the optional entry [#C], but it must
            be available one way or the other.&nbsp; The floating point output is
            placed into buffer A, and top buffers are rolled, unless the optional <b>obuf</b>
            is added specifying a different buffer, which can be <b>buf1</b> or <b>buf2</b>.&nbsp; A shift 
            between the images is taken into account, with non-overlapping areas filled with 0; thus, images 
            can be aligned with each other.&nbsp; Command added in 4.1, 10/26/22.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">ConvertToBytes buf [#L #H]</TD>
          <TD>Converts the image in buffer <b>buf</b> from float or integer to bytes, applying the scaling
             in the current display by default, with values between the 'Black' and 'White' levels scaled 
            from 0 to 255, values less than 'Black' truncated at 0, and values above 'White' truncated
            at 255. &nbsp;The optional <b>#L</b> and <b>#H</b> can be used to specify the scaling, with <b>#L</b>
            mapped to 0 and <b>#H</b> mapped to 255.&nbsp; <B>buf</B> may be in the FFT window.&nbsp; Command added in 4.0, 2/7/22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">PasteImagesTogether buf1 buf2 buf3 [#V]</TD>
          <TD>Creates a byte image in buffer <b>buf3</b> with the image in <b>buf1</b> on the left
             and the image in buffer <b>buf2</b> on the right, or with <b>buf1</b> on the top and
            <b>buf2</b> on the bottom if the optional <b>#V</b> is nonzero.&nbsp; <B>buf1</B> and
             <b>buf2</b> may be in the FFT window but <b>buf3</b> may not.&nbsp; Scaling to bytes is based on the 
            Black and White limits in the current display; if you want a different scaling, use
             'ConvertToBytes' first.&nbsp; Command added in 4.0, 2/7/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ScaledSpectrum buf #S</TD>
          <TD>Takes the FFT of the image in buffer <b>buf</b> after padding it to be square, reduces it 
            with antialiasing to the size given by <b>#S</b>, and scales it to bytes using the standard
            FFT scaling specifications set with Set Truncation in the Image Display control panel. &nbsp;<b>#S</b> must
             be no larger than the biggest dimension of the image, but can be 0 to specify no 
            reduction.&nbsp; The result is placed into buffer A.&nbsp; Command added in 4.0, 2/7/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SpectrumBesideImage buf #Y</TD>
          <TD>Produces a byte image in buffer A with the image in <b>buf</b> on the left, reduced to 
            <b>#Y</b> in height, and the scaled spectrum of the image on the right.<b>#Y</b> must
             be no larger the biggest dimension of the image, but can be 0 to specify no 
            reduction.&nbsp; The reduced image ends up in buffer B and the original image in A ends up in
             C.&nbsp; Command added in 4.0, 2/7/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CheckForBadStripe [buf] [#H]</TD>
          <TD>Checks for sharp transitions between columns or rows in an image and for
            whether they occur at expected positions for a bad channel of data from a K2 or
            K3 camera.&nbsp; Analyzes the image in buffer A, or the buffer indicated by
            <b>buf</b>.&nbsp; It uses the RotationAndFlip property of the camera, if it can be
            identified, to determine if vertical or horizontal stripes should be sought,
            unless the option <b>#H</b> is entered with 1 for horizontal or 0 for vertical
            stripes.&nbsp; Reports the number of significant transitions found and the number
            of those that are within a few pixels of the expected boundaries between channels for a
            K2 or K3 camera.&nbsp; Multiple significant transitions near the same boundary are counted as 
              a single transition.&nbsp; If there is just one transition and it occurs at the first or
              last expected boundary, the second value is returned as -1.&nbsp; The second value would 
              be a more reliable number to use if there are uncorrected line defects or a risk of very 
              straight grid bars in the field.&nbsp; The appropriate test would be for a value either 
              greater than 1 or less than 0.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CtfFind buf #M #N [#F] [#B] [#P0] [#P9] [#S]
            [#A]</TD>
          <TD>Determines defocus and astigmatism by fitting to Thon rings in an FFT of the
            image in the given buffer.&nbsp; Follow the buffer letter/number with the minimum (<b>#M</b>) and
            maximum (<b>#N</b>) defocus for the search (in microns, underfocus negative), and with these
            optional entries:
            <br />&nbsp; <b>#F</b> non-zero to do a 1-D initial search instead of a slower 2D one<br />
&nbsp; <b>#B</b> between 128 and 640 to set the box size for the amplitude spectrum to analyze,
            or zero to use the default (256)<br />
&nbsp; <b>#P0</b> alone to set the additional phase shift, in degrees, or 0 (or 0 0) to use the
            phase shift set in the <A HREF="menu_process.htm#hid_process_setphaseplateshift">Set Phase Plate Shift</A>
            menu item<br />
&nbsp; <b>#P0</b> and <b>#P9</b> to set the minimum and maximum phase shift for a search that
            includes phase shift; the range must be less than 90 degrees.&nbsp; Such a
            search may be slow.<br />
            &nbsp; <b>#S</b> nonzero to set the phase shift search step, or 0 to use the default
            (5.7 degrees)<br />
&nbsp; <b>#A</b> non-zero to fix astigmatism at zero.<br />
            See <a href="menu_process.htm#hid_process_doctffindfitonclick">Do Ctffind On Click</a> and <a href="menu_process.htm#hid_process_setctffindoptions">Set Ctffind Options</a>
            for more details on these options.<br />
            After successful fitting, the command will set <I>reportedValue1</I>-<i>6</i> with
            mean defocus and astigmatism (difference between maximum and minimum defocus) in
            microns (underfocus negative), astigmatism angle in degrees, additional phase shift
            in degrees, fitting score, and
            resolution in Angstroms to which Thon rings fit.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Ctfplotter buf #M #N [#AP] [#P] [#O] [#T] [#C] [#S] [#E]</TD>
          <TD>Runs the IMOD program Ctfplotter to determine defocus and astigmatism of he 
            image in the given buffer.&nbsp; &nbsp; Follow the buffer letter/number with the 
            minimum (<b>#M</b>) and
            maximum (<b>#N</b>) values for the initial defocus scan (in microns, underfocus negative), and with these
            optional entries: 
            <br />&nbsp; <b>#AP</b> sum of 1 to find astigmatism and 2 to find phase; the default is 1
            <br />&nbsp; <b>#P</b> expected phase shift in degrees; if it is 0, it will use the
            phase shift set in the <A HREF="#hid_process_setphaseplateshift">Set Phase Plate Shift</A>
            menu item
            <br />&nbsp; <b>#O</b> tilt angle offset used in adjusting spectra for tilt-dependent defocus changes,
             such as a lamellar pretilt
            <br />&nbsp; <b>#T</b> tuning or power spectra resolution value: 0 for the default resolution (101), a value 
            greater than 100 to set the resolution, 1 for autotuning, or -1 to use the last values from 
            autotuning for PS resolution, spectrum cropping, and fitting limits.  When setting the resolution with or a value,
            the following three values must be entered; when autotuning or using autotune values, no more entries after this
            are allowed.
            <br />&nbsp; <b>#C</b> Pixel size to crop spectra to, or 0 for no cropping
            <br />&nbsp; <b>#S</b> Start of the fitting range in either reciprocal pixels (&lt; 0.5) or Angstroms (&gt; 0.5), or
            -1 to use the default start of the range determined from the defocus
            <br />&nbsp; <b>#E</b> End of the fitting range in either reciprocal pixels or Angstroms
            <br />Automatic truncation of the fitting range, and weighting by local correlation coefficient, will be
            used in the fit.  After successful fitting, the command will set <I>reportedValue1</I>-<i>6</i> with
            mean defocus and astigmatism (difference between maximum and minimum defocus) in
            microns (underfocus negative), astigmatism angle in degrees, phase shift
            in degrees, overall cross-correlation coefficient (CCC) between the power spectrum and fitted CTF curve, and
            resolution in Angstroms of the last point with a correlation coefficient high enough to be
             included in the fit.&nbsp; The CCC is not at all comparable to the score from Ctffind.&nbsp; If the program
            exits with an error, <I>reportedValue1</I> will be set to 1, and <I>reportedValue2</I> will contain 
            the exit status.&nbsp; Failure to start the program or to read results after successful 
            completion generates a script error, but a non-zero exit status will not.&nbsp; Three files will
            be created in the current directory: 'single.defocus' with the basic results, 'ctfplotter.log' 
            with program output, and 'ctfplotter.info' with stored settings plus the CCC and fit-to-resolution values.
            <br />To use this command, Ctfplotter must be available to SerialEM; see <a href="setting_up_serialem.htm#addedPackages">
              Additional Packages for GPU and Python Support, and for Displaying Graphs and Using Ctfplotter</a>
             for details on how to achieve this.
            &nbsp; With IMOD 4.12.31 or higher, Ctfplotter is about as fast as Ctffind and will give significantly more
            accurate results for images with weaker signals or ones taken at higher tilt.
            To save some time, use autotuning (the default) on an initial image and use last 
            parameters (-1 for <B>#T</B>) on a similar image.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportCtplotterTuning</TD>
          <TD>Reports the values set from the last autotuning in Ctfplotter: power spectrum 
            resolution, pixel size to which spectra are cropped or 0 if no cropping, and 
            start and end of the fitting range in reciprocal pixels.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="directory"></A><B>Directory and Miscellaneous Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetDirectory dir</TD>
          <TD>Changes the working directory to <b>dir</b>, which can contain spaces.&nbsp;
            The working directory is the location where script commands will access files
            when the names given to commands do not include a path, but it is not the
            directory where file choosers will open unless the &#39;OpenChooserInCurrentDir&#39;
            command is used.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportDirectory</TD>
          <TD>Reports the current working directory, which is where a file will be created
            if it is opened from a script command without a full path.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">UserSetDirectory [prompt]</TD>
          <TD>Opens a directory chooser dialog to allow user to select or make a directory,
            and change the working directory to it.&nbsp; If the optional <b>prompt</b> string is
            not supplied, the dialog title is &#39;Choose a new current working directory&#39;.&nbsp;
            The chosen directory is stored in <I>reportedValue1</I>.&nbsp; This is the
            directory where script commands will access files when given a name with a path.
            but file choosers will not open there unless the &#39;OpenChooserInCurrentDir&#39;
            command is used.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OpenChooserInCurrentDir</TD>
          <TD>Makes the next file chooser dialog open in the current working directory.&nbsp;
            If the user selects a different directory in the chooser, the next file chooser
            will open in that directory, just as if this command was not given, although the
            location will be kept track of by the program rather than by the operating
            system.&nbsp; Command added in 3.9,0, 11/29/20</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MakeDirectory dir</TD>
          <TD>Creates the directory <b>dir</b> if it does not already exist.&nbsp; <b>dir</b> can
            contain spaces.&nbsp; As of 5/18/22, the parent directory need not already exist, and multiple parent directories can be created.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MakeDateTimeDir</TD>
          <TD>Creates a directory named by the date and time (e.g., Aug15_12.23.15) under the
            current directory and change to this as the new working directory.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">DoesFileExist file</TD>
          <TD>Reports if <b>file</b> exists in the current working directory
          if the name includes no path, or at the indicated path if it includes a
          path.&nbsp; <b>file</b> can be a directory.&nbsp; Command added in 3.9, 11/8/20.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AllowFileOverwrite #</TD>
          <TD>Allows 'OpenNewFile', 'OpenNewMontage', and 'OpenTextFile ID W...' to overwrite an existing file if <b>#</b> is
            1, or disallow it again if <b>#</b> is 0.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RemoveFile file</TD>
          <TD>Removes the given file unconditionally, prints a warning if it cannot be
            removed.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">WriteComForTSAlign</TD>
          <TD>Writes the command file for aliging a whole tilt series if this mode of
            operation was selected with the AlignWholeTSOnly command; otherwise it has no
            effect.  The tilt series file with associated .mdoc must still be the current
            open file.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SaveLogOpenNew [newFile]</TD>
          <TD>Closes the log window and opens a new one.&nbsp; If a log file has been saved,
            the log is automatically saved to it before closing.&nbsp; If there is no log
            file and the log has new contents since program startup, the program will ask
            the user whether to save to log first; if the user cancels, the script is
            aborted.&nbsp; If a filename (<b>newFile</b>) is added, the new log will be saved with
            that name.&nbsp; Variables will be substituted before using the name.
            An extension in this name will be stripped off before adding
            '.log', so if you want to preserve extensions or other text after a period, add
            '.log' to the end of the name.&nbsp; If the file already exists, a number will
            be added to get a unique new name.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CloseLogOpenNew [#]</TD>
          <TD>Closes the log window and opens a new one.&nbsp; If a log file has been saved, the
              log is automatically saved to it before closing.&nbsp; If there is no log file and
              the log has new contents since program startup, the program will ask the user
              whether to save to log first unless a non-zero value is entered for the optional
              <b>#</b>, in which case the contents of the log are discarded. If the user cancels the
              query, the script is aborted.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SaveLog [#O newFile]</TD>
          <TD>Saves the log to a file.&nbsp; If no optional entries are made, it will be saved
              to the current file if there is one; otherwise the user will be asked for a
              filename in which to save.&nbsp; If a filename <b>newFile</b> is entered on this command, the
              log will be saved to a new file with that name.&nbsp; Variables will be substituted
              before using the name. An extension in this name will be stripped off before
              adding &#39;.log&#39;, so if you want to preserve extensions or other text after a
              period, add &#39;.log&#39; to the end of the name.&nbsp; Enter a non-zero value for <b>#O</b> to
              overwrite the file if it already exists, or zero to have a number added to get a
              unique new name.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LoadSettingsFile file</TD>
          <TD>Loads the given settings file after saving to the current one.&nbsp; Command 
            added in 4.1, 31-Oct-22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SaveSettings</TD>
          <TD>Saves settings to file; if there is no current setting file, the user will be asked to
            provide a filename.&nbsp; If the user cancels, the command gives an error.&nbsp; Command
            added in 4.1., 28-Nov-22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SaveCalibrations</TD>
          <TD>Saves the calibrations to a file. The name of the calibrations file is printed in the
              log window; execution of this command requires Administrator mode to be enabled in the
              Calibrations menu.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ListAllCalibrations</TD>
          <TD>Print tables with image shift, stage shift, focus, astigmatism via CTF, beam shift, beam
          intensity, spot intensity, and high focus mag calibrations to the log window for diagnostic purposes.
          &nbsp; It also reports rotation problems and inconsistencies between stage calibrations.
            &nbsp; Command added in 3.9, 1/8/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ListISVectorsToGraph #P #C #W</TD>
          <TD>List image shift vectors for one camera whose active camera number is given in <b>#C</b>
             (numbered from 1), using calibrated pixel sizes and relative rotations if <b>#P</b>
            is non-zero, and save values in arrays for plotting with 'GraphPreStoredValues'.&nbsp; The
            magnification is stored in column 1.&nbsp; Set <b>#W</b> to 1 to store just lengths in 
            columns 2 and 3, 2 to store just angles there, or 3 to store lengths in 2 and 3 and angles
             in 4 and 5.&nbsp; Command added in 4.1, 10/27/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportRotationProblems</TD>
          <TD>Prints warnings about both the lack of calibrated absolute rotations (as is 
            printed on program startup by default) and the lack of relative rotation 
            information (printed on program startup in Administrator Mode).&nbsp; Command added in 4.0, 1/26/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CheckStageToCamera [#R] [#S] [#D]</TD>
          <TD>Checks for inconsistencies between stage calibrations that are directly measured, derived for a mag
            from another mag using image shift calibrations, and derived using rotation and pixel size 
            information.&nbsp; If there is no stage calibration at a mag, it compares one derived by IS 
            calibrations (if any) with one derived from rotation and pixel values.&nbsp; If there is a stage
             calibration, it compares it with one derived by IS calibrations (if any) and separately compares
            it with one derived from rotation and pixel values.&nbsp; The rotation, average scaling in X and Y, and
            maximum stretch along an axis are reported if the rotation is larger than 8 degrees (or the value entered
            with the optional <b>#R</b>), or the scaling or stretch differ from 1 by more than 0.08 (or the value
            entered with <b>#S</b>).&nbsp; If <b>#D</b> is nonzero, it prints details about how each troublesome 
            matrix is derived.&nbsp; Only mags where there is either a calibrated pixel size or calibrated relative or absolute rotation angle will be tested.&nbsp; Not all of the discrepancies will cause a problem in 
            practice.&nbsp; Command added in 4.0, 2/15/22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RunSerialEMSnapshot</TD>
          <TD>Captures diagnostic information about the SerialEM configuration and calibrations in the log
            by running the script SerialEM_Snapshot.txt.&nbsp; It looks for this script in the directory
            with SerialEM.exe, then in C:\Program Files\SerialEM.&nbsp; If it is not present, the current version
             can be downloaded from the<a href="https://serialemscripts.nexperion.net/script/74"> 
            Nexperion script repository</a> and renamed to this name.&nbsp; Command added in 4.0, 3/7/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReorderMontageByTilt</TD>
          <TD>Changes the piece coordinates in the current open file, which must be a 
            montage, to reorder them by tilt, just as is done for bidirectional and 
            dose-symmetric tilt series.&nbsp; An MRC file must have an associated metadata 
            audoc (&#39;.mdoc&#39;), and both the piece coordinates in the image file header and the 
            ones in the .mdoc will be reordered.&nbsp; An HDF file can also have its piece 
            coordinates reordered.&nbsp; Command added in 4.1, 4/23/22.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="imagefile"></A><B>Image File Commands</B></TD>
        </TR>
         <TR>
          <TD class="scriptcommand">S or Save [buf] [#F]</TD>
          <TD>Saves image in A or in <b>buf</b> to current open file, or to the given file number <b>#F</b></TD>
        </TR>
       <TR>
          <TD class="scriptcommand">SetNewFileType #T [#S]</TD>
          <TD>Enter <b>#T</b> as 0 to open files as MRC, or 1 to open files as a TIFF series described in
            an image autodoc file. The optional second value <b>#S</b> sets whether to open montaged
            files as MRC or as a TIFF series, but only if the property
            MontageAutodocOptions is set.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OpenNewFile file</TD>
          <TD>Opens a file with the given name, which can contain spaces. The file properties
            dialog will be bypassed. Since the current working directory can be
            unpredictable, depending on whether the user has opened a file with the file
            chooser, it is advisable either to specify an absolute path for the filename,
            use a &#39;SetDirectory&#39; with an absolute path, or use a filename in a variable set
            by &#39;ChooserForNewFile&#39;.&nbsp; The same advice applies for the following
            commands that open files as well.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SaveToOtherFile buf typ cmp file</TD>
          <TD>Saves one image in the given buffer <b>buf</b>, which can be in the FFT window,
             to the file with the given name and closes
            the file.&nbsp; <b>typ</b> specifies the type of file and can be MRC, HDF, TIF, TIFF,
            JPG, JPEG, CUR,
            or -1 (case insensitive), where CUR or -1 means use the current file type for
            the File menu entry Save Single/Save to Other.&nbsp; If that type is a series of
            TIFF files, a single TIFF will be written with the given name instead.&nbsp; <b>cmp</b>
            specifies the compression for a TIFF file and can be NONE,&nbsp; LZW, ZIP, JPG,
            JPEG, CUR, or -1 (case insensitive), where CUR or -1 means use the current
            compression for Save Single/Save to Other.&nbsp; If JPG or JPEG is entered for
            &#39;typ&#39;, a true JPEG file will be written, not a JPEG-compressed TIFF, and the
            compression entry does not matter (but must be present before the filename <b>file</b>).</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">SnapshotToFile #S #T feat typ cmp file</TD>
          <TD>Takes a snapshot of the image display in the current active buffer of the active window, saves
            it to the file with the given name, and closes the file.&nbsp; <b>#S</b> sets the amount
            of image scaling relative to the display with a value of 1 or greater, or 0 or
            less to take the whole image at 1:1 zoom.&nbsp; <b>#T</b> sets the scaling of text
            labels and line thicknesses with a value of 1 or more, or 0 or less to use the
            same scaling as for the image.&nbsp; Set <b>feat</b> non-zero
            to skip feature drawing, with the
            sum of 1 to skip some features, 2 to skip Navigator
            items, and 4 to skip the scale bar.&nbsp; <b>typ</b> specifies the type of file and can be TIF, TIFF,
            JPG, JPEG, CUR,
            or -1 (case insensitive), where CUR or -1 means use the current file type selected in the
            <a href="hidd_screenshot.htm">Image Snapshots dialog</a>.&nbsp; <b>cmp</b>
            specifies the compression for a TIFF file and can be NONE,&nbsp; LZW, ZIP, JPG,
            JPEG, CUR, or -1 (case insensitive), where CUR or -1 means use the current
            compression in the Image Snapshots dialog.&nbsp; If JPG or JPEG is entered for
            &#39;typ&#39;, a true JPEG file will be written, not a JPEG-compressed TIFF, and the
            compression entry does not matter (but must be present before the filename <b>file</b>).&nbsp; Use
            the 'ReportActiveViewTitle' and 'SetActiveViewByTitle' commands to ensure that the snapshot is
            of the desired window.

          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OpenFrameSumFile suffix</TD>
          <TD>Opens a file whose name starts with the last name used for saving
            frames from a K2/K3, DE, or Falcon camera, and ends with the <b>suffix</b> string given in the command.&nbsp;
            The string can contain spaces and variables. </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OpenOldFile file</TD>
          <TD>Opens an existing MRC, HDF, or .idoc file with the given name, which can contain
            spaces.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReadFile # [buf]</TD>
          <TD>Reads the given section <b>#</b> (numbered from 0) from the current open file into
            the standard Read buffer, or into the buffer indicated by the optional <b>buf</b></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReadOtherFile # buf file</TD>
          <TD>Reads the given section <b>#</b> (numbered from 0) from a file into the given buffer
            <b>buf</b> and leaves the file closed; <b>buf</b> can be a buffer letter/number or -1 to use the
            standard Read buffer; end with filename.&nbsp; This command can read from a TIFF
            file, which cannot be opened otherwise.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RetryReadOtherFile #</TD>
          <TD>Sets the number of times to retry if there is an error in ReadOtherFile,
            with a 2-second wait between trials.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReadMontagePiece #X #Y #Z [buf]</TD>
          <TD>Reads a piece from the current montage file at piece index <b>#X</b> and <b>#Y</b>
            (numbered from 1) in section <b>#Z</b> (numbered from 0), placing it in the current read 
            buffer or the the buffer indicated by the optional <b>buf</b>&nbsp; Command added in 4.1, 07-Apr-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CloseFile [#]</TD>
          <TD>Closes the current file. Enter optional <b>#</b> to stop script if no file is open.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportFileNumber</TD>
          <TD>Reports the number of the currently selected file, numbered from 1, or -1 if
            there is no file open.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SwitchToFile #</TD>
          <TD>Makes the given file number, numbered from 1, be the current open file.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportFileZsize</TD>
          <TD>Reports the number of frames in currently open file</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportCurrentFilename [#]</TD>
          <TD>Reports the full path and filename of the current open file and sets it into
            <I>reportedValue1</I>; or if the optional <b>#</b> is entered with a 1, sets the root of the
            filename including the path in <I>reportedValue1</I>, the extension (including the dot) in
            <I>reportedValue2</I>, the path only in <I>reportedValue3</I>, and the rest of the rootname
            in <I>reportedValue4</I>.&nbsp; No optional assignment to variable.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AddTitleToFile #F title</TD>
          <TD>Adds the text in <b>title</b> to the header of the file whose number is given by <b>#F</b>,
             or to the current open file if <b>#F</b> is 0.&nbsp; The file must already have 
            at least one image saved to it before running this command.&nbsp; The title will also be added
            to the ".mdoc" file for an MRC file, or to an ".idoc" file, but it will appear after
             the section for the last image written.&nbsp; Command added in 4.0, 1/12/22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportLastFrameFile</TD>
          <TD>Reports the full path and filename of the last frame file saved from a K2/K3, DE, or
            Falcon camera and sets it into <I>reportedValue1</I>, sets the directory only into <i>reportedValue2</i>,
            and sets the filename only into <i>reportedValue3</i>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportFrameBaseName</TD>
          <TD>Reports the base name if one is defined and whether it is used in frame or folder names; sets
              <I>reportedValue1</I> to 1 if it is included in frame names and 0 if not, sets
              <I>reportedValue2</I> to the base name if it is defined or 'none' if it is not, and sets <I>reportedValue3</I> to 1 if it is included in folder names and 0 if not.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">SetFrameBaseName #K #F #D name</TD>
          <TD>Sets the base name with <B>name </B>and sets whether to use it in frame or directory names.&nbsp; Set 
            <b>#K</b> to 1 to keep these settings after the script ends; otherwise they will be restored.&nbsp;
              Set <b>#F</b> to 1 to use the name in frame file names, 0 not to, or -1 to leave the current 
            settings unchanged.&nbsp; Set <b>#D</b> to 1 to use it in directory names, 0 not to, or -1 to leave
             the setting as is.&nbsp; Command added in 4.0, 11/30/21.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">ReportFrameSavingPath</TD>
          <TD>Reports the path defined with the <b>Set Folder</b> button in the Camera Setup dialog for the current camera,
            which must be either a Gatan or a generic frame-saving camera.&nbsp; Sets <i>reportedValue1</i> to the path, or
            to NONE if it is not defined.&nbsp; Command added in 4.1, 26-Apr-23.
          </TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="montage"></A><B>Montage File Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OpenNewMontage #X #Y file</TD>
          <TD>Opens a file with the given name for montaging, with the number of frames in X
            and Y given by <b>#X</b> and <b>#Y</b>. If either <b>#X</b> or <b>#Y</b> is 0, the number of frames
            will be taken from the last montage that was open. The file properties and
            montage setup dialogs will be bypassed, and some properties like overlap and
            whether to do a stage montage will be taken from the last montage that was
            open.  If no montage has been open before, or if the binning in the montage parameters does
            not match the binning in the camera parameter set to be used for the montage, the montage will use full-sized frames 
            with the default overlap and will use stage movement if it is obvious enough that it is appropriate.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetMontageParams #S [#OX #OY #FX #FY #N #B]</TD>
          <TD>Sets up to 7 montage parameters after a montage file has been opened; enter a value or -1 to leave the parameter
            unchanged. The entries are: <b>#S</b> 1 to use stage movement or 0 not to; <b>#OX</b> overlap in X;
            <b>#OY</b> overlap in Y; <b>#FX</b> frame size in X; <b>#FY</b> frame size in Y, <b>#N</b> 1 to skip correlations or 0 not
            to; <b>#B</b> a binning.&nbsp; The frame sizes, overlaps, 
            and binnings cannot validly be changed after acquiring into the file.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ParamSetToUseForMontage #</TD>
          <TD>Specifies what parameters to use for a montage: 
            <br>1 and -1 will turn on or off the option to use Mont-Map parameters;
            <br /> 2 or -2 will turn on or off the option to use View in Low Dose mode;
            <br />3 or -3 will turn on or off the option to use Search in Low Dose mode; 
            <br />When one of these is turned on, the other is turned off.&nbsp; In 
            general, it is best to use this command before opening a montage; and if Low Dose is on and a montage
            is already open, using +/-2 or +/-3 will generate an error.&nbsp; 
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetupWaffleMontage #B file</TD>
          <TD>Opens a montage file or adjust the current file&#39;s properties so that it will
            hold an image of the cross-line (waffle) replica grating with at least <b>#B</b> blocks
            in X and Y at the current magnification. Follow with the minimum <b>#</b> of blocks and
            the name of the <b>file</b> to be opened if necessary.&nbsp; If montaging is not
            needed, no changes are made.&nbsp; If there is an existing montage that is
            adequate, its properties will be adjusted to work at the current mag.&nbsp; If a
            new montage is needed, it will close the current file if it is a montage and
            open a new one with the given name.&nbsp; Variables will be substituted, so the
            name can contain the mag index, for example. It sets <I>reportedValue1</I> to 1 or 0
            depending on whether montaging is needed or not. </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetupFullMontage #O file</TD>
          <TD>Opens a full grid montage with the given name at the current magnification, without opening
             any dialogs.&nbsp; The current acquisition parameters of the camera parameter set indicated 
            in the Montage Setup dialog will be used.&nbsp; If <b>#O</b> is nonzero, it sets the minimum 
            overlap factor for fitting the montage, overriding the corresponding entry in the setup 
            dialog.&nbsp; If nonzero, this factor must be between 0 and 0.5&nbsp; Command added in 4.1, 31-Oct-22, 
            changed to have an overlap factor 6-Mar-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetGridMapLimits #P #LX #UX #LY #UY</TD>
          <TD>Sets the limiting stage positions to be covered by a full grid montage, overriding the limits
            set with Set Grid Limits in the Navigator - Montaging &amp; Grids submenu until the script ends (if
             <b>#P</b> is 0) or replacing those limits if <b>#P</b> is nonzero.&nbsp; <b>LX</b> and <b>UX</b>
            are the lower and upper X coordinates in microns and they must be negative and positive, 
            respectively; enter a 0 to use the existing limit.&nbsp; <b>LY</b> and <b>UY</b> are similar for 
            Y.&nbsp; Command added in 4.1, 6-Mar-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetupPolygonMontage #I #O file</TD>
          <TD>Opens a polygon montage with the given name at the current magnification, without opening
             any dialogs.&nbsp; For <b>#I</b>, enter 0 for
              the current Navigator item or the item being acquired; an index greater than 0 for the item with
              that index in the table; or a value less than 0 to count back from the end of the
              table, where -1 is the last item.&nbsp; The indicated item must be a montage.&nbsp; The current 
            acquisition parameters of the camera parameter set indicated 
            in the Montage Setup dialog will be used.&nbsp; If <b>O</b> is nonzero, it sets the minimum 
            overlap factor for fitting the montage, overriding the corresponding entry in the setup 
            dialog.&nbsp; If nonzero, this factor must be between 0 and 0.5&nbsp; Command added in 4.1, 31-Oct-22, 
            changed to have an overlap factor 6-Mar-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportNumMontagePieces</TD>
          <TD>Reports the number of pieces that will be acquired for a montage if one is
            currently open, or 1 if not.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="textfile"></A><B>Text File Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReadTextFile var file</TD>
          <TD>Reads the entire contents of the given text file, breaks it up by spaces or tabs, and
            stores the words or numbers as an array in the variable <b>var</b>.&nbsp; All lines
            will be read and combined into the one variable.&nbsp; The file will be closed
              after reading.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReadStringsFromFile var file</TD>
          <TD>Reads the entire contents of the given text file as a whole string per line, and
              stores the lines as an array in the variable <b>var</b>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Read2DTextFile var file</TD>
          <TD>Reads the entire contents of the given text file, breaks it up by spaces or tabs, and
              stores the words or numbers of each line as a separate row of a 2D array in the
               variable <b>var</b>.&nbsp; The file will be closed after reading.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand" colspan="2">&nbsp;&nbsp;&nbsp;&nbsp; The following commands allow
              multiple files to be opened for either reading or writing (not both) and
              accessed one line at a time.&nbsp; Each
              file is referred to by an arbitrary one-word identifier (<b>ID</b>) that immediately follows
              the command; the ID is case-insensitive.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">OpenTextFile ID mode #K file</TD>
           <td>Opens a file with the given <b>ID</b> in the given mode, closing it when the
               script ends if <b>#K</b> is 0 or keeping it open if <b>#K</b> is non-zero.&nbsp; The <b>mode</b> can
               be: <br />
               &nbsp;&nbsp;
               R or r to open for reading, giving an error if the file does not exist; <br />
               &nbsp;&nbsp;
               T or t to try to open for reading, setting <I>reportedValue1</I> to 1 if the file exists
                or 0 if it does not;
               <br />
&nbsp;&nbsp; W or w to open for writing, giving an error if the file exists unless
               'AllowFileOverwrite 1' has been used;<br />
&nbsp;&nbsp; O or o to open for writing, overwriting an existing file if any;<br />
&nbsp;&nbsp; A or a to open for appending (writing at the end), giving an error if the file
               does not exist.<br />
               The same file cannot be opened under two different ID's.&nbsp; The 'T' mode can
               be used to avoid a script error and also can be used in a loop to wait for a
               file to appear from an external source.</td>
        </TR>
       <TR>
          <TD class="scriptcommand">WriteLineToFile ID [line]</TD>
           <td>Writes the remainder of the text on the script line (after variable
               substitution) to the file with the given <b>ID</b>.&nbsp; The comment character '#' can
               be included and text after it will be written.&nbsp; Omit <b>text</b> to write
             a blank line.</td>
        </TR>
       <TR>
          <TD class="scriptcommand">ReadLineToArray ID var</TD>
           <td>Reads the next line of the file with the given <b>ID</b>, breaks it into words, and
               sets up an array variable <b>var</b> with each word as an element.&nbsp; '#' is treated as
               the start of comment and the rest of the line is discarded. Blank lines and
               lines starting with '#' will be skipped.&nbsp; Parts of the line enclosed in
               single quotes will be treated as single strings if the 'ParseQuotedStrings'
             command has been given.&nbsp; Reaching the end of the file does
               not give a script error; instead, <I>reportedValue1</I> is set to 1 when a line is read
               or 0 if nothing was read.&nbsp; This command could be used in a loop to wait for
               a file to be added to by external source.</td>
        </TR>
       <TR>
          <TD class="scriptcommand">ReadLineToString ID var</TD>
           <td>Works like 'ReadLineToArray ', but the line is stored in the variable exactly as it is
               in the file, including a line starting with '#'.&nbsp; Blank lines will still be
               skipped.</td>
        </TR>
       <TR>
          <TD class="scriptcommand">FlushTextFile ID</TD>
           <td>Flushes the output added to the file with the given <b>ID</b> to disk.</td>
        </TR>
       <TR>
          <TD class="scriptcommand">CloseTextFile ID</TD>
           <td>Closes the file with the given <b>ID</b>.</td>
        </TR>
       <TR>
          <TD class="scriptcommand">IsTextFileOpen ID [file]</TD>
           <td>Sets <I>reportedValue1</I> to 1 if there is an open file with the given <b>ID</b>, or with the
               given optional name, and to 0 otherwise.&nbsp; The ID can be nonsense when
               testing with a filename (<b>file</b>).</td>
        </TR>
        <TR>
          <TD colspan="2"><A name="autodoc"></A><B>Autodoc/.mdoc File Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AddToAutodoc key value</TD>
          <TD>Adds a key-value pair to the last section of the autodoc associated with the
            current open image file, if any.&nbsp; The next word after the command is the <b>key</b>, and
            the remainder of the text on the line is taken as the <b>value</b>.&nbsp; Variables are
            substituted before using the text.&nbsp; After one or more additions to a
            section of the autodoc, a WriteAutodoc command must be used to save the values
            before closing the file or saving another image to it.&nbsp; If no images have
            been written yet, the entry will be added to the global section.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">WriteAutodoc</TD>
          <TD>Writes the autodoc associated with the current open image file.&nbsp; Use this
            command once after adding one or more values to a section of the autodoc.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OpenFrameMdoc filename</TD>
          <TD>Opens an '.mdoc' file with the given <b>filename</b> for information about image
            acquisitions that save frames, the same as using the
            <a href="menu_file.htm#hid_file_open_mdoc">Open .mdoc for Frames</a> command.&nbsp;
            An error is generated if such a file is already open.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CloseFrameMdoc [#]</TD>
            <td>Closes the '.mdoc' file for acquisitions that save frames, if one is open.
                If the optional <b>#</b> is non-zero, an error is generated if no file is open.
            </TD>
        </TR>
         <TR>
          <TD class="scriptcommand">AddToFrameMdoc key value</TD>
          <TD>Adds a key-value pair to the last section of the autodoc opened with the
            <a href="menu_file.htm#hid_file_open_mdoc">Open .mdoc for Frames</a> or
              'OpenFrameMdoc' command.&nbsp;
            This works just like AddToAutodoc, but the WriteFrameMdoc command must be used
            instead after adding values.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">WriteFrameMdoc</TD>
          <TD>Writes the frame autodoc file; use this command after adding one or more
            values to a section.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportFrameMdocOpen</TD>
          <TD>Reports whether a frame .mdoc file is open; sets <I>reportedValue1</I> to 1 if so.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">DeferWritingFrameMdoc</TD>
          <TD>Prevents the program from appending a new section to the frame .mdoc file
            after frames are acquired.&nbsp; If you use this command before starting the
            acquisition, add values after acquisition with &#39;AddToFrameMdoc &#39;, and finish
            with &#39;WriteFrameMdoc&#39;, the new section with your additions can be appended to
            the file rather than rewriting the whole file.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">StartNextFrameStackMdoc key value</TD>
          <TD>Adds a key-value pair to the global section of the .mdoc file written with
            each frame stack when the option for such a file is selected in the
            <a href="hidd_k2_save_options.htm">Frame File Options</a> dialog, after
            clearing out any previous entries in the global section.&nbsp; This command and
            the next must be given before acquiring.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AddToNextFrameStackMdoc key value</TD>
          <TD>Adds a key-value pair to the global section of the frame stack .mdoc file
            while retaining previous entries there.</TD>
        </TR>
      </TABLE>
      <BR>
      <P><A name="scope_filter_commands"></A><B>Microscope and Filter Control Commands</B></P>
      <TABLE style="Z-INDEX: 0" border="1" cols="2">
        <TR>
          <TD colspan="2"><A name="stage_commands"></A><B>Stage-Related Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">U or TiltUp [#R] [#X #Y]</TD>
          <TD>Tilts up by preset increment.&nbsp; If optional <b>#R</b> is non-zero, then the program
              will restore the stage X and Y positions after tilting, either to the position
              before starting or to <b>#X</b>, <b>#Y</b> if they are entered.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">D or TiltDown&nbsp; [#R] [#X #Y]</TD>
          <TD>Like TiltUp, but tilts down by preset increment</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetTiltIncrement #I [#C]</TD>
          <TD>Sets the tilt increment to the <b>#I</b>.&nbsp; If the option <b>#C</b> is entered, it sets
            cosine tilting if non-zero or turns it off if 0.&nbsp; Command added in 4.1, 20-Jan-23.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">TiltTo #A&nbsp; [#R] [#X #Y]</TD>
          <TD>Like TiltUp, but tilts to given angle <b>#A</b></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">TiltBy #A&nbsp; [#R] [#X #Y]</TD>
          <TD>Like TiltUp, but changes tilt by the given amount <b>#A</b></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">BackgroundTilt #A [#S]</TD>
          <TD>Starts tilting stage in the background; images can be taken and scripts can run
            during the tilt.&nbsp; Follow with <b>#A</b>, the angle to tilt to, and optionally with
            <b>#S</b>, a speed factor for Thermo/FEI or JEOL scopes that support this (&lt; 1 for slower than normal tilting).&nbsp;
            For CryoARM, speed factors of 100 - 105 will select pre-set speeds
              of 10, 2, 1, 0.5, 0.25, and 0.1 degrees/sec.&nbsp; On Hitachi scopes, the factor is relative to the
            tilt speed that can be set with the property HitachiTiltSpeed.&nbsp; With the default of speed of 100, the factor can range
            from 0.4 to 1.27, and the tilt speed in degrees per second is approximately 1.65 times the factor to the 1.85 
            power.&nbsp; On Thermo/FEI scopes, background stage movement requires the property
            &#39;BackgroundSocketToFEI&#39; set to 1 so that the fourth socket for background stage
            operations is opened when the program starts.  If the command
              crashes SerialEM or FEI-SEMserver, see notes under <a href="#tiltDuringRecord">TiltDuringRecord</a>.
              </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">StopBackgroundTilt [#]</TD>
          <TD>Stops tilting started by BackgroundTilt by issuing a new call to tilt at normal speed, at the 
            current angle or the current angle plus the optional <b>#</b>.&nbsp; This command works on JEOL scopes
             and has been seen to work on Thermo/FEI scopes with 7.x servers, but not with 6.x servers or 
            earlier&nbsp; Command added in 4.1, 10-Apr-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportTiltAngle</TD>
          <TD>Reports current tilt angle</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MoveStage #X #Y [#Z]</TD>
          <TD>Moves stage by micron increments in X, Y, Z (<b>#Z</b> optional)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MoveStageTo #X #Y [#Z]</TD>
          <TD>Moves stage to given position in microns. <b>#Z</b> is optional and Z will not be
            changed if it is omitted.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">StageShiftByPixels #X #Y</TD>
          <TD>Moves the stage by the given number of unbinned pixels in X and Y on the
            current camera.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MoveStageWithSpeed #X #Y #S</TD>
          <TD>Moves the stage by micron increments in X and/or Y with a speed factor <b>#S</b>.&nbsp; On Thermo/FEI scopes,
             this may work only with one axis set to 0 using standard scripting, but should work for moving both
            axes when going through the Tommoniker interface.&nbsp; If the command
              crashes SerialEM or FEI-SEMserver, see notes under <a href="#tiltDuringRecord">TiltDuringRecord</a> On 
            Hitachi scopes, the speed factor is relative to the stage speed that can be set with the property 
            HitachiStageSpeed; with the default value of 80000, the factor can range from 0.0025 to 2.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportStageXYZ</TD>
          <TD>Reports current stage position</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportStageBusy</TD>
          <TD>Reports if the stage is busy and set <I>reportedValue1</I> to 1 if so, 0 if not.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">TestRelaxingStage #X #Y [#B] [#R]</TD>
          <TD>Moves stage by the micron increments in X and Y with backlash correction and a
            small relaxation in the opposite direction from the backlash correction.&nbsp;
            The optional <b>#B</b> can be set with the backlash amount, otherwise the value of the
            property &#39;StageMontageBacklash&#39; will be used.&nbsp; The optional <b>#R</b> can be set
            with the relaxation amount in microns; otherwise the value of the property
            &#39;StageRelaxation&#39; will be used (default 0.025).&nbsp; The backlash movement will
            be opposite to the stage movement unless <b>#B</b> is negative.&nbsp; To assess the
            value of relaxation, a measurement of the time it takes for drift to settle
            should be done after this command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RelaxStage [#R]</TD>
          <TD>If the stage is in a known backlash state, moves the stage in the opposite
            direction from its last movement by the amount given by the optional <b>#R</b>, or the
            StageRelaxation property (0.025 by default).&nbsp; A message is printed if the
            stage backlash state is not known.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportStageBAxis</TD>
          <TD>Reports the B axis value of the stage in degrees, if such an item exists.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetStageBAxis #</TD>
          <TD>Sets the stage B axis to the given value in degrees.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="focus_commands"></A><B>Focus-Related Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChangeFocus #</TD>
          <TD>Changes defocus by the given value in microns</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetDefocus #</TD>
          <TD>Sets the defocus to the given value in microns</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetAbsoluteFocus #</TD>
          <TD>Sets focus to an absolute (standardized)&nbsp;value as reported earlier by
            ReportAbsoluteFocus or ReportFocus</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetStandardFocus #</TD>
          <TD>Same as &#39;SetAbsoluteFocus&#39;, which is preferred to avoid confusion with the
            calibrated standard or eucentric focus value</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetObjFocus #</TD>
          <TD>Calls SetObjFocus on JEOL with the given <b>#</b>, an integer increment, and reports
            change in focus</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetDiffractionFocus #</TD>
          <TD>Sets diffraction focus to the given <b>#</b></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportDefocus</TD>
          <TD>Reports current defocus readout in microns</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportAbsoluteFocus</TD>
          <TD>Reports an absolute (standardized) value for the current focus setting</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportFocus</TD>
          <TD>Same as &#39;ReportAbsoluteFocus&#39;, which is a better description of the operation</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetEucentricFocus [#]</TD>
          <TD>If in low mag, sets to the standard focus for the current mag or nearest LM
            mag if one has been set; otherwise on Thermo/FEI it assumes standard focus is 0 and on
            JEOL it stops with an error.&nbsp; If not in LM, sets to the standard focus for
            the nearest nonLM mag if one has been set.&nbsp; It stops with an an error if none were
            set unless the optional <b>#</b> is non-zero, in which case it suppresses the error and 
            sets <i>reportedValue1</i> to -1 instead of 0.&nbsp; On Thermo/FEI scopes, it issues a 
            warning if it is using a calibrated value from a different mag.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CalEucentricFocus</TD>
          <TD>Stores the current standardized focus value as the standard focus for the
            current mag, just as the Calibrate menu item
            <a href="menu_calibration.htm#hid_calibration_standardlmfocus">Standard Focus</a>
            does.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SaveFocus</TD>
          <TD>Saves the current focus; the focus will be restored to this value either by
            RestoreFocus or when the script stops or exits.&nbsp; The script will not be
            resumable if it stops.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RestoreFocus</TD>
          <TD>Restores the focus value when SaveFocus was run.&nbsp; After this is run, the
            focus will not be restored again when the script ends.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ResetDefocus</TD>
          <TD>Sets the defocus readout to 0, just as
            <a href="menu_focus.htm#hid_focus_resetdefocus">Reset Defocus</a> in Focus menu
            does.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="mag_commands"></A><B>Magnification-Related Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetMag #M [#D]</TD>
          <TD>Sets the mag to an actual mag value in <b>#M</b>.&nbsp; In STEM mode, set the optional
            <b>#D</b> non-zero to set STEM mag directly to the given value, without trying to find
            it in the mag table.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">SetMagIndex #</TD>
          <TD>Sets the magnification index to the given value</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChangeMag #</TD>
          <TD>Changes mag by given number of mag steps, positive to increase mag index and
            negative to decrease it.&nbsp; If the property &#39;UseInvertedMagRange&#39; is set,
            positive and negative increase or decrease the mag rather than the mag index in
            the inverted range.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportMag</TD>
          <TD>Reports the current mag; also sets <I>reportedValue2</I> to 1 if low mag mode, 0 if not,
            and <i>reportedValue3</i> to 1 if in EFTEM, 2 if in STEM mode, or 0 otherwise.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportMagIndex</TD>
          <TD>Reports the current mag index; also sets <I>reportedValue2</I> to 1 if low mag mode, 0
            if not</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportCameraLength</TD>
          <TD>Reports the camera length in meters, or 0 if not in diffraction mode.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetCamLenIndex #</TD>
          <TD>Sets the camera length index to the given number; on a Thermo/FEI scope, values higher
            than 30 set the index to (<b>#</b> - 30) in LAD mode</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetMagAndIntensity #</TD>
          <TD>Sets the mag to the actual film mag value and change the beam to maintain the
            same brightness. Two values are reported: the initial percent C2 value and the
            remaining factor of intensity change needed if it was not possible to change
            the intensity by the full amount needed. The C2 value should be used to restore
            intensity when the mag is restored. The remaining intensity change could be
            applied to the exposure time if necessary. The script will stop if there is an
            error in the intensity change.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChangeMagAndIntensity #</TD>
          <TD>Changes mag by the given number of mag steps and change the beam to maintain the
            same brightness. Behaves same as SetMagAndIntensity, and steps in the same way
            as ChangeMag.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">IncMagIfFoundPixel #</TD>
          <TD>Increases or decreases mag by one step if the pixel size has been found at the
            current mag with the <a href="menu_calibration.htm#hid_process_findpixelsize">Find Pixel Size</a>
            routine, depending on whether <b>#</b> is positive or negative.&nbsp; Sets
            <I>reportedValue1</I> to 1 if the mag is changed, 0 otherwise.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="beam_commands"></A><B>Beam-Related Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetSpotSize #</TD>
          <TD>Sets the spot size to the given number</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportSpotSize</TD>
          <TD>Reports the current spot size</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetPercentC2 #</TD>
          <TD>Sets the C2/C3 lens strength to the given percentage, or illuminated area on
            Titan to given value in microns.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">IncPercentC2 #</TD>
          <TD>Changes the C2/C3 lens strength percentage or illuminated area in microns by the given amount</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportPercentC2</TD>
          <TD>Reports the percent C2/C3 (on a Thermo/FEI scope, this number matches the value in MUI)
            and the fractional lens strength.&nbsp; On a Titan, if illuminated area is being
            used for intensity, this reports the illuminated area value.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportCrossoverPercentC2</TD>
          <TD>Reports the percent C2/C3 and the fractional lens strength of the crossover at the
            current spot size and probe mode as calibrated. If illuminated area is being
            used for intensity, this reports the illuminated area value at crossover.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportIlluminatedArea</TD>
          <TD>Reports the illuminated area on a Titan in the units that are used internally, which are
            microns times 0.01.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetIlluminatedArea #</TD>
          <TD>Sets the illuminated area on a Titan to the given value, expressed in microns
            times 0.01.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">ReportImageDistanceOffset</TD>
          <TD>Reports the offset of the distance from the condenser plane to the image plane
           on a Titan in the units from the scope.  Older versions of the scripting software
           do not have this function, and with them, this command will crash SerialEM or FEI-SEMserver.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetImageDistanceOffset #</TD>
          <TD>Sets the offset of the distance from the condenser plane to the image plane
           on a Titan; the allowed range is +/- 0.02. Older versions of the scripting software
           do not have this function, and with them, this command will crash SerialEM or FEI-SEMserver.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetIntensityForMean #</TD>
          <TD>Adjusts beam intensity to yield the given number of counts in a Record image, based on counts in
            the tilt-foreshortened area of the image in A. In Low Dose mode, this operates
            only on Record images and will change the intensity only of the Record area.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetExposureForMean #M [#K]</TD>
          <TD>Adjusts Record exposure time to yield the given number of counts <b>#M</b>, based on
            counts in the tilt-foreshortened area of the image in A, which must be a Record
            image in Low Dose mode.&nbsp; For a K2/K3 camera taking dose-fractionated images, a
            non-zero value can be given for the optional <b>#K</b> to modify frame time so as to
            keep the same number of frames.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetIntensityByLastTilt</TD>
          <TD>Adjusts beam intensity by the change in cosine of the tilt angle from the last
            tilt change. In low dose mode, this changes the intensity only of the Record
            area.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChangeIntensityBy #</TD>
          <TD>Changes beam intensity by the given factor using calibrations. In low dose mode
            this changes the intensity of the current area.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetDoseRate #</TD>
          <TD>Changes the beam intensity to set the dose rate at the camera to the given value
            in electrons per physical pixel per second beam intensity, based on the image in
            buffer A.  This command is the same as running
            <a href="menu_tasks.htm#hid_tasks_set_dose_rate">Set Dose Rate</a> in the Tasks
            menu. In low dose mode it changes the intensity of the current area.
          </TD>
        </TR>
         <TR>
          <TD class="scriptcommand">SetAlpha #</TD>
          <TD>Sets alpha value on JEOL.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportAlpha</TD>
          <TD>Reports alpha value on JEOL.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetBeamShift #X #Y</TD>
          <TD>Sets the beam shift to the given values (nominal micron units)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportBeamShift</TD>
          <TD>Reports the beam shift in nominal micron units</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MoveBeamByMicrons #X #Y</TD>
          <TD>Moves the beam by the given number of microns in X and Y.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MoveBeamByFieldFraction #X #Y</TD>
          <TD>Moves the beam by the given fractions of the current camera field of view in X
            and Y; e.g. 0.5,0.5 would move the center of the beam from the center of the
            field to the upper right corner.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetBeamTilt #X #Y</TD>
          <TD>Sets the beam tilt to the given values (milliradians or % of full scale)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportBeamTilt</TD>
          <TD>Reports the beam tilt in milliradians for Thermo/FEI, % of full-scale value for JEOL</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetImageBeamTilt #X #Y</TD>
          <TD>Sets the image-beam tilt on a Thermo/FEI scope to the given values in
            milliradians.&nbsp; The Thermo/FEI scripting documentation cautions against using both this
            kind of beam tilt and the dark field tilt.&nbsp; Command added in 3.9, 5/23/21.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportImageBeamTilt</TD>
          <TD>Reports the image beam tilt in milliradians on a Thermo/FEI scope.&nbsp; Command
            added in 3.9, 5/23/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetDiffractionShift #X #Y</TD>
          <TD>Sets the diffraction shift to the given values.&nbsp; Command
            added in 4.0, 9/24/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportDiffractionShift</TD>
          <TD>Reports the diffraction shift.&nbsp; Command added in 4.0, 9/24/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetProbeMode #|mode</TD>
          <TD>Sets the mode to microprobe or nanoprobe on a Thermo/FEI scope.&nbsp; Follow with 0
            or 'nano' for nanoprobe, or 1 or 'micro' for microprobe.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SaveBeamTilt</TD>
          <TD>Saves the current X and Y beam tilt (specifically for the current probe mode
            on a Thermo/FEI scope).&nbsp; It will be restored to these values
            either by RestoreBeamTilt or when the script stops or exits.&nbsp; The script will not be
            resumable if it stops.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RestoreBeamTilt</TD>
          <TD>Restores the beam tilt saved when SaveBeamTilt was run or another command
            saved the beam tilt (AdjustBeamTiltForIS or several ImageShift commands).&nbsp; After this is run,
            the beam tilt will not be restored again when the script ends.&nbsp; For a Thermo/FEI
            scope, it is restored for the current probe mode provided that a value was saved
            in that mode.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportProbeMode</TD>
          <TD>Reports whether a Thermo/FEI scope is in nanoprobe or microprobe mode; sets <i>reportedValue1</i> to 0 or 1, respectively.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="image_shift"></A><B>Image Shift-Related Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetImageShift #X #Y [#D] [#A]</TD>
          <TD>Sets the image shift to the given values (image shift units).&nbsp; The values
            correspond to the ones give by ReportImageShift, which are adjusted for tilt
            axis offset, image shift offset, and low dose area shift.&nbsp; Add the optional
            <b>#D</b> to impose a settling time before the next camera image equal to <b>#D</b> times
            the normal settling time (i.e., 1 for regular settling).&nbsp; Add the optional
            <b>#A</b> to use the <a href="menu_focus.htm#hid_focustuning_comavs">Coma vs.
            Image Shift</a> calibration to adjust beam tilt and objective stigmation for the incremental change in
            image shift from its current value. With that option, the command saves the
            current beam tilt, if it has not been saved before in the script, and it will be
            automatically restored when the script exits.&nbsp; The stigmator settings will
            also be saved and restored.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ImageShiftByPixels #X #Y [#D] [#A]</TD>
          <TD>Changes image shift by given <b>#</b> of unbinned pixels in camera X and Y; optional <b>#D</b>
            and <b>#A</b> provide settling time and beam-tilt adjustment for the image shift as just 
            described.&nbsp; As of SerialEM 4.1, 6/29/22, the shift is tested for staying within 
            the standard limit and not done if the limited would be exceeded;
            <i>reportedValue1</i> is set to 0 if it is within limits or 1 if it is not.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ImageShiftByUnits #X #Y&nbsp; [#D] [#A]</TD>
          <TD>Changes image shift by given <b>#</b> of IS units in X &amp; Y; optional <b>#D</b> and <b>#A</b> provide settling time
            and beam-tilt adjustment for the image shift as just described.&nbsp; The shift is tested and 
            <i>reportedValue1</i> is set as for 'ImageShiftByPixels'.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ImageShiftByMicrons #X #Y [#D] [#A]</TD>
          <TD>Changes image shift by given distance on specimen (X is tilt axis); optional <b>#D</b>
            and <b>#A</b> provide settling time and beam-tilt adjustment for the image shift as just 
            described.&nbsp; The shift is tested and 
            <i>reportedValue1</i> is set as for 'ImageShiftByPixels'</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ImageShiftByStageDiff #X #Y [#D] [#A]</TD>
          <TD>Changes image shift by the equivalent of the given stage shift in X and Y; optional <b>#D</b>
            and <b>#A</b> provide settling time and beam-tilt adjustment for the image shift as just 
            described.&nbsp; The shift is tested and 
            <i>reportedValue1</i> is set as for 'ImageShiftByPixels'</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportImageShift</TD>
          <TD>Reports the image shift in IS units, adjusted for tilt axis offset, image shift
            offset, and low dose area shift; if image shift is calibrated, also report the equivalent shift in unbinned
            pixels on the current camera at the current magnification, and the amount the
            stage would need to be moved to compensate for resetting this image shift.&nbsp; Positive values of the
            camera shift will result from an image shift
            imposed by dragging an image to the upper right.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportSpecimenShift</TD>
          <TD>Reports the image shift, as just described, in the &quot;specimen&quot; coordinates used
            internally by the program, which are coordinates in microns with X along the tilt
            axis.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportTiltAxisOffset</TD>
          <TD>Reports the tilt axis offset in microns, which is a single value in 'specimen' coordinates, 
            plus the corresponding X and Y stage units, X and Y IS units, and 1 or 0 
            for whether the user option to shift to tilt axis is selected&nbsp; Command adding in 4.1, 6/29/22.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="misc_scope"></A><B>Miscellaneous Scope Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetObjectiveStigmator #X #Y</TD>
          <TD>Sets the objective lens stigmator to the given values (between -1 and 1)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportObjectiveStigmator</TD>
          <TD>Reports the X and Y values of the objective stigmator, between -1 and 1</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetCondenserStigmator #X #Y</TD>
          <TD>Sets the condenser lens stigmator to the given values (between -1 and 1)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportCondenserStigmator</TD>
          <TD>Reports the X and Y values of the condenser stigmator, between -1 and 1</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetBeamBlank #</TD>
          <TD>Blanks beam if <b>#</b> is 1, unblank if <b>#</b> is 0</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">NormalizeLenses #</TD>
          <TD>Normalizes selected lenses on a Thermo/FEI or Hitachi scope; <b>#</b> is the sum of 1 for projector, 2
            for objective, 4 for condenser lenses</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">NormalizeAllLenses [#]</TD>
          <TD>Normalizes all lenses, or in a lens group, on a Thermo/FEI scope.&nbsp; With <b>#</b> 0 or
            not present, it normalizes all lenses in one call.&nbsp; Otherwise, <b>#</b> can be the
            sum of 1 to normalize the illumination group (which includes condenser,
            minicondenser, and objective lenses) and 2 to normalize the projection group (which includes objective and projector
            lenses) in a separate call.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportColumnOrGunValve</TD>
          <TD>Reports 0 or 1 if column/gun valve is closed or open on FEG scopes, or if
            filament on JEOL is clearly off or on.&nbsp; Reports -1 if the filament current
            is inconsistent with the beam switch state.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetColumnOrGunValve #</TD>
          <TD>Closes column/gun valve on FEG scope or turn off filament on JEOL if <b>#</b> is 0; open valve or turn on filament if <b>#</b> is 1.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportFilamentCurrent</TD>
          <TD>Reports the filament current on a non-FEG JEOL scope.&nbsp; The value is between
              0 and 100 unless the property 'FilamentCurrentScale' is set with a scaling
              other than 100.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetFilamentCurrent #</TD>
          <TD>Sets the filament current on a non-FEG JEOL to <b>#</b>, in the same units as&nbsp;
              'ReportFilamentCurrent'.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportFEGEmissionState</TD>
          <TD>Reports whether the FEG emission is on (non-zero) or off (0), on JEOL's only.&nbsp;
            Command added in 3.9, 5/10/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetFEGEmissionState #</TD>
          <TD>Turns the FEG emission off (for a 0 value) or one (for a non-zero value), on
            JEOL's only.&nbsp; This should be used only for a cold FEG.&nbsp; Command added
            in 3.9, 5/10/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ScreenUp</TD>
          <TD>Raises the main screen</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ScreenDown</TD>
          <TD>Lowers the main screen</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportScreen</TD>
          <TD>Reports if screen is up or down; <I>reportedValue1</I> is set to 0 or 1, respectively.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportScreenCurrent</TD>
          <TD>Reports the unsmoothed screen current in nA.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportLens name</TD>
          <TD>For a Hitachi or JEOL scope, reports the lens value by its abbreviated <b>name</b>.&nbsp;
            For JEOL, allowed <b>name</b>s are 'CL1', 'CL2', 'OM2', 'IL1', 'IL2', 'IL3', 'PL1', 'PL2', 'PL3', 'PL4',
            'FLf', 'FLc', 'FLcomp1', 'FLcomp2'.  Value cannot be assigned to a variable at end of command</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportDeflector name</TD>
          <TD>For a Hitachi scope, reports the X and Y values of deflector specified by its
            abbreviated <b>name</b>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetFreeLensControl #L #S</TD>
          <TD>On a JEOL with scripting support for free lens control, turns free lens control
            for the lens given by <b>#L</b> off if <b>#S</b> is 0 and on otherwise.&nbsp;&nbsp; Lens
            numbers are: 0: CL1,&nbsp; 2: CL3,&nbsp; 6: OL Coarse,&nbsp; 7: OL Fine,&nbsp;
            8: OM,&nbsp; I0: IL1,&nbsp; 11: IL2,&nbsp; 12: IL3, 13: IL4,&nbsp; 14: PL1,&nbsp;
            15 or 16: PL2,&nbsp; 19: FL Coarse,&nbsp; 20: FL Fine,&nbsp; 21: FL Ratio </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetLensWithFLC #L #V [#R]</TD>
          <TD>Using free lens control, sets the lens given by <b>#L</b> (see SetFreeLensControl) to
            the value <b>#V</b> between 0 and 1 if the optional <b>#R</b> is 0 or absent, or changes it by
            <b>#V</b> if <b>#R</b> is non-zero.&nbsp; This command probably turns on FLC for that lens.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportLensFLCStatus #L</TD>
          <TD>For the lens given by <b>#L</b> (see SetFreeLensControl), reports whether free lens
            control is on and the value for the lens.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportApertureSize #</TD>
          <TD>For Thermo/FEI scopes only, reports the size for the aperture whose index is <b>#</b>,
            which can be 0, 1, or 3 for Condenser 1, 2, or 3, 2 for Objective, or 4 for Selected Area.&nbsp; The
            reported value can be: the size in microns; 0 if the aperture is retracted; 1 if it is
            moving or not enabled; or the position of a phase plate plus 1 (e.g., 3 for 'Ph P2') for the
             objective aperture.&nbsp; The
             microscope software must be running on Windows 7 or above, the TEM user interface must 
            not be minimized, and the Apertures panel
             must be included on some tab in the Workset area of the TEM user interface.&nbsp; The tab will be switched
            to if that panel is not currently visible.&nbsp; Aperture operations are done with Microsoft 
            'UI Automation', not with Thermo/FEI scripting commands.&nbsp; These operations, and 'ReportSlotStatus',
            will hang FEI-SEMserver.exe on some Windows 7 systems, even though they work when SerialEM is running 
            directly on the scope computer. &nbsp; If this occurs, set the environment variable 
            FEISEMSERVER_AUTOMATION to 0 to prevent any automation-based operations from being 
            attempted.&nbsp; Command added in 4.1, 7-Feb-23.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetApertureSize #I #S</TD>
          <TD>For Thermo/FEI scopes running Windows 10 only, attempts to set the size with <B>#S</B>for the aperture whose index 
            is <b>#I</b>, where indexes and other requirements are as described for 'ReportApertureSize'.&nbsp; The
            value of <B>#S</B> can also be 0 to retract the aperture or 1 to reinsert it without specifying a 
            size.&nbsp; For an objective aperture with phase plates, the size can also be 2 to 7 to specify the phase
            plates in position 1 to 6.&nbsp; Setting a specific aperture size does not work for scopes running under Windows 7 and even for some scopes running Windows 10.&nbsp; Command added in 4.1, 7-Feb-23.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RemoveAperture #</TD>
          <TD>Removes the aperture whose index is the given <b>#</b> (JEOL, Hitachi, and Thermo/FEI scopes 
            as described for 'ReportApertureSize').&nbsp; For JEOL, if the
            property JeolHasExtraApertures is not set, 1 and 2 are the
            condenser and objective apertures, others are 3:HCA, 4:SAA, 5:ENTA, 6:EDS.&nbsp;
            If that property is set (e.g., for CryoARM), indexes are 0:CL1, 1:CL2,
            2:OL(OL Upper), 3:HC(OL Lower), 4:SA, 5:ENT, 6:HX, 7:BF, 8:AUX1,
             9:AUX2, 10:AUX3, 11:AUX4.&nbsp;
            The size and position of the aperture will be recorded before it is removed.&nbsp; For Hitachi, only
             the objective aperture can be removed and <b>#</b> must be 2.&nbsp; For Thermo/FEI scopes, valid 
            indexes are 2 for Objective and 4 for Selected Area.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReInsertAperture #</TD>
          <TD>Replaces the aperture whose index is the given <b>#</b> after it has been removed with
            &#39;RemoveAperture&#39; (JEOL, Hitachi and Thermo/FEI scopes as described for 
            'ReportApertureSize').&nbsp; For JEOL, the aperture of the stored size will be
            inserted and it will be set to the stored position.&nbsp; For Hitachi, only
             the objective aperture can be reinserted and <b>#</b> must be 2.&nbsp; For Thermo/FEI scopes, valid 
            indexes are 2 for Objective and 4 for Selected Area.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">PhasePlateToNextPos</TD>
          <TD>Moves phase plate to next position.&nbsp; Works on JEOL and Thermo/FEI scopes, but for
            Thermo/FEI scopes it requires server version 6.13 and a license for advanced scripting.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportPhasePlatePos</TD>
          <TD>Reports the current phase plate position number, numbered from 1 (Thermo/FEI scopes only)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportVacuumGauge name</TD>
          <TD>Reports the status and pressure reading from a vacuum gauge identified by the
              given <b>name</b>.&nbsp; For Thermo/FEI scopes, <b>name</b> is of the style accepted in the
              WatchGauge property; status values are 0 for undefined, 1 for underflow, 2 for
              overflow, 3 for invalid, and 4 for valid; pressure is in pascals.&nbsp; For JEOL
              scopes, the command requires a relatively recent version of TemExt; names can be
              Pir0 to Pir9 or Pen0 to Pen9; status values are 0 for not ready, 1 for low, 2
              for high, and 3 for ready; and pressure values are between 0 and 1 (the value
              returned by the scope is divided by 4095).</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportVacuumStatus</TD>
          <TD>For a Thermo/FEI scope, reports the index of the vacuum status in the Microscope panel as 0 for green, 1 for yellow, or 2 for red.&nbsp;Command added in 4.1, 12-May-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportHighVoltage</TD>
          <TD>Reports the current value of the high tension in kV.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ManualFilmExposure #</TD>
          <TD>Sets film exposure time in seconds for manual exposures; enter 0 for automatic exposure
            (the default)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ExposeFilm</TD>
          <TD>Takes a film exposure</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SpecialExposeFilm #D [#P] [#N]</TD>
          <TD>Exposes film with special handling: <b>#D</b> specifies a delay in seconds
            after loading the plate; <b>#P</b> specifies a pre-exposure of the specimen
            before exposing the plate, in seconds. <b>#N</b> suppresses dimming of the
            screen if it is nonzero.  This command command does not raise the
            screen if it is down. It requires the adaexp server to be installed.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetupScopeMessage #B [#T] [text]</TD>
          <TD>Sets properties for a message box to be shown on a Thermo/FEI microscope computer
            with the next command.&nbsp; <b>#B</b> specifies the type of buttons: 0 for OK, 1 for OK
            - Cancel, 2 for Yes - No, 3 for Yes - No - Cancel.&nbsp; The optional <b>#T</b> sets the
            time interval between message box displays, or 0 to display it unconditionally
            or -1 just to set the time of display to the current time.&nbsp; The optional
            rest of the line (<b>text</b>) specifies the text inside the message.&nbsp; If you just want
            to specify an interval, enter &#39; 0 interval&#39;; if you just want to specify text
            for a box to be displayed unconditionally, enter &#39;0 0 text&#39;.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ShowMessageOnScope title</TD>
          <TD>Opens a message box on a Thermo/FEI microscope computer with the given <b>title</b>, which
            can include spaces.&nbsp; The box is displayed with the &quot;long operation&quot;
            mechanism described below, so it is possible to have it displayed only after an
            interval has elapsed.&nbsp; If SetupScopeMessage was not used, the default is for
            a box with an OK button, opened unconditionally, with the text &quot;SerialEM
            message&quot;.&nbsp; When the command is finished, <I>reportedValue1</I> is set with 1 if
            the box was displayed or 0 if it was not, and <I>reportedValue2</I> is set with the
            reply from the box: 2 for Yes or OK, 1 for No, 0 for Cancel, or -1 for an error.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportXLensDeflector #D</TD>
          <TD>Reports the X and Y values of a deflector associated with the X lens, where <b>#D</b>
            should be 1 for shift, 2 for tilt, 3 for stigmators.&nbsp; To use X lens
            commands, the adatl module must be registered and the environment variable
            SEM_USE_ADATL must be set to any value on the microscope, and XL mode must be
            turned on in the microscope interface.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetXLensDeflector #D #X #Y</TD>
          <TD>Sets the X and Y values of an X lens deflector, where <b>#D</b> is 1 for shift, 2 for
            tilt, 3 for stigmator.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportXLensFocus</TD>
          <TD>Reports the focus setting of the X lens.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetXLensFocus #</TD>
          <TD>Sets the focus setting of the X lens.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="filter_commands"></A><B>Energy Filter Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetSlitWidth #</TD>
          <TD>Sets energy filter slit width in eV</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetSlitIn [#]</TD>
          <TD>Inserts the slit; or if <b>#</b> is entered, inserts if 1 or retracts if 0</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetEnergyLoss #</TD>
          <TD>Sets the energy loss to the <b>#</b></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChangeEnergyLoss #</TD>
          <TD>Changes the energy loss by the <b>#</b></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportEnergyFilter</TD>
          <TD>Reports the slit width, energy loss, and whether the slit is in or out (the
            latter is placed in <I>reportedValue3</I> as a 1 or 0)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetJeolGIF #</TD>
          <TD>Calls JEOL function to set GIF mode on (if <b>#</b> is nonzero) or off.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportJeolGIF</TD>
          <TD>Calls JEOL function to get whether GIF mode is on.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="loader_vacuum"></A><B>Autoloader,
          Refrigerant, Vacuum, and FEG Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LoadCartridge #</TD>
          <TD>Loads the cartridge from the given slot <b>#</b> (numbered from 1) if there is an
            Thermo/FEI autoloader.&nbsp; With a JEOL autoloader, unloads a cartridge on the stage, if any,
             into sample storage, then loads the cartridge at the given index in the cassette 
            inventory array.&nbsp; The JEOL inventory must be obtained first with 'LongOperation 
            In'.&nbsp; This command starts a long operation.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">UnloadCartridge</TD>
          <TD>If there is a Thermo/FEI or JEOL autoloader, unloads the cartridge.&nbsp; For JEOL,
             an inventory must be obtained first with 'LongOperation In'.&nbsp;  This command 
            starts a long operation</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportSlotStatus #</TD>
          <TD>Reports the status of the autoloader cartridge slot or index given by <b>#</b> (numbered from 1).
            &nbsp; With a Thermo/FEI autoloader, the command takes the slot number and reports a one or two values:
             first -1 for an error, 0 for empty, or 1 for occupied; then possibly a name.&nbsp; The name is
            reported if the
             microscope software is running on Windows 7 or above, the TEM user interface is not minimized, and 
            the 'Autoloader (User)' panel (<em>not</em> the 'Autoloader (Service)' panel)
             is included on some tab in the Workset area of the TEM user interface.&nbsp; The tab will be switched
            to if that panel is not currently visible.&nbsp; Names are obtained from
            the text boxes in the panel with Microsoft 'UI Automation', not with Thermo/FEI scripting 
            commands.&nbsp; See 'ReportApertureSize' if the command hangs on a Windows 7 system.&nbsp; When
             these names are available, a value of 0 for <b>#</b> will retrieve the full list 
            of names from the panel and place them in the persistent 1-D array 'autoloaderInfo'.
            <br />With a JEOL autoloader, a cassette
             inventory must be obtained first with 'LongOperation In'.&nbsp; The command takes 
            the index of the cartridge in the array populated by the 
            inventory.&nbsp; It reports just -1 if there is no information at that index (i.e., index out of 
            range).&nbsp; Otherwise it reports 6 values: the cartridge ID; where it is located (0 for unknown, 1 for
             magazine, 2 for storage, 3 for stage); the slot number in that location; the cartridge type
             (0 for unknown, 1 for regular, 2 for rotating); the angle value (0 for unknown, 1 for 0 degrees, 
            2 for 90 degrees, or 3 for a regular cartridge); and the name.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">FindCartridgeWithID #</TD>
          <TD>For a JEOL autoloader, reports the index in the inventory array of the cartridge whose ID
             is <b>#</b>&nbsp; Values are numbered from 1 and suitable for use in the 'LoadCartridge'.&nbsp; Value 
            may be assigned to a variable after the ID.&nbsp; COmmand added in 4.1, 19-Jan-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AreDewarsFilling</TD>
          <TD>Reports whether any of the dewars in a temperature control system on a Thermo/FEI
            scope are busy
            filling, or whether a SimpleOrigin system is busy filling (<i>reportedValue1</i> is set to 0 or 1).
            &nbsp; Also reports if tanks are being refilled on a JEOL if the interface
            exists for determining that (<i>reportedValue1</i> is set to 1 for stage tank plus 2
            for transfer tank).&nbsp; Value can be assigned to a variable at end of command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">DewarsRemainingTime</TD>
          <TD>Reports the time in seconds remaining until next automatic dewar filling on a Thermo/FEI
            scope or -1 if none is scheduled.&nbsp; On a JEOL with the JeolHasNitrogenClass property set to 2, reports the minimum of the time remaining until either the stage or transfer tank is filled.&nbsp; Alternatively, with a SimpleOrigin filling system,
            reports the seconds left until the next filling, -1 if there are no remaining
            refills, or -2 if the system is not active.&nbsp; Value can be assigned to a variable at end of command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RefrigerantLevel #</TD>
          <TD>Reports the refrigerant level of the dewar given by <b>#</b>.&nbsp; On a Thermo/FEI scope, <b>#</b> can be 1 for autoloader, 2 for
            column, or 3 for liquid helium; on a JEOL scope with a recent enough version of TemExt.dll and with the JeolHasNitrogenClass property set to 2, the fraction of full is reported and <b>#</b> can be 1 for stage tank, 2 for transfer tank, or 0 for the minimum of the two. &nbsp; Value can be assigned to a variable at end of command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SimpleOriginStatus</TD>
          <TD>Reports the number of remaining refills, the minutes until the next refill (or a negative value
            if there are no refills left), whether filling is underway, whether the system is active, and the sensor temperature
            for a SimpleOrigin system.&nbsp; Values can be assigned to variables at end of 
            command.&nbsp; Command added in 3.9, 6/16/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetSimpleOriginActive #</TD>
          <TD>Turns the Simple Origin system off if <b>#</b> is zero or on if it is non-zero.&nbsp; Command added in 4.0, 10/8/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">IsPVPRunning</TD>
          <TD>Reports whether the PVP is running on a Thermo/FEI scope.&nbsp; Value can be assigned
          to a variable at end of command.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">IsFEGFlashingAdvised #</TD>
          <TD>Reports whether flashing of a cold FEG is advisable on a Thermo/FEI scope, where <b>#</b> should be 0 for
            a low-temperature flash and non-zero for a high-temperature flash.  FEG flashing commands are available on Thermo/FEI scopes only if there is a Selectris filter or a property entry 'AdvancedScriptingVersion 4' or higher.&nbsp; Value can be assigned
          to a variable at end of command.&nbsp; Command added in 3.9, 6/12/21.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">ReportFEGBeamCurrent</TD>
          <TD>Reports the beam current of the FEG in nanoamps for a Thermo/FEI scope that 
            can flash the FEG.&nbsp; This command will access the value on the scope every 
            time, not use the value that gets store for up to 5 minutes.&nbsp; Command added 
            in 4.1, 9/20/22.</TD>
        </TR>
          <TD class="scriptcommand">NextFEGFlashHighTemp [#]</TD>
          <TD>Sets the next FEG flashing done with 'LongOperation FF' on a Thermo/FEI scope to be high-temperature,
            unless the option <b>#</b> is 0.&nbsp; A call for a high-temperature flash will fail unless it is
            advisable, so test with' IsFEGFlashingAdvised 1' first.&nbsp; Command added in 3.9, 6/12/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LongOperation op # [op #...]</TD>
          <TD>Starts one or more time-consuming operations: <b>op</b> can be Buffer cycle ('Bu'), Refill
            refrigerant on Thermo/FEI or SimpleOrigin ('Re'), Inventory cassettes ('In') on Thermo/FEI 
            or JEOL, Loader buffer cycle ('Lo'), Unload cartridge ('Un') on Thermo/FEI only, Dark
            reference update for K2 (or K3 with GMS 3.31+) ('Da'), Refill Stage tank ('RS') or Refill Transfer
            tank ('RT') on JEOL, or Flash FEG ('FF') on JEOL or Thermo/FEI.&nbsp; Operations are identified by the first two
            letters of whatever full word you use (case insensitive).&nbsp; 
            <br />&nbsp;&nbsp;&nbsp;&nbsp; Each operation
            except Inventory and Unload cartridge must be followed by an interval in hours (<b>#</b>).&nbsp; If <b>#</b> is &gt;
            0, the operation is done only if the time since the last such operation is
            greater than <b>#</b>; if <b>#</b> is 0, the operation is done unconditionally; if <b>#</b> is -1, it
            simply records the current time as the time of the last operation; if <b>#</b> is &lt; -1,
              it reports the time in hours since the last operation and places it into one of
              the <I>reportedValue</I> variables.&nbsp;&nbsp;
            <br /> &nbsp;&nbsp;&nbsp;&nbsp; The scope operations will occur sequentially
            and be started in &nbsp;the order that they are listed. The dark reference update
            will be done simultaneously with scope operations.&nbsp; If an error occurs in a
            scope operation, other operations will be finished and the error reported at the
            end.&nbsp; Errors other than in refilling refrigerant will cause the script to
            stop.&nbsp; The user
            interface should not hang during long operations, and users will be asked to confirm that they want to
            kill the operation threads if they press STOP or try to exit the program.&nbsp;
            The consequences of killing these threads are uncertain.&nbsp; If a tank
            refilling on a JEOL is included in the operations, a STOP will just stop all
            filling.&nbsp; In order for time
            intervals to be kept track of between runs of the program, the property
            IgnoreShortTermCals must not be set.
            <br />&nbsp;&nbsp;&nbsp;&nbsp; With a JEOL autoloader, the Inventory does three things: fills an internal program array
             with the information about each cartridge, prints a table to the log, and creates a persistent variable 
            <i>autoloaderInfo</i> with the same information in a 2D array.&nbsp; Each line of the 2D array has the
            6 elements described above as reported by 'ReportSlotStatus'.&nbsp; Both this array and the 
            internal program array are maintained with any changes resulting from 'LoadCartridge' and 
            'UnloadCartridge' commands, so it should not be necessary to run a new inventory unless the program is
            restarted or there are external operations with the autoloader.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ManageDewarsAndPumps [#]</TD>
          <TD>Runs the scope management routine configured in the
            <a href="hidd_manage_dewars.htm">Dewar and Vacuum Management</a> dialog. &nbsp;For
            the optional [#], enter -1 to skip the checks that would be most useful immediately before
            acquisition and 1 to do just those checks. &nbsp;For example, the command could be run
            early in the acquisition cycle with a -1 and again just before acquisition with a 1.
          </TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="piezo_commands"></A><B>Piezo Drive Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SelectPiezo #U #Z</TD>
          <TD>Selects a piezo drive for reports or movements, follow with the plugin number <b>#U</b>
            (numbered from 0, enter 0 if there is only one plugin controlling piezos) and
            the piezo number <b>#Z</b> (numbered from 0).</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportPiezoXY</TD>
          <TD>Reports the X and Y position of the currently selected piezo, if there is
              a piezo plugin loaded, or of the piezos on a JEOL stage if not.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportPiezoZ</TD>
          <TD>Reports the Z position, or the position of the only axis for a single-axis
            piezo, of the currently selected piezo</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MovePiezoXY #X #Y [#R]</TD>
          <TD>Sets the X and Y position to <b>#X</b>, <b>#Y</b> for the currently selected piezo, if a
              piezo plugin is loaded, or for the piezos on a JEOL stage if not. If
            <b>#R</b> is non-zero, moves the piezo by <b>#X</b>, <b>#Y</b>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MovePiezoZ #Z [#R]</TD>
          <TD>Sets the Z position, or position of a single-axis piezo, to <b>#Z</b> for the
            currently selected piezo, or if <b>#R</b> is non-zero, moves the
            piezo by <b>#Z</b></TD>
        </TR>
      </TABLE>
      <BR>
      <P><A name="high_level_operations"></A><B>Higher Level Operations and Tasks</B></P>
      <TABLE border="1" cols="2">
        <TR>
          <TD colspan="2"><A name="autoalign"></A><B>Autoalign-Related Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">A or AutoAlign</TD>
          <TD>Aligns buffer A to autoalign buffer.&nbsp; The script is suspended if there is an
            error such as memory allocation or mismatched binnings, but if a maximum shift limit has
            been set with 'LimitNextAutoAlign' and there are no eligible peaks with that distance,
            it will set <i>reportedValue1</i> to -1 instead of 0 rather than stopping the script.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AlignTo buf [#N] [#T] [#P] [#S] [#X] [#Y] [#W] [#B]</TD>
          <TD>Aligns buffer A to given buffer <b>buf</b> (e.g. B or 2). Optionally, enter 1 for <b>#N</b> to
            avoid changing microscope image shift; 1 for <b>#T</b> to prevent trimming of
            dark borders; 1 for <b>#P</b> to force it to analyze for a periodic specimen and erase peaks
             in the FFT or -1 to force it not to do that analysis; and 1 for <b>#S</b> to show the
             cross-correlation or 3 or 5 to show one of the filtered images being correlated.&nbsp; Enter
            expected shifts for <b>[#X]</b> and <b>[#Y]</b>, and set <B>#W</B> with a sigma in pixels for 
            weighting by deviation from the expected shift (all as reported by RealignToItem with debug 
            output 'h'); and <b>#B</b> with 0 for normal padding (borders), -1 for extra-large padding,
             and 1 for small padding.&nbsp; Behaves like 'AutoAlign' on errors.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ClearAlignment [#N]</TD>
          <TD>Clears the alignment shift of the image in buffer A.&nbsp; Optionally, enter 1
            for <b>#N</b> to avoid changing microscope image shift.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LimitNextAutoAlign #</TD>
          <TD>Sets a limit in microns to the amount of shift allowed in the next run of the autoalign function.
            If there are no correlation peaks within that limit, no shift will be imposed.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AlignWithRotation buf #C #R</TD>
          <TD>Finds the best alignment between buffer A and buffer <b>buf</b> including a rotation;
            <b>#C</b> sets the center angle for the rotation search and <b>#R</b> sets the total angular
            range of the search.&nbsp; <i>reportedValue1-3</i> are set with the rotation angle and
            the X and Y shift (after rotation), in the binned pixels of the image.&nbsp; Values can
            be assigned to variables after command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ConicalAlignTo buf #R [#S]</TD>
          <TD>Aligns buffer A to the given buffer <b>buf</b> assuming a specimen rotation given by
            <b>#R</b>. Optionally, enter 1 for <b>#S</b> to show the cross-correlation.
            &nbsp; Behaves like 'AutoAlign' on errors.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportAlignTrimming</TD>
          <TD>Reports the sum of left and right borders and the sum of top and bottom borders
            in the last autoalign for the image in A and for the reference image.&nbsp; The
            numbers are in pixels of the respective images before the additional binning
            applied for correlation, and will thus differ from the binned values reported by
            the autoalign routine.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportAlignShift</TD>
          <TD>Reports the X and Y alignment shift of the current image in A in unbinned pixels
            on image, in nanometers along the image shift axes, and in nanometers on the
            specimen, where the tilt axis is along X.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportISforBufferShift</TD>
          <TD>Reports the image shift that corresponds to the shift stored and displayed
            for the current image in A, in image shift units.&nbsp; These values are the same as the
            ones that would be imposed on the scope typically when introducing such a shift,
            such as by autoaligning or dragging the image with the right mouse.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportShiftDiffFrom #</TD>
          <TD>Reports the difference between the alignment shift of the current image and the
            given value <B>#</B> in microns, as percentage of the value; the cumulative sum of
            differences in microns, and the total sum of shifts in microns. For monitoring
            variability in successive stage movements.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportAccumShift</TD>
          <TD>Reports sum of shifts given by ReportAlignShift or ReportShiftDiffFrom</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ResetAccumShift</TD>
          <TD>Resets the sum of shifts given by ReportAlignShift or ReportShiftDiffFrom to 0 </TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="autofocus"></A><B>Autofocus/Autotuning-Related Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">G or AutoFocus [#M] [#A]</TD>
          <TD>Runs the Autofocus routine; set <b>#M</b> to -2 to measure shift and drift, -1 to just measure defocus without changing,
            or 1 for normal autofocus that changes focus to target; set optional <b>#A</b> to 1
            or 2 to focus with the View area in Low Dose mode, 3 or 4 to focus with the Search area,
             or -1 to focus with the Record area. With&nbsp; &#39;-1 1&#39; or &#39;-1 3&#39;, the measured
            defocus is that of the View or Search area, i.e., not adjusted for View or Search defocus offset;
            with &#39;-1 2&#39; or &#39;-1 4&#39; the measured defocus is adjusted for the offset to give an estimate
            of defocus in the Record area. </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">IncTargetDefocus #</TD>
          <TD>Changes the defocus target by <b>#</b></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetTargetDefocus #</TD>
          <TD>Sets the defocus target to <b>#</b></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CycleTargetDefocus #S #E #N [#C]</TD>
          <TD>Changes the defocus target in <b>#N</b> steps from the starting value in <B>#S</B> to
            the ending value in <b>#E</b> then cycles it back to the starting value.&nbsp; The change 
            depends only on the current target defocus; nothing is kept track of 
          between invocations of this command.&nbsp; If the target is outside the given range,
           the first call will set it to the nearest end of the range.&nbsp; If the optional <B>#C</B> is
          nonzero, the microscope defocus wll be changed by the change in target.&nbsp; Command added in 4.1, 9/4/22.
            </TD> 
        </TR>
        <TR>
          <TD class="scriptcommand">ReportAutofocusOffset</TD>
          <TD>Reports the current value of the defocus offset used for autofocusing</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetAutofocusOffset #</TD>
          <TD>Sets the defocus offset for autofocusing to the given <b>#</b>.&nbsp; The first time
            it is set, the current value is saved, and it will be restored automatically
            when the script ends.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">BeamTiltDirection #</TD>
          <TD>Sets beam tilt direction for autofocusing to <b>#</b> (a value from 0 to 3)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OppositeAutofocus [#]</TD>
          <TD>In low dose mode, runs autofocus in area on opposite side of Record from the defined
            Focus area; if optional <b>#</b> is -1, just measure defocus without changing.&nbsp;
            Not available if 'Balance Shifts' is on.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">FocusChangeLimits # #</TD>
          <TD>Sets limits on the focus change during autofocus runs for the remainder of the
            script; follow with a negative and a positive number for the limits in microns.&nbsp;
            When an autofocus run exceeds a limit, it will abort and return to the starting
            defocus.&nbsp; Enter with '0 0' to cancel these limits.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AbsoluteFocusLimits # #</TD>
          <TD>Sets limits on the absolute focus reached during autofocus runs.&nbsp; Follow
            with a lower and a upper limit as given by ReportAbsoluteFocus, or '0 0' to cancel
            these limits.&nbsp; Autofocus will abort when a limit is exceeded.&nbsp; These
            values will override the absolute limits that can be specified through the
            Focus menu, but a '0 0' will not prevent those limits from being applied.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportFocusDrift</TD>
          <TD>Reports the drift estimate from the last autofocus, if available</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportAutofocus</TD>
          <TD>Reports measured defocus from last autofocus, or whether it failed.&nbsp; The
            defocus is placed into <I>reportedValue1</I> and a failure code in <I>reportedValue2</I> (1
            for inconsistent focus, 2 for absolute limits exceeded, 3 for focus change
            limits exceeded, or -1 for other error).</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportTargetDefocus</TD>
          <TD>Reports the defocus target</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">FixAstigmatismByCTF [#M] [#L]&nbsp; [#S]</TD>
          <TD>Measures astigmatism by CTF fitting, outputs the stigmation change to the log, and corrects
            for those values (or just measures, if the optional <b>#M</b> is nonzero).&nbsp; Image
            shift is set to 0 unless the optional <b>#L</b> is non-zero.&nbsp; Set optional
            <b>#S</b> non-zero to suppress the message box on errors that occur
            after starting to take images.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">FixComaByCtf&nbsp; [#M] [#L] [#F]&nbsp; [#S]</TD>
          <TD>Measures beam-tilt misalignment by CTF fitting, outputs beam tilt change needed to the log,
            and corrects for it (or just measures, if the optional <b>#M</b> is nonzero).&nbsp; Image
            shift is set to 0 unless the optional <b>#L</b> is non-zero.&nbsp; The user setting for
            whether to do a full array of images is used unless optional <b>#F</b> is 0 for 5
            images or &gt; 0 for a full array. Set optional <b>#S</b> non-zero to
            suppress the message box on errors that occur after starting to take images.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CalibrateComaVsIS [#D] [#R] [#F]</TD>
          <TD>Calibrates the beam tilt needed to fix coma as a function of image shift.&nbsp The maximum 
            distance in microns and rotation angle set in the <A HREF="hidd_coma_vs_is_cal.htm">Coma vs. Image
               Shift Calibration dialog</A> will be used, unless the optional <b>#D</b> is entered with the
            maximum distance, and <b>#R</b> is entered with the rotation angle.  The choice in the dialog for whether to 
            do a full array of positions for the coma measurements will also be used, unless <b>#F</b> is entered 
            with -1 to use the same choice as for fixing coma, 0 not to use a full array, or 1 to use a full 
            array.&nbsp; (Enter 0 for the distance to modify just the rotation angle; enter -999 for 
            rotation angle to set the full array option.)&nbsp Command added in 4.1, 15-Dec-22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CorrectAstigmatism [#]</TD>
          <TD>Measures astigmatism by beam-tilt-induced displacements (BTID), outputs the stigmator
            values to the log, and corrects for those values
            (or do not correct, if the optional <b>#</b> is -1)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CorrectComa [#]</TD>
          <TD>Measures beam-tilt misalignment by beam-tilt-induced displacements (BTID), outputs the
            estimated beam tilt to the log, and corrects to
            bring beam tilt to zero. If the optional <b>#</b> is -1, it will simply measure the
            misalignment once and report it without correcting it.&nbsp; If the <b>#</b> is 1, it
            will do another iteration of estimating beam tilt and average the result with
            the previous iterations.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportStigmatorNeeded</TD>
          <TD>Reports the needed stigmator change in X and Y that was measured only, but not
            imposed, after running &#39;FixAstigmatismByCTF 1&#39; or &#39;CorrectAstigmatism 1&#39;.&nbsp;
            The last run of either astigmatism routine must be by one of these commands;
            otherwise it will return 0 and 0.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportComaTiltNeeded</TD>
          <TD>Reports the needed change in X and Y beam tilt that was measured only, but not
            imposed, after running &#39;FixComaByCTF 1&#39;.&nbsp; If the last run of the coma
            routine applied rather than just measured the tilt, it will return 0 and 0.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ZemlinTableau #T [#S] [#C]</TD>
          <TD>Makes an array of 8 FFTs of beam-tilted images around a central FFT without
            beam tilt.&nbsp; The first value <b>#T</b> specifies the beam tilt to use, in
            milliradians on a Thermo/FEI scope or percent of full scale on other scopes.&nbsp; The
            optional entry <b>#S</b> sets the cropped size of each FFT in the array (default 340)
            and <b>#C</b> sets the number of pixels to crop (default 170).&nbsp; See
            <a href="menu_focus.htm#hid_focus_zemlintableau">Beam-Tilted FFT Array</a> for other details.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportComaVsISmatrix</TD>
          <TD>Reports the matrix computed from the
            <a href="menu_focus.htm#hid_focustuning_comavs">Coma vs. Image Shift</a>
            calibration.&nbsp; The 4 values are xpx, xpy, ypx, and ypy, where the change in
            beam tilt for a given image shift (in IS units) is given by<br />
&nbsp; BTx = ISx * xpx + ISy * xpy<br />
&nbsp; BTy = ISx * ypx + ISy * ypy</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AdjustBeamTiltforIS</TD>
          <TD>&nbsp;Adjusts beam tilt to compensate for the current image shift (as
            displayed in the Scope Status panel), provided that the
            <a href="menu_focus.htm#hid_focustuning_comavs">Coma vs. Image Shift</a>
            calibration has been done.&nbsp; This command saves the current beam tilt, if it
            has not been saved before in the script, and it will be automatically restored
            when the script exits.&nbsp; Astigmatism will also be adjusted if that calibration
             includes an astigmatism estimate, unless the property 'SkipAstigAdjustmentForIS' is set.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CBAstigComa #T #C #A [#L] [#S]</TD>
          <TD>FOR TESTING: Runs the routine for astigmatism and coma by CTF fitting.&nbsp; Set <b>#T</b>
            0 for astigmatism, 1 for coma with 5 images, 2 for coma with full array; <b>#C</b> 0/1 to measure/calibrate; <b>#A</b> 0 to apply a
            measurement, 1 to just measure, 2 to measure from images in the buffers; <b>#L</b>
            non-zero to leave image shift as it is; <b>#S</b> non-zero to suppress
            the message box on errors that occur after starting to take images.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="low_dose"></A><B>Low Dose Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">GoToLowDoseArea area</TD>
          <TD>Switches to the low dose area given by <b>area</b>, which must be one of V, F, T, R,
            or S. This will not work if the screen is down.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetLowDoseMode #</TD>
          <TD>Turns low dose mode on for <b>#</b> nonzero or off for <b>#</b> 0; the previous state of low
            dose is saved in <I>reportedValue1</I> as a 0 or 1.&nbsp; This value can be assigned
            to a variable at the end of the command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportLowDose</TD>
          <TD>Reports whether low dose is on or not and the current area, if it is defined.&nbsp;
            The number of the area (0 for V, etc.) is placed in <I>reportedValue2</I>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">UpdateLowDoseParams area [#K]</TD>
          <TD>Activates continuous update of the area given by <b>area</b>; whenever necessary to
              reflect changes made by the script to any of the parameters that are recorded
              when &#39;Continuous update&#39; is on the Low Dose panel.&nbsp; Specifically, the area
              is updated to the current parameters if it is the current area when this command
              is given (thus recording changes made before this entry), and also updated
              thereafter whenever one of the commands are used to change a relevant parameter.&nbsp;
              Set the optional <b>#K</b> non-zero to keep the parameter changes when the script ends;
              otherwise the parameters saved when this command is first given will be restored
              on script end.&nbsp; <b>area</b> must be one of V, F, T, R, or S.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CopyLowDoseArea from area</TD>
          <TD>Copies parameters of low dose area <b>from</b> to the given <b>area</b>, both of which must be 
            one of V, F, T, R, or S.&nbsp; The copying is the same as when one of the copy buttons is used
             in the Low Dose control panel.&nbsp; Low Dose must be on, <b>area</b> cannot be the same as
             <b>from</b>, and you cannot copy to the current area.&nbsp; The current area need not be set 
            yet, i.e., if Low Dose has just been turned on.&nbsp;  Command added in 4.1, 12-May-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetLDAddedBeamButton [#]</TD>
          <TD>Turns the &#39;Set&#39; button in the Low Dose panel for recording additional beam shift
              on, or turns it off if the optional <b>#</b> is 0.&nbsp; The original state of the
              button will be restored on script end.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RestoreLowDoseParams [area]</TD>
          <TD>Restores parameters saved for the given <b>area</b> when &#39;UpdateLowDoseParams&#39; was
              entered for this area.&nbsp; Omit <b>area</b> to restore parameters for all areas,
              including ones marked to be kept when the script ends.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetLDContinuousUpdate #</TD>
          <TD>Turns &quot;Continuous update&quot; in the Low Dose panel on if <b>#</b> is
            non-zero or off if <b>#</b> is 0.&nbsp; Continuous update is not active while any script
            is running.&nbsp; If it is on, microscope parameter changes will have no effect on
               Low Dose settings during a script, but when the script ends, changes will update
               the current Low Dose area.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportAxisPosition area</TD>
          <TD>Reports the axis position in microns and the rotation of the inter-area axis,
            for the given <b>area</b>: F (Focus) or T (Trial).&nbsp;The offset from center
            of the camera acquisition subarea is also reported in unbinned pixels (in
            left-handed camera coordinates).</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetAxisPosition area #D [#R]</TD>
          <TD>Modifies the axis position, and optionally the rotation of the inter-area
            axis, for the Focus and/or Trial area.&nbsp; Follow with 'F' or 'T' to specify the
            <b>area</b> (both will be changed if Focus and Trial settings are being kept
            identical); with <b>#D</b>, the distance in microns; and optionally with <b>#R</b>, a rotation
            angle.&nbsp; If an angle is set, the option to apply the angle will be turned on
            in the Low Dose control panel.&nbsp; Low dose mode must be on to use this
            command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CurrentSettingsToLDArea area</TD>
          <TD>Sets the parameters for low dose area given by <b>area</b>, which must be one of V, F, T, R, or S,
              from the current microscope settings.&nbsp; It must be run while not in low dose
              mode and after adjusting to scope state to the desired settings for the area.&nbsp;
              It clears out the parameters for the area, enters low dose mode, and goes to the
              area so that it is assigned the current state.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="task_commands"></A><B>Task-Related Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ResetImageShift [#B] [#R]</TD>
          <TD>Resets image shift and move stage to compensate.&nbsp; Follow with a 1 or 2 for
            the optional <b>#B</b> to move the stage so as to retain or impose backlash, even if the user has not
            selected the option to do so in the Image Alignment &amp; Focus control panel.&nbsp;
            With a value of 2, it will relax from the stage movement by the amount given in
            the optional <b>#R</b>, or by the value of the StageRelaxation property (0.025 by
            default).</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ResetShiftIfAbove #</TD>
          <TD>Resets image shift and realign image if image shift is greater than the given <b>#</b>
            in microns</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">Eucentricity [#W] [#V]</TD>
          <TD>Refines eucentricity, or if optional <b>#W</b> is entered, do rough eucentricity only
            (1), refine only (2), both steps (3), refine and realign (6), or Eucentricity by Focus (-1).&nbsp; In
            the latter case, whether View is used to measure defocus in Low Dose mode depends
            on the setting in the <a href="hidd_z_by_g_setup.htm">Eucentricity by Focus Setup dialog</a>,
          unless <b>#W</b> is entered as a 0 to use Focus or non-zero to use View.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LimitNextRoughEucen #</TD>
          <TD>Limit the Z change in the next rough eucentricity run to <b>#</b>, stopping the procedure
            without changing Z when it would exceed that amount.&nbsp; Command added in 4.0, 1/24/22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportRoughEucenFailed</TD>
          <TD>Sets <i>reportedValue1</i> to 1 if the last run of rough eucentricity failed because the
            Z change would have exceeded the limit set with 'LimitNextRoughEucen'.&nbsp; Command added in 4.0, 1/24/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportLastAxisOffset</TD>
          <TD>Reports the total lateral offset of the tilt axis estimated from the last Refine
            Eucentricity run; aborts the script if no offset is available.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetTiltAxisOffset #</TD>
          <TD>Sets the lateral offset of the tilt axis to <b>#</b>.&nbsp; Command added in 3.9, 11/10/20.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">WalkUpTo #</TD>
          <TD>Tilts up to given angle in steps and track image position</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReverseTilt [#]</TD>
          <TD>Works out backlash and realign image after reversing tilt direction; enter
            optional 1 or -1 to specify a specific direction for further tilts</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RefineZLP [#I] [#T]</TD>
          <TD>Reports time of day and runs Refine Zero Loss Peak procedure.&nbsp; If the
            optional <b>#I</b> is entered with an interval in minutes, the procedure is not run if
            the time since the last run is less than that interval.&nbsp; If the
            optional <b>#T</b> has a positive value, the procedure is run with Trial in Low Dose; if 
            it has a negative value, the procedure is run with Preview; otherwise it is governed by
            the selection in the<a href="hidd_filtercontrol.htm"> Filter Control</a> panel.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AutocenterBeam [#M] [#P]</TD>
          <TD>Starts the Beam Autocenter routine.&nbsp; The optional <b>#M</b> sets a maximum
            beam shift in microns; the beam will not be moved if the shift determined
            from the circle fit to the beam edges exceeds this value.&nbsp; If the optional [#P] is
            set to 0 or a positive number, autocentering will be done using View with the specified
             percentage reduction in beam size; this may be useful for finding a badly mis-centered
             beam.&nbsp; The program must already be in Low Dose mode to use this option.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CookSpecimen</TD>
          <TD>Runs the Specimen Cooker routine</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">WaitForDose #D [#R]</TD>
          <TD>Starts accumulating dose and wait until it reaches the given <b>#D</b> in electrons per
            square Angstrom. Enter the optional <b>#R</b> to set how many times it reports
            progress while waiting (default is 10). Be sure that the screen is down and, if
            in low dose, that the beam is unblanked.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CenterBeamFromImage [#C] [#M]</TD>
          <TD>Centers beam using the existing image in the active buffer by detecting the
            edges of the beam, or from the centroid of the image intensities if <b>#C</b> is
            nonzero. In the latter case the beam should be completely within the camera
            field.&nbsp; The optional <b>#M</b> sets a maximum beam shift in microns; the beam will
            not be moved if the shift determined from the circle fit to the beam edges
            exceeds this value.&nbsp; Sets <I>reportedValue1</I> to -1 if no beam edges are detected,
            5 if there is a failure fitting edges to a circle, 6 if beam was not moved because
            the radius was too high, and 7 if the beam was not moved because the fitting error was too high.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MeasureBeamSize [buf]</TD>
          <TD>Measures the beam diameter by detecting its edges in the image in buffer A, or in
            the buffer given by the optional <b>buf</b>.&nbsp; The value is reported in microns.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">MeasureBeamPosition [buf]</TD>
          <TD>Measures the beam position by detecting its edges in the image in buffer A, or in
            the buffer given by the optional <b>buf</b>.&nbsp; Reports the X and Y offset of the position 
            from image center in pixels (Y inverted), the number of quadrant with points found, and the 
            fitting error.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MeasureBeamEllipse [buf]</TD>
          <TD>Reports the offset from the center (with Y inverted), the long and shirt axis lengths, and the angle
            of the long axis (counterclockwise from the X axis) for an elliptical beam, using the 
            centroid and second moments of image pixels above a threshold.&nbsp; The beam should be completely
            within the image for the measurement to be valid.&nbsp; Command added in 4.1, 7/6/22.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">BacklashAdjust</TD>
          <TD>Runs the routine to adjust for backlash by taking an image, applying the current montaging
             backlash, and aligning a new image to the original image.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">DriftWaitTask [#R] [unit] [#M] [#I] [#G] [type] [#C] [#E] [#B]</TD>
          <TD>Runs the Wait for Drift task using parameters set in the
            <a href="hidd_driftwaitsetup.htm">Wait for Drift Setup dialog</a> if there are no
              optional entries.&nbsp; Any optional entry that is not zero overrides the
              parameter set in the dialog; enter a 0 to use the dialog setting for any
              parameter.&nbsp; The parameters are: <b>#R</b> for target drift rate; <b>unit</b> 'nm' or 'A'; <b>#M</b> for maximum time to wait in sec; <b>#I</b> for
              interval over which drift is measured in sec; <b>#G</b> 1
              to generate an error when maximum time reached or -1 not to; <b>type</b> for type of
              measurement (T for Trial, F for Focus, A for
              within autofocus runs, or 0 for dialog setting); <b>#C</b> to correct drift with image
              shift; <b>#E</b> for Trial exposure, <b>#B</b> for Trial binning.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">GetWaitTaskDrift</TD>
          <TD>Places the final drift measurement from the last Wait for Drift task into
              <I>reportedValue1</I> and a non-zero number if the task failed in <I>reportedValue2</I>.
              Values can be assigned to variables after command.
              </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ConditionPhasePlate [#]</TD>
          <TD>Runs the routine to condition a phase plate using parameters set in the
            <a href="hidd_vpp_expose_setup.htm">Phase Plate Conditioning Setup dialog.</a>
            &nbsp; If the optional <b>#</b> is non-zero, it will move to the next phase plate position
            first, provided this is supported by scripting on the microscope.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MultipleRecords [#N] [#C] [#O] [#D] [#S] [#E] [#F] [#B] [#H] [#R2] [#N2] [#O2]</TD>
          <TD>Acquires multiple Record images around the periphery of a hole and/or in multiple holes, using image
            shift to move to each off-center position.&nbsp; The parameters set in the
            <a href="hidd_multi_shot_setup.htm">Multiple Record Setup dialog</a> control the
            operation of this task, but any subset of them can be overridden by entering
            optional parameters here.&nbsp; The value in the dialog is used if -9 is entered
            for the corresponding parameter here, or if the optional entries end before the
            given parameter.&nbsp; The parameters are: <br /> 1) <b>#N</b> for number of
            shots around the center<br /> 2) <b>#C</b> -1 or 1 for a shot in the center before or after the
            off-center shots, or 0 for none<br /> 3) <b>#O</b> for the distance from center of the off-center shots,
            in microns<br /> 4) <b>#D</b> for the extra delay after the image shift, in seconds<br /> 5) <b>#S</b> 1 to
            save a Record image at each position or 0 not to<br /> 6) <b>#E</b> 1 or 2 to use early
            return for a K2/K3 camera after the last shot or after all shots, or 3 for early return on all shots
            with a full sum returned on the first one<br /> 7) <b>#F</b> for the
            number of frames in the early returned image (or -1 for all, 0 for none)<br /> 8) <b>#B</b> 1 to
            adjust beam tilt to compensate for image shift or 0 not to<br /> 9) <b>#H</b> the sum of 1 to do
            shots around a center (within a hole) and 2 to do shots in multiple holes or
            specified positions.&nbsp; (In addition, the sum in <b>#H</b> can include 4 for testing
            image locations or 8 for testing the coma correction, plus 16 to force it to use a regular 
            array of holes or 32 to force it to use custom holes.)<br /> 10)
             <b>#R2</b> greater than 0 to do a second ring of positions<br /> 11) <b>#N2</b>
            with the number of positions in the second ring <br /> 12) <b>#O2</b> for the distance from center
            of the second ring
             <br /> For example,
            &#39;MultipleRecords -9 -9 -9 4. 1&#39; will use an extra delay of 4 seconds and save
            Records, but take all other parameters from the dialog.&nbsp; When the operation starts successfully,
            <i>ReportedValue1</i> is set to the total number of Record images to be taken.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">TestNextMultiShot #</TD>
          <TD>Sets a variable so that the next MultipleRecords command will test image
            location by acquiring a Record or montage at each location (if <b>#</b> is 1) or by
            measuring coma at each location (if <b>#</b> is 2).&nbsp; See
            <a href="hidd_multi_shot_setup.htm#testing">Testing Image Location and Coma Adjustment</a> for details on
            this testing.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">StageToLastMultiHole</TD>
          <TD>Moves the stage to the center of the last hole position acquired with
              MultipleRecords.&nbsp; This command can be used to position over a hole for
              occasional post-acquisition tasks when using a hole pattern centered on the
              support film.&nbsp; There is no backlash correction.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ImageShiftToLastMultiHole</TD>
          <TD>Changes image shift by the offset to the last hole position acquired with
              MultipleRecords.&nbsp; This command combined with &#39;ResetImageShift&#39; will be more
              accurate than &#39;StageToLastMultiHole&#39; if backlash correction is needed and
              enabled in the Image Alignment &amp; Focus control panel.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RotateMultiShotPattern #A [#C]</TD>
          <TD>Rotates the hole positions in the pattern set up in the
            <a href="hidd_multi_shot_setup.htm">Multiple Record Setup dialog</a> by angle
            <b>#A</b>. &nbsp;Set optional <b>#C</b> non-zero to rotate the custom pattern instead
            of the regular one. &nbsp;Generates an error if the selected pattern is not defined
            or the needed transformation is not available.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OpenMultiShotFiles name</TD>
          <TD>Opens a set of files, one for each of the positions specified in the current settings of
            the <a href="hidd_multi_shot_setup.htm">Multiple Record Setup dialog</a> (which need not be 
            open).&nbsp; The file names will be based on <b>name</b> (which can include a full path), with
            each name being <i>rootname_ShotPosition.ext</i>, where <i>rootname</i> and <i>ext</i> are the
            root and extension of <b>name</b>, amd <i>ShotPosition</i> is the same text used to label frame 
            files from different positions.&nbsp; After this command is given, and until the files are
            closed with the next command, the Multiple Record routine 
            will save the image at each position into its respective file, regardless of whether saving is
            selected in the dialog.&nbsp; This command is intended to allow parallel tilt series but is
            probably not useful until a more sophisticated alignment procedure is added.&nbsp; Command added in 4.1, 4/23/22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CloseMultiShotFiles</TD>
          <TD>Closes the set of files opened with 'OpenMultiShotFiles' and returns the Multiple Record
            routine to its normal operation of saving into a single file if at all.&nbsp; Command added in 4.1, 4/23/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetCustomHoleShifts xvar yvar [#M] [#T]</TD>
          <TD>Defines the custom hole shifts for multiple Records with the image shift 
            values in two array variables, <b>xvar</b> and <B>yvar</B>, with the X and Y components,
             respectively.&nbsp; The optional entries <b>#M</b> and <b>#T</b> can specify the 
            magnification index and tilt angle at which the image shift values apply (enter
            0 for <b>#M</b> to specify a tilt angle without changing the magnification index).&nbsp; 
            Command added in 4.1, 5-Sept-2.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetCustomHoleDefocus var</TD>
          <TD>Defines a defocus offset to be applied for each custom hole position to be 
            acquired with the Multiple Records routine.&nbsp; If there are fewer defocus 
            values than hole positions, the offset will be zero for the remaining positions.&nbsp; 
            Command added in 4.1, 5-Sept-22.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">SetRegularHoleVectors #X1 #Y1 #X2 #Y2 [#M] [#T]</TD>
          <TD>Defines the image shifts for multiple Records taken with a regular pattern with 
            <b>#X1</b>, <b>#Y1</b> specifying the X and Y components of image shift between adjacent holes
             in one direction and <b>#X2</b>, <b>#Y2</b> specifying the shift in the orthogonal 
            direction.&nbsp; The optional entries <b>#M</b> and <b>#T</b> can specify the 
            magnification index and tilt angle at which the image shift values apply (enter
            0 for <b>#M</b> to specify a tilt angle without changing the magnification index).&nbsp; 
            Command added in 4.1, 1-Dec-22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CalibrateImageShift [#]</TD>
          <TD>Calibrates image shift at the current mag. Do the calibration from scratch if
            the optional <b>#</b> is nonzero.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ShiftCalSkipLensNorm [#]</TD>
          <TD>Keeps projector lens normalization from being done before the next image or
            stage shift calibration provided that normalization was last done at the current
            magnification.&nbsp; Set the optional <b>#</b> to 0 to NOT skip normalization.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CalibrateHighFocusIS #D [#C]</TD>
          <TD>Runs the <A href="menu_calibration.htm#hid_imagestageshift_high">High-Defocus 
            Image Shift Calibration</A> routine and stores the result with the
            defocus given by <b>#D</b>&nbsp; Set the optional <b>#C</b> to an amount to change defocus
            before starting; it is not restored afterwards.&nbsp; Command added in 4.1, 4-Jan-23.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">FindPixelSize</TD>
          <TD>Runs the routine to find the pixel size in an image of a cross-line grating.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AutoCorrPeakVectors buf #S [#T] [#D]</TD>
          <TD>Analyzes the autocorrelation of the image in buffer <B>buf</B> with the pixel size
             routine and reports the average spacing between periodic features and the X and Y components
            of the vectors along the first then second axis.&nbsp; These values are in pixels of the image,
            not unbinned pixels.&nbsp; The entry <b>#T</b> should 
            contain the expected spacing, which can be a rough value because it used only to determine
            the amount of image binning and does not affect the search for peaks.&nbsp; The optional <b>#T</b>
            can be set non-zero to skip trimming of dark borders, and <b>#D</b> can be set non-zero to skip
             displaying the autocorrelation.&nbsp; Command added in 4.0, 11/1/21.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">QuickFlyback set #E</TD>
          <TD>Runs the camera timing calibration routine in quick flyback mode for a Thermo/FEI
            STEM camera, where 'set' specifies the camera parameter set and must be V, F,
            T, R, or P, and <b>#E</b> is the exposure time to use.&nbsp; The routine will not ask for
            confirmation before saving the resulting flyback time and startup delay in the
            master list of flyback times.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ShiftImageForDrift #X #Y #U</TD>
          <TD>Applys image shift during the next exposure to compensate for a drift in X and Y
            given by <b>#X</b> and <b>#Y</b>; <b>#U</b> should be 0 if the drift is in unbinned pixels/sec and 1
            if it is in nm/sec</TD>
        </TR>
        </TABLE>
        <P><A name="navigator"></A><B>Navigator</B></P>
        <TABLE border="1" cols="2">
        <TR>
          <TD colspan="2"><A name="navigatorlist"></A><B>Navigator Window and List Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportIfNavOpen</TD>
          <TD>Reports whether the Navigator is open; sets <i>reportedValue1</i> to 1 if it is open
            and 2 if there is a Navigator file defined.&nbsp; Virtually all of the commands
            described in this section will generate an error if the Navigator is not open.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">OpenNavigator [name]</TD>
          <TD>Opens the Navigator window, which must not already be open.&nbsp; If the optional
             <b>name</b> is entered, this file is set as the Navigator file to save to.
            &nbsp; Command added in 3.9, 11/26/20.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CloseNavigator</TD>
          <TD>Closes the Navigator window, which must be open.&nbsp; If there are unsaved changes
            and the <A HREF="menu_navigator.htm#hid_navigator_autosave">Autosave Nav File</A>
            option is not on, the user will be asked whether to save.
            &nbsp; Command added in 3.9, 11/26/20.
          </TD>
        </TR>
         <TR>
          <TD class="scriptcommand">SaveNavigator [name]</TD>
          <TD>If the optional <b>name</b> is not present, saves the Navigator data to the current file
             or opens a file chooser for saving if a file is not yet defined.&nbsp; If a <b>name</b> is
             entered, it saves to this file instead.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReadNavFile name</TD>
          <TD>Reads in the Navigator file with the given <b>name</b>, opening the Navigator if
            necessary.&nbsp; If there are unsaved changes in the Navigator, the user is
            asked whether to save those first as usual.&nbsp; A cancel from that, or an
            error opening, reading, or processing the file will generate an error message.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MergeNavFile name</TD>
          <TD>Merges the Navigator file with the given <b>name</b> into the current items in the
            Navigator, which must be open.&nbsp; An error opening, reading, or processing the
            file will generate an error message.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportNavFile [#]</TD>
          <TD>Reports the name of current Navigator file or generates an error if the
            Navigator is not open with a file defined.&nbsp; Sets the full name into
            <i>reportedValue1</i>; or if the optional <b>#</b> is entered with a 1, sets the root of the
            filename including the path in <i>reportedValue1</i>, the extension (including the dot) in
            <i>reportedValue2</i>, the path only in <i>reportedValue3</i>, and the rest of the rootname
            in <i>reportedValue4</i>.&nbsp; No optional assignment to variable.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportNumTableItems</TD>
          <TD>Reports the number of items in the Navigator table.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">NavIndexWithLabel text</TD>
          <TD>Reports the index in the Navigator table of the item whose label is the given
            <b>text</b>, or 0 if there is none.&nbsp; Sets <i>reportedValue1</i> with the index.&nbsp;
            The string can contain spaces and the comparison is not case-sensitive.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">NavIndexWithNote text</TD>
          <TD>Reports the Navigator index of the item whose note is the given <b>text</b>,
            otherwise just like ItemIndexWithLabel.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">NavIndexItemDrawnOn #</TD>
          <TD>Reports the Navigator index of the map that the specified item was drawn on,
              or 0 if it was not drawn on a map.&nbsp; For <b>#</b>, enter 0 for
              the current item or the item being acquired; an index greater than 0 for the item with
              that index in the table; or a value less than 0 to count back from the end of the
              table, where -1 is the last item.</TD>
        </TR>
                <TR>
          <TD class="scriptcommand">SetNavRegistration #</TD>
          <TD>Sets the current registration of the Navigator window to the given number.&nbsp;
            No item registration values are changed.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="navigatoritems"></A><B>Item and Group Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MoveToNavItem [#]</TD>
          <TD>Moves the stage to a Navigator item; if no <b>#</b> is entered, move to the current
            Navigator item or to the item that this script is being run on, otherwise move
            to the item whose index in the table is <b>#</b> (numbered from 1)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">UpdateItemZ [#]</TD>
          <TD>Assigns current stage Z value to the current Navigator item, or the item that this
            script is being run on, or the item whose index in the table is given by the optional <b>#</b>
            (numbered from 1).</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">UpdateGroupZ [#]</TD>
          <TD>Assigns current stage Z value to the whole group of either the current Navigator
            item, the item that this script is being run on, or the next item to be acquired
            if the optional [#] is non-zero.&nbsp; The item must have a
            non-zero group ID.&nbsp; Acquisition must be running to assign to the next
            group.&nbsp; If the group would show up on more than one line with
            'Collapse groups' on, items on all lines will be updated, unlike with the
            'Update Z' button.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LoadNavMap [buf]</TD>
          <TD>Loads the current Navigator item, or the item this script is being run on, if
            it is a map.&nbsp; If the optional <b>buf</b> is entered, loads to that buffer instead
             of the read buffer.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LoadOtherMap # [buf]</TD>
          <TD>Loads the Navigator item whose index in the table is <b>#</b>, if it is a map; or if
            <b>#</b> is negative, loads the item that many items from the end of the table, i.e.,
            -1 loads on the last item.&nbsp; If the optional <b>buf</b> is entered, loads to that
             buffer instead of the read buffer.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportNavItem</TD>
          <TD>Reports in the log the index, stage X, Y, Z, label, and note string for the current
            Navigator item, or the item this script is being run on. The index and stage
            coordinates are placed in <i>reportedValue</i> variables as usual, and the item type
            is placed in <i>reportedValue5</i>; (0 for point, 1 for polygon, 2 for map). In
            addition, these named variables are set:
            <br> &nbsp; <i>navLabel</i> and <i>navNote</i> are set with the label and note
            strings,
            <br> &nbsp; <i>navIndex</i> and <i>navIntLabel</i> are set with integer values
            of the item index (numbered from 1) and of the label (up to any non-numeric characters),
            <br> &nbsp; <i>navRegis</i> is set with the item&#39;s registration value,
             <br> &nbsp; <i>navColor</i> is set with the item&#39;s color (a value from 0 to 5),
            <br> &nbsp; <i>navNumHoles</i> is set with the number of holes that would be acquired by
            'MultipleRecords' with current parameters, or 0 if the item is not marked for Acquire.
            <br> &nbsp; <i>navAcqIndex</i> is
            set with the number of items already acquired plus 1 If the Navigator is currently
            acquiring at items.&nbsp; Any of these variables can then be used to make filenames,
             and the latter three can be used in arithmetic and IF statements.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportOtherItem #</TD>
          <TD>Reports similarly on the Navigator item whose index in the table is <b>#</b>, numbered
            from 1; or if <b>#</b> is negative, reports on item that many items from the end of the
            table, i.e., -1 reports on the last item. </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportNextNavAcqItem</TD>
          <TD>Reports similarly on the next Navigator item to be acquired.&nbsp; The
            Navigator must be acquiring.&nbsp; If the last item is being acquired, navIndex
            is set to -1, and <i>reportedValue1</i> and <i>2</i> are set to -1 and 0.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportGroupStatus</TD>
          <TD>For the current Navigator item or the item this script is being run on,
            reports a code for whether the item is first to be acquired in a group: -1 if
            Navigator not acquiring, 0 if not in a group, 1 if first to be acquired in a
            group, 2 if later in the group. If the group would show up on more than one line
            with &#39;Collapse groups&#39; on, a value of 1 is returned for the first item to be
            acquired in each subgroup.&nbsp; It also reports the group ID of the item&nbsp; (ID is 0
            for an item not in a group), the total number in the group, and the number in
            the group still marked for acquisition.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportItemImageCoords [#I] [buf]</TD>
          <TD>Reports the pixel coordinates of navigator item <b>#I</b> on the image in buffer buf. If no <b>#I</b>
            is specified, the current item is used, negative numbers are items counted from
            the end of the list. If no buffer <b>buf</b> is specified, the image in buffer A is used.
            The X and Y coordinates are returned in <i>reportedValue1</i> and <i>2</i>, <i>reportedValue3</i> is set to 0
            if item <b>#I</b> is outside the buffer or to -1 if the transformation can not be completed.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">GetNavGroupStageCoords #I xvar yvar [zvar]</TD>
          <TD>Returns the stage coordinates of all Navigator points with the group ID <b>#I</b> into
            variables named <b>xvar</b> and <b>yvar</b>, and also returns the Z coordinates if the optional
            name <b>zvar</b> is provided.&nbsp; Sets <i>reportedValue1</i> to the number of points found,
            including 0 if none found.&nbsp; Command added in 4.1, 10/31/22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">GetNavGroupImageCoords #I buf xvar yvar</TD>
          <TD>Returns the image coordinates of all Navigator points within the image in buffer <b>buf</b>
              and having the group ID <b>#I</b>, placing them in variables named <b>xvar</b> and <b>yvar</b>.&nbsp; Sets
             <i>reportedValue1</i> to the number of points found, including 0 if none found within the
            bounds of the image, and -1 if stage positions could not be transformed for this 
            image.&nbsp; Command added in 4.1, 10/31/22;</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChangeItemRegistration #I #R</TD>
          <TD>Changes the registration number of the Navigator item with table index <b>#I</b> to
            <b>#R</b>.&nbsp; This works just like the Navigator menu entry
            <a href="menu_navigator.htm#hid_navigator_changeregistration">Change
            Registration</a>: the registration number must be in the legal range, the item
            cannot be a registration point, and you cannot change an item between imported
            and regular registrations.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChangeItemColor #I #C</TD>
          <TD>Changes the color index of the Navigator item with table index <b>#I</b> to <b>#C</b>, which
            must be between 0 and 5. (0 = red; 1 = green; 2 = blue; 3 = yellow; 4 = magenta;
            5 = no realign)</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChangeItemGroupID #I #G</TD>
          <TD>Changes the group ID of the Navigator item with table index <b>#I</b> to <b>#G</b>, which
            must not be negative.&nbsp; If groups are collapsed, the whole table is refilled, which can
            be time-consuming if more than a few items are being operated on in a loop.&nbsp; In that case,
            use the command 'SuspendNavRedraw' to prevent updating the table until all items are 
            changed.&nbsp; Command added in 4.1, 19-Apr-2023.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">ChangeItemDraw #I [#D]</TD>
          <TD>Changes if the Navigator item with table index <b>#I</b> is drawn or not. If no <b>#D</b> is
            specified, the option is toggled, if <b>#D</b> is 0, drawing is disabled, any other numeric values
            for <b>#D</b> enable drawing. Command added in 3.9, 7/8/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChangeItemLabel #I text</TD>
          <TD>Changes the label of the Navigator item with table index <b>#I</b> to the given <b>text</b>.&nbsp;
            The text is limited to 16 characters; items with labels longer than 10
            characters will not display their properties in the right columns in the table. </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ChangeItemNote #I [text]</TD>
          <TD>Changes the note of the Navigator item with table index <b>#I</b> to the given <b>text</b> or
            deletes the note if <b>text</b> is not specified.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetMapAcquireState #</TD>
          <TD>Sets the state with which the specified map item was acquired.&nbsp; For <b>#</b>,
              enter 0 for the current item or the item being acquired; an index greater than 0
              for the item with that index in the table; or a value less than 0 to count back
              from the end of the table, where -1 is the last item.</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">GoToImagingState name</TD>
          <TD>Sets an imaging state listed in the table of the <A HREF="hidd_statedlg.htm">Imaging 
            States dialog</A>, which must be open.&nbsp; The text on the rest of the line, <b>name</b>, 
            can be either a unique set of starting letters in the name of the state, or the number 
            of the state in the table (numbered from 1).&nbsp; The comparison with state names is 
            case-insensitive.&nbsp; If the command fails, a message is printed to the log 
            and <i>reportedValue1</i> is set to -1 if the state dialog is not open, 1 for no matching name,
            2 for more than one matching name, 3 for a number out of range, 4 if a map acquire state is already set,
            5 if the camera that the state is defined for is not available, or 6 if it is a Low Dose state and there
            is already a state set with a different camera number.&nbsp; Command added in 4.1, 9/15/22.
          </TD>
        </TR>
        <TR>
           <TD class="scriptcommand">RestoreState [#]</TD>
         <TD>Restores the state if one has been saved with 'SetMapAcquireState' or 
            'GoToImagingState' or with the <A HREF="hidd_statedlg.htm">Imaging States dialog</A>.&nbsp; Set the optional <b>#</b> 
            non-zero to generate an error if no state was saved.
          </TD>
        </TR>
        <TR>
           <TD class="scriptcommand">ForgetPriorState [#]</TD>
         <TD>Forgets a state if one has been saved with 'SetMapAcquireState' or 
            'GoToImagingState' or with the <A HREF="hidd_statedlg.htm">Imaging States dialog</A>, equivalent to
           pressing <b>Forget Prior State</b> in that dialog.&nbsp; Set the optional <b>#</b> 
            non-zero to generate an error if no state was saved.&nbsp; Command added in 4.1, 11/16/22</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">OpenImagingStateDialog</TD>
          <TD>Opens the <A HREF="hidd_statedlg.htm">Imaging States dialog</A> if it is not already 
            open.&nbsp; Command added in 4.1, 9/15/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SkipPiecesOutsideItem #I</TD>
          <TD>Sets the current montage to skip pieces outside the Navigator item whose
            position in the table is <b>#I</b> (numbered from 1). If <b>#I</b> is 0, uses the current item.
            If <b>#I</b> is &lt; 0, disables the skipping of pieces.</TD>
        </TR>
    <TR>
          <TD class="scriptcommand">NavItemFileToOpen #</TD>
          <TD>Reports the name of the file set to be opened for the specified Navigator item.&nbsp;
            Sets <i>reportedValue1</i> to the filename or to 0 if there is none, and sets 
            dee<i>reportedValue2</i> to 1 if there is a file or 0 if there is none.&nbsp; For <b>#</b>, enter 0 for
              the current item; an index greater than 0 for the item with
              that index in the table; or a value less than 0 to count back from the end of the
              table, where -1 is the last item.&nbsp; The command will not work for the item
            being acquired, as the stored name is cleared out when the file is opened.
            </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ItemForSuperCoord #</TD>
          <TD>Sets the item number that Navigator supplies supermontage coordinates from when
            a montage image is acquired. Sets the number to 0 to restore Navigator to using
            coordinates from the item currently being acquired.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetItemTargetDefocus #I #D</TD>
          <TD>Sets the target defocus to <b>#D</b> for the Navigator item specified by <b>#I</b>
            (positive for table index, 0 for current or acquired item, or negative for index from
            end).&nbsp; The item must be marked for acquisition or a tilt series. &nbsp;The target is
            not restored after acquisition, so the target would then apply for the next single image
            acquisition but be superceded by the value in the parameters for the next tilt series. &nbsp;
            If this command is used in a script run before the main action, the target will apply in a
            script or tilt series but not to an autofocus done by the Navigator before the main action.
             &nbsp;Items with this value set will have a line including 'F targ' and the target in the
             listing produced by the Navigator menu item
            <A HREF="menu_navigator.htm#hid_montage_listfilestoopen">List Files/Series/States</A>. &nbsp;
            When <b>TS Params</b> is pressed for an item with this set, the target defocus that
            shows in setup dialog will be the one in the parameter set, which may apply to many tilt
            series, and <i>not</i> this set value.&nbsp; The label after the target will be <b>um*</b> to
            indicate that it is being overridden.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetItemSeriesAngles #I #S #E [#B]</TD>
          <TD>Sets the starting and ending tilt series angles to <B>#S</B> and <b>#E</b> and optionally
            sets the bidirectional starting angle to <b>#B</b> for the Navigator item specified by <b>#I</b>
            (positive for table index, 0 for current or acquired item, or negative for index from
            end).&nbsp; The item must be marked for tilt series acquisition. &nbsp;The command can be used
            in a script run before the tilt series. &nbsp;In the
             listing produced by the Navigator menu item
            <A HREF="menu_navigator.htm#hid_montage_listfilestoopen">List Files/Series/States</A>, the
            tilt series angles specified by this command will be shown, with a '*' to indicate the override. &nbsp;
            When <b>TS Params</b> is pressed for an item with angles set, the angles that
            appear in setup dialog will be the ones in the parameter set, which may apply to many tilt
            series, and <i>not</i> these set values.&nbsp; There will be a <b>*</b> after the text box to
            indicate that they are being overridden.&nbsp; Command added in 3.9, 9/16/20
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetNavItemUserValue #I #V [text]</TD>
          <TD>Sets an arbitrary value for a Navigator item specified by <b>#I</b>
            (positive for table index, 0 for current or acquired item, or negative for index from
            end). &nbsp;Up to 8 user values are currently allowed, with a number from 1 to 8 specified by
             <b>#V</b> (numbers do not have to be used sequentially). &nbsp;The <b>text</b> on the
             rest of the line is assigned as the value after variable substitution but not arithmetic;
             text can be omitted to clear out a value.&nbsp; Command added in 3.9, 9/16/20</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportItemUserValue #I #V</TD>
          <TD>Reports an arbitrary value set for the Navigator item specified by <b>#I</b>
            (positive for table index, 0 for current or acquired item, or negative for index from
            end), or 'none' if no value is set. &nbsp;Sets <i>reportedValue1</i> with the text
            value.<TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="navigatoritemgen"></A><B>Item Generating and Hole Finder Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">NewMap [#N text]</TD>
          <TD>Makes a new Navigator map from the current image in buffer A or the current montage 
            with overview in buffer B.&nbsp; A montage must belong to the current open file; a single image in A
            must have been saved already, or be savable in the current file.&nbsp; If an optional <b>#N</b>
            is entered, <b>text</b> after that replaces, or is added to, the standard note for a
            map.&nbsp; <b>text</b> replaces the standard note if <b>#N</b> is 0, is added before it if
            <b>#N</b> is &lt; 0, or is added after it if <b>#N</b> &gt; 0.&nbsp; Places the index of the
            new map in <i>reportedValue1</i>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MakeAnchorMap</TD>
          <TD>Calls the routine to make an anchor map and does the same tests and operations
            as when run from the button in the dialog, including saving the current image
            and making it a map if it is not already.</TD>
        </TR>
               <TR>
          <TD class="scriptcommand">FindHoles [buf]</TD>
          <TD>Runs the Hole Finder routine on the image in the current buffer, or in the
            buffer optionally specified by <b>buf</b>, using all of the
               parameters set in the <A HREF="hidd_hole_finder.htm">Hole Finder dialog</A>.&nbsp; That dialog
            need not be open, but the Navigator must be.
            </TD>
        </TR>
       <TR>
          <TD class="scriptcommand">MakeNavPointsAtHoles [#A] [#L] [#U] [#S] [#B] [#E]</TD>
          <TD>Makes positions found by the Hole Finder into Navigator points, using the various
            thresholds for exclusion set in
              the <A HREF="hidd_hole_finder.htm">Hole Finder dialog</A>.&nbsp; That dialog
            need not be open, but the Navigator must be.&nbsp; Optionally, <b>#A</b> may be entered with 0 to 2
            to specify the arrangement of points (0 for zigzag, 1 for away from focus, 2 for divided
            into groups, or -1 to use the layout set in the dialog); <b>#L</b> and
            <b>#U</b>
             may be entered to set alternative lower and/or upper mean thresholds for excluding points
            (enter -999999 for <b>#L</b> or <b>#U</b> to use the dialog setting);
            <b>#S</b> may be entered to set the SD cutoff
             (or -1 to use the dialog value); <b>#B</b> may be entered to set the cutoff for the
            percentage of black pixels; and <b>#E</b> may be entered to set the edge distance cutoff.</TD>
        </TR>
      <TR>
          <TD class="scriptcommand">ClearHoleFinder</TD>
          <TD>Removes the display of points found by the Hole Finder and frees its memory.
            </TD>
        </TR>
      <TR>
          <TD class="scriptcommand">CombineHolesToMulti #S [#O]</TD>
          <TD>Combines a set of Navigator points marked for acquisition into a subset suitable for
            acquisition of a rectangular array with 'MultipleRecords', using the parameters set in the
            <A HREF="hidd_multi_shot_setup.htm">Multiple Record Setup dialog</A>.
            See the &nbsp; <A HREF="hidd_multi_combiner.htm">Multiple Hole Combiner dialog</A>
            for details and restrictions.&nbsp; Neither of those two dialogs need to be open, but the Navigator must be.
            &nbsp; Set <b>#S</b> to 0 to select points on the currently displayed image, 1 to select points
            within the current polygon, or 2 to select points in the same group as the current point.&nbsp; Set 
            the optional <b>#O</b> to 1 to turn off points outside a polygon in the same groups as the ones combined,
            or 0 not to, overriding the selection in the dialog.
            </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">UndoHoleCombining</TD>
          <TD>Removes the multi-shot acquisition points created by the last hole-combining
             operation (through script command or dialog) and restores the individual points
             to the Navigator table.&nbsp; All of the multi-shot points must still exist.
             </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportHoleFinderParams</TD>
          <TD>Reports the diameter and center-to-center spacing in microns currently being 
            used for hole finding, whether it is set to analyze for a hexagonal array, and the
            maximum error.&nbsp; Command added in 4.0, 9/24/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetHoleFinderParams #D #S #H [#M] [fvar] [tvar]</TD>
          <TD>Sets the parameters for hole finding to <b>#D</b> for the diameter and <b>#S</b> for the 
            center-to-center spacing in microns and sets it to analyze for a hexagonal array if <b>#H</b> is 
            non-zero, in which case the hex-specific size and spacing are set.&nbsp; The maximum error is set 
            with the optional <b>#M</b> if it is positive.&nbsp; If <b>fvar</b> is included with the name of
            an array variable, it is used to set the filter sigma values and median iterations (positive values for sigma,
            or negative number of iterations). If <b>fvar</b> is included with the name of
            an array variable, it is used to set the thresholds (use 'NONE' for <b>fvar></b> to set just the
            thresholds).&nbsp; Command added in 4.1, 30-Jan-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportLastHoleVectors #</TD>
          <TD>Reports the vectors between holes along the two axes from the last hole finding operation in
            one of 3 forms.&nbsp; If <b>#</b> is 0, the vectors are in stage coordinates, adjusted for
            View or Search defocus offset if there is a high-magnification defocus calibration.&nbsp; If
            <b>#</b> is negative, the vectors are in image coordinates, with Y inverted.&nbsp; If <b>#</b>
            is a magnification index, the vectors are in image shift coordinates at the given magnification.
            Command added in 4.0, 1/13/22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">UseHoleVectorsForMulti [#]</TD>
          <TD>Converts the vectors between holes from the last hole finding operation to image shift
             values and assigns them as the hole vectors for doing multiple records in a regular pattern 
            of holes.&nbsp; If the optional [#] is absent or 0, the values are computed for the current
            Low Dose Record magnification; if it is positive, the vectors are computed for the given 
            magnification index; if it is negative, they are computed for the magnification at which 
            hole vectors were last defined.&nbsp; The magnification associated with the image shift vectors in the
            multiple Record parameters is set to whatever value is used here, and the tilt angle stored in
            the parameters is set to zero.&nbsp; Command added in 4.0, 1/28/22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AutoContourGridSquares buf [#R] [#H] [#T] [#S] [#L] </TD>
          <TD>Finds areas above a threshold in the image in [buf] and makes contours around them, then divides them into groups
            that are displayed in different colors, depending on the elimination criteria and settings in the
            <a href="hidd_autocontour.htm">Autocontouring Grid Squares dialog</a>, which need not be open.&nbsp; The 
            autocontouring routines in the IMOD model library are used and take byte input,
            so the image will be scaled to bytes using the Black and White values in Image Display control panel.&nbsp; If
             an optional input is omitted or negative, the value from the dialog will be used.&nbsp; Optional inputs are:<br />
            &nbsp;&nbsp;&nbsp; <b>#R</b> - Either a pixel size in microns (if &lt; 10) or a target size in pixels (if &gt; 10) for
            image reduction.&nbsp; Some reduction is needed both to reduce noise and to speed up the processing, but too 
            much reduction will give inaccurate contours.&nbsp; Whole grid maps should be reduced to
             ~1500-2000 pixels; a pixel size of ~1.2 um is useful.<br />
            &nbsp;&nbsp;&nbsp; <b>#H</b> - Fraction used for setting a threshold based on a histogram analysis
            that finds two peak values in a bimodal distribution of image intensities.&nbsp; The contouring 
            threshold is set to the given fractional distance between the peaks.&nbsp; If the analysis fails to find two
            peaks, a specific threshold must be set instead.<br />
            &nbsp;&nbsp;&nbsp; <b>#T</b> - A specific threshold to use instead of doing a histogram analysis;
            enter 0 for <b>#H</b> and enter either an actual intensity value in the displayed image (a value &gt; 1),
            or a relative threshold, the fraction of the way between the Black and White values in the current 
            display.&nbsp; This value is ignored if <b>#H</b> is nonzero.<br />
            &nbsp;&nbsp;&nbsp; <b>#S</b> - Smallest size, in microns, for an area; the square of this value is used
            to set the minimum area to retain as a polygon.<br />
            &nbsp;&nbsp;&nbsp; <b>#L</b> - Largest size, in microns, for an area; again, the square is 
            used to set the maximum area to retain as a polygon.<br />
            &nbsp; Command added in 4.1, 16-Nov-22; no longer makes Navigator polygons, 23-Dec-22.
         </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetAutocontourGroups #N #W [#O...]</TD>
          <TD>Sets the number of groups of grid square contours with <B>#N</B> and the way in which contours are
             sorted into groups with <b>#W</b> (0 for size or 1 for mean).&nbsp; This can be followed by a series
            values to set the option to show a group on (1) or off (0); values need not be entered for all groups.&nbsp; Any
            of these entries can be -1 to leave the existing setting unchanged.&nbsp; This command modifies the user
            settings for these items, and if the <a href="hidd_autocontour.htm">Autocontouring Grid Squares dialog</a>
             is open it will reflect these changes.&nbsp; Command added in 4.1, 9-Mar-23.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportAutocontourStats</TD>
          <TD>Reports the minimum, maximum, and median intensity inside of the current set of grid 
            squares found with 'AutoContourGridSquares'.&nbsp; Command added in 4.1, 9-Mar-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MakePolygonsAtSquares [#L] [#U] [#M] [#S] [#I] [#B]</TD>
          <TD>Converts the current set of grid squares found with 'AutoContourGridSquares' to Navigator
            polygons, equivalent to pushing the <b>Make Polygons</b> button in the
            <a href="hidd_autocontour.htm">Autocontouring Grid Squares dialog</a>.&nbsp; The values from the
            dialog, or stored settings, are used for the various cutoffs, but they can be overridden by these optional
            entries: (enter -1 for any of these to use the dialog or stored value instead:
            <br />&nbsp;&nbsp;&nbsp; <b>#L</b> - Lower mean cutoff, either an absolute value > 1, or a value between
             0 and 1 for a relative cutoff, the fraction of the way between the minimum and median mean (which 
            corresponds to the fractional position of the slider in the dialog).
            <br />&nbsp;&nbsp;&nbsp; <b>#U</b> - Upper mean cutoff, either an absolute value > 1, or a value between
             0 and 1 for a relative cutoff, the fraction of the way between the median and maximum mean.
            <br />&nbsp;&nbsp;&nbsp; <b>#</b> - Minimum size cutoff in microns.
            <br />&nbsp;&nbsp;&nbsp; <b>#</b> - Maximum SD cutoff.
            <br />&nbsp;&nbsp;&nbsp; <b>#</b> - Maximum irregularity cutoff.
            <br />&nbsp;&nbsp;&nbsp; <b>#</b> - Minimum border distance, in microns.
             &nbsp;</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">GetUniqueNavID</TD>
          <TD>Creates an ID value unique from any current Navigator items and places it in <i>reportedValue1</i>;
             it can be assigned to a variable after the command.&nbsp; The ID can be used with 
            'AddStagePosAsNavPoint' and 'AddImagePosAsNavPoint' to assign multiple points to a 
            group.&nbsp; Command added in 4.1, 6-Jul-22</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AdjustStagePosForNav #SX #SY [#IX #IY] [#C] [#M] [#T]</TD>
          <TD>Adjusts a stage position <B>#SX</B>, <B>#SY</B> so that it is suitable for assigning to a Navigator item, 
            accounting for the optional image shift values in <b>#IX></b>, <b>#IY</b>, with possible
             adjustments for tilt axis offset and image shift offsets. and a tilt angle given in the 
            optional <b>#T</b>.&nbsp; These adjustments depend on the active camera number, which can be entered
            <b>#C</b> (numbered from 1, use -1 for current camera), on the magnification index, which can be
            entered with <b>#M</b> (use -1 for current magnification), and on the tilt angle, which can be entered
            with <b>#T</b> and defaults to the current angle.&nbsp; Command added in 4.1, 6-Jul-22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AddStagePosAsNavPoint #X #Y #Z [#I] [#D]</TD>
          <TD>Adds a single stage position in <B>#X</B>, <B>#Y</B>, adjusted with 'AdjustStagePosForNav', as a 
            Navigator point item with the Z value given by <b>#Z</b>.&nbsp; A group ID can be assigned 
            with the optional <b>#I</b>, otherwise it will be 0.&nbsp; The optional <b>#D</b> can be set
            non-zero to suppress redrawing the display.&nbsp; Sets <i>reportedValue1</i> with the index of
            the new item.&nbsp; Command added in 4.1, 6-Jul-22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AddStagePointsAsPolygon xvar yvar #Z [#D]</TD>
          <TD>Adds the adjusted stage positions in two arrays, <b>xvar</b> and <b>yvar</b>, as a polygon
            item.&nbsp; The Z position must be supplied in <b>#Z</b>.&nbsp; The optional <b>#D</b> can be set
            non-zero to suppress redrawing the display.&nbsp; Sets <i>reportedValue1</i> with the index of
            the new item.&nbsp; Command added in 4.1, 6-Jul-22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AddImagePosAsNavPoint buf #X #Y [#Z] [#I] [#D]</TD>
          <TD>Adds a new Navigator point item with the position <B>#X</B>, <B>#Y</B> (Y inverted) in the image in buffer
            <b>buf</b>, with Z taken the stage Z position of the image, or from the optional <b>#Z</b> if it is greater
             than -990.&nbsp; If the image is a montage, the position must be valid for the way that it is currently
             displayed, i.e., with regular, very sloppy, or no alignment.&nbsp; A group ID can be assigned
             with the optional <b>#I</b>, otherwise it will be 0.&nbsp; The optional <b>#D</b> can be set
            non-zero to suppress redrawing the display.&nbsp; Sets <i>reportedValue1</i> with the index of
            the new item.&nbsp; Command added in 4.1, 6-Jul-22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AddImagePointsAsPolygon buf xvar yvar [#Z] [#D]</TD>
          <TD>Adds the image positions on the buffer <b>buf</b> in two arrays, <b>xvar</b> and <b>yvar</b> 
            (Y inverted) as a polygon
            item.&nbsp; The points for 'AddImagePosAsNavPoint' about image alignment, Z position, drawing, 
            and <i>reportedValue1</i> apply here.&nbsp; Command added in 4.1, 6-Jul-22.</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">DeleteNavigatorItem #</TD>
          <TD>Removes the Navigator item specified by <b>#I</b>
            (positive for table index, 0 for current item, or negative for index from
            end; this command cannot be used while acquiring.&nbsp; Command added in 4.1, 6-Jul-22.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="navigatorali"></A><B>Alignment and Shift Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RealignToNavItem #R [#C] [#S #N #Z]</TD>
          <TD>Realigns to the current Navigator item, or to the item that this script is being
            run on. For <b>#R</b>, enter 1 to restore the microscope state to the current state
            after the procedure, or 0 not to.&nbsp; For optional <b>#C</b>, enter 1 to use
            continuous acquisition mode and end it at end of procedure, or 2 to leave it
            running if possible. The three optional entries <b>#S</b>, <b>#N</b>, <b>#Z</b> control the resetting
            of image shift at the end of the procedure when aligning a single map at one
            magnification.&nbsp; It will reset image shift and move the stage to compensate,
            realigning with a new image up to <b>#N</b> times and if the starting shift is more
            than the criterion <b>#S</b>.&nbsp; Enter 0 or 1 for <b>#Z</b> to end with nonzero or zero
            image shift, respectively, i.e. with the image realigned or with a final image
            shift reset and stage movement.&nbsp; This procedure occurs only if realignment
            is to a single map.&nbsp; All three values must be entered if any are, plus a
            value for <b>#C</b>.&nbsp; An entry of 0 for <b>#N</b> and 1 for <b>#Z</b> will make it move the
            stage to the target position and skip the regular realignment there.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RealignToOtherItem #I #R [#C] [#S #N #Z]</TD>
          <TD>Realigns to the Navigator item whose index in the table is <b>#I</b>, numbered from 1.
            For <b>#R</b>, enter 1 to restore the microscope state to the current state after the
            procedure, or 0 not to.&nbsp; For optional <b>#C</b>, enter 1 to use continuous
            acquisition mode and end it at end of procedure, or 2 to leave it running if
            possible.&nbsp; Entries for <b>#S</b>, <b>#N</b>, and <b>#Z</b> control image shift reset when
            aligning to a single map, as described for &#39;RealignToNavItem&#39;.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RealignToMapDrawnOn #I #R</TD>
          <TD>Centers on the specified item by first realigning to the map that the item was drawn
              on, then using image shift to center on the marked item.&nbsp;  The specified item
              must have been drawn on a higher-magnification map that can be aligned to in two rounds
              using some lower mignification map, such as an anchor map.  For <b>#I</b>, enter 0 for
              the current item or the item being acquired; an index greater than 0 for the item with
              that index in the table; or a value less than 0 to count back from the end of the
              table, where -1 is the last item.  For <b>#R</b>, enter 1 to restore the microscope state
              to the current state after the procedure, or 0 not to.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">GetRealignToItemError</TD>
          <TD>Gets the total stage error in X and Y and the second move error in X and Y from
              the last Realign to Item and assigns them to <i>reportedValue1-4</i> and to optional
              variables included after the command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ForceCenterRealign</TD>
          <TD>Makes Realign to Item align to the map center instead of skipping the first
            round because it was aligned to recently.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SkipZMoveNextNavRealign [#]</TD>
          <TD>Makes the Realign to Item routine leave Z unchanged when moving to the 
            item's position for the next Realign run from a script, or turns off this flag if the optional
            <b>#</b> is 0&nbsp; Command added in 4.1, 26-Feb-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AlignToTemplate [S] [R] [M] [L] [label]</TD>
          <TD>Runs the Align to Template routine using the parameters set in the
            <a href="hidd_navrealign.htm">Navigator Align Setup</a> dialog, which can be modified
             by optional entries: <b>#S</b> with the maximum shift in the alignment in microns,
             <b>#R</b> with a threshold value in microns for resetting IS, moving the stage,
            and realigning, <b>#M</b> with the maximum number of times to reset IS or 0 not to,
             <b>#L</b> with 1 to leave IS at 0 (skip last realign) or 0 not to,
             and <b>label</b> as the label of the Navigator item to use as a template.&nbsp; For any of the
            numbers, enter -1 to use the value from the dialog.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ShiftItemsByAlignment</TD>
          <TD>Shifts items at the current registration by the alignment shift of the image in
            buffer A. If rerun on the same image, it applies the change in shift between
            the current and previous run.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ShiftItemsByCurrentDiff #</TD>
          <TD>Shifts items at the current registration by the difference between the current
            stage position and the recorded position of the current Navigator item or the
            item that this script is being run on.&nbsp; The shift is done only if the
            difference is less than the <b>#</b> in microns.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ShiftItemsByMicrons #X #Y [#R]</TD>
          <TD>Shifts items at the current registration, or at the registration given by the
            optional <b>#R</b>, by the amount in microns in <b>#X</b> and <b>#Y</b>.&nbsp; Each component of the
            shift must be less than 100 microns.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">AlignAndTransformItems #C #R [#L]</TD>
          <TD>Performs the image alignment and Navigator item transformation that can be done
            interactively in the <A HREF="menu_navigator.htm#hid_navigator_align_to_map">Align with Rotation</A>
            dialog.&nbsp; The same conditions apply here as in that dialog: there must be either a single-frame
            image in buffer A or a montage overview in buffer B at the current registration, and a map
             in the buffer for read-in images at a different registration.&nbsp; <b>#C</b> sets the center
            angle of the rotational search, and <b>#R</b> sets the total angular range to be
            searched.&nbsp; Set the optional <b>#L</b> to a limit for an acceptable rotation angle;
            above this, items will not be transformed.&nbsp; After finding the alignment, items at the
            registration of the map will be transformed to the current registration.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="acqcontrol"></A><B>Acquisition Control Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportNumNavAcquire</TD>
          <TD>Reports the number of Navigator items marked for Acquire and marked for Tilt Series
            as two values; returns each as -1 if Navigator is not open.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">ReportNumHoleAcquire [#M] [#S] [#E]</TD>
          <TD>Reports the total number of hole positions that would be acquired at, the number
            of Navigator items moved to, and the total number of
            Record images by acquiring with 'MultipleRecords', based on current Multiple
             Record parameters and the number of hole positions specified for individual items.&nbsp; If the optional
            <B>#M</B> is set with a minimum number of holes, the totals will omit any items that have fewer than
            that number of hole position remaining after excluding some holes in the pattern.&nbsp; If the optional
            <B>#S</B> and <B>#E</B> are set with starting and ending item numbers in the Navigator table
             (numbered from 1), totals will include only items within those limits.&nbsp; Each value is returned as
            -1 if Navigator is not open.&nbsp; Command added in 3.9, 2/14/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportItemAcquire [#]</TD>
          <TD>Reports the Acquire state of the Navigator item whose index in the table is <b>#</b>,
            numbered from 1; or if <b>#</b> is negative, reports on item that many items from the
            end of the table (i.e., -1 reports on the last item), or if 0 or no <b>#</b> is specified, reports on
            the current item.&nbsp; No optional assignment to variable.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetItemAcquire [#I] [#A]</TD>
          <TD>Enables or disables Acquire for a Navigator item: if <b>#A</b> is 0, Acquire is disabled,
            if this parameter is not specified or nonzero, Acquire becomes enabled.&nbsp; The item index
            is specified by <b>#I</b> with a positive or negative number (as in ReportItemAcquire);
             if 0 or no <b>#I</b> is specified the current item is changed.&nbsp; Acquire may not be turned
             for an item marked for a tilt series.&nbsp; If this command is used
            from within a running acquisition, the item must not be within the range from the
            current acquisition point to the end of the range being acquired.&nbsp; The end of the range
            is the original end of the Navigator table when acquisition was started, or the
            end of the subset if one is being acquired.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SkipAcquiringNavItem</TD>
          <TD>Tells the Navigator to skip the current item and move on to the next.&nbsp;
            This command has an effect only when included in a script being run as a
            preliminary action before the main action.&nbsp; The item will still be marked for Acquire.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SkipAcquiringGroup [#I]</TD>
          <TD>Tells the Navigator to skip points whose group ID match either the group ID of
            the current acquire item, or the optional <b>#I</b> entered with the command.&nbsp; The
            items will still be marked for Acquire.&nbsp; The Navigator must be acquiring at points.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">EndAcquireAtItems</TD>
          <TD>Stops Navigator acquisition after the current item, equivalent to pressing 'End Nav' in the
             Camera & Script control panel.&nbsp; Acquisition must be either running or 
            paused.&nbsp;Command added in 4.1, 12-May-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SkipMoveInNavAcquire [#]</TD>
          <TD>Tells the Navigator to enable skipping the initial stage move for each
            following item to be acquired.&nbsp; This command is allowed only when the
            Navigator is already acquiring at items.&nbsp; It does not affect the user&#39;s
            selection in the Acquire at Items dialog for whether to skip this stage move.&nbsp;
            Thus a script that is going to use Realign to Item on each point can skip the
            stage move and there is no need for the user to make this selection.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">StartNavAcquireAtEnd</TD>
          <TD>Starts the Navigator Acquire at Items operation after the script ends
            successfully, using the parameters last defined in the
      		<A HREF="hidd_navacquire.htm">Navigator Acquire</A> dialog.&nbsp; The command cannot
            be used when Navigator is already acquiring or a tilt series is running.</TD>
        </TR>

        <TR>
          <TD class="scriptcommand">RunScriptAfterNavAcquire #</TD>
          <TD>Sets up for the script numbered <b>#</b> to be run after successful
            completion of the next Navigator Acquire at Items operation.&nbsp; Command added in 4.0, 2/4/22.</TD>
        </TR>

         <TR>
          <TD class="scriptcommand">SuffixForExtraFile suffix [suffix] [suffix] [...]</TD>
          <TD>Sets one or more suffixes so that the Acquire at Items routine will open the
            corresponding number of extra files whenever it opens a regular file for
            output.&nbsp;Follow with the suffices, separated by spaces (and thus a suffix cannot
            contain a space). The name of each extra file
            will be the root of the regular filename, plus the suffix, followed by the
            extension of the regular filename.&nbsp; The extra files will be opened before
            the regular file.&nbsp; They will be closed when the regular file is closed (at
            the end of acquisition or before opening a new file).&nbsp; If any file has not had images
            written to it, it will be removed after being closed, so you can use this command to specify
            the maximum number of files needed, even if some items do not require all the files.&nbsp; The
             suffixes are not persistent
            and the command needs to be included in a script run before the main action.
          </TD>
        </TR>
        </TABLE>
      <BR>
     <P><A name="miscellaneous"></A><B>Miscellaneous Commands</B></P>
      <TABLE border="1" cols="2">
        <TR>
          <TD colspan="2"><A name="time_output"></A><B>Time-Related Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportClock</TD>
          <TD>Reports seconds elapsed since last ResetClock command</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ResetClock</TD>
          <TD>Resets the time reported by ReportClock to 0</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">ReportMinuteTime</TD>
          <TD>Reports an absolute time in minutes, a large integer. The difference between
           two such values will give an elapsed time in minutes.&nbsp; If a variable name is
           included after the command, the value will automatically be assigned to a
           persistent variable so that it is available across multiple runs of the script.
          </TD>
        </TR>
         <TR>
          <TD class="scriptcommand">SetCustomTime name [#M]</TD>
          <TD>Stores an absolute time in minutes in a 'custom time' with the given <b>name</b>.&nbsp; The current time is stored, or the time given by the optional <b>#M</b>.&nbsp;
              Custom times are stored in the short-term calibration file, like the times
              since the last long operations of various kinds.&nbsp; They can be used to
              perform actions periodically during Navigator acquisitions.&nbsp; Entries older
              than 20000 minutes will be removed when the file is read on program startup.</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">ReportCustomInterval name [#M]</TD>
          <TD>Reports the time elapsed, in minutes, from the custom time with the given <b>name</b> to either
              the current time or the absolute time in minutes given by optional <b>#M</b>.&nbsp; If
              a time with that <b>name</b> has not be set, an interval of 40000 is returned.
            &nbsp; No optional assignment to variable.</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">ReportTickTime</TD>
          <TD>Reports the time in seconds since the program started, like the times that
            prefix program debug output. The difference between two such values will give an
            elapsed time in seconds with nominal millisecond precision, as long as the
            program has been running for fewer than 50 days. If a variable name is included
            after the command, the value will automatically be assigned to a persistent
            variable so that it is available across multiple runs of the script.
          </TD>
        </TR>
         <TR>
          <TD class="scriptcommand">ElapsedTickTime #S</TD>
          <TD>Reports the time in seconds since the tick time given in <b>#S</b>, which should
            be a variable assigned with the result from &#39;ReportTickTime&#39;.&nbsp; This command
            should be used to measure intervals between tick times if there is any chance
            that the program will run for more than 50 days.&nbsp; The value can be assigned
            to a variable at the end of the command.</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">ReportDateTime</TD>
          <TD>Reports a numeric date in the form YYYYMMDD and a time to the minute in the form
              HHMM.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ProgramTimeStamps [#s] [#o]</TD>
          <TD>Prints the program version and build date, plus the current date and time, or
            the date and time of program startup if the optional <b>#s</b> is positive.&nbsp; If the
            optional <b>#o</b> is nonzero, it also prints the report of special options set that 
            is printed on program startup.&nbsp; If <b>#s</b> is negative, it prints only the 
            current date and time.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand"><A name="graphing"></A><B>Graphing Commands</B></TD>
          <td>
            These commands are used to display graphs using the Genhstplt program in IMOD. 
            &nbsp; See <a href="setting_up_serialem.htm#addedPackages">
              Additional Packages for GPU
          and Python Support, and for Displaying Graphs and Using Ctfplotter</a> for details on how to make
             this program available to SerialEM.&nbsp; This program opens a plotting window 
            that can be resized.&nbsp; Right-clicking within the window brings up a menu allowing
            one to save the graph to a PNG file or print it (if there is a printer available).&nbsp; All 
            commands here were added in 4.1, 10/27/22.
          </td>
          </TR>
        <TR>
          <TD class="scriptcommand">GraphValuesInArrays #T var1 [var2 ...]</TD>
          <td>Graphs values provided in a set of 1-D array variables <b>var1</b>, <b>var2</b>, etc,
            where the a non-zero value of <b>#T</b> specifies that the first variable contains type
            identifiers for graphing by type.&nbsp; These type numbers can be arbitrary numbers but must
            be integers.&nbsp; The data are loaded
            into a matrix and individual value variables (i.e, other than a type variable) correspond to columns
            in the matrix.&nbsp; When there are no types, the default is to plot each column past the
            first one versus the first column, all in one graph.&nbsp; If the 'ordinal' option is
             given with the 'SetGraphOptions' command, all columns would be plotted versus their
            index in the array.&nbsp; The 'SetGraphColumns' command can be used to plot specific
            columns instead of all of them. <br />
            When there are types, only two columns can be plotted, or only one if 'ordinal' is 
            set.&nbsp; Either this command must contain only that number of value variables, or 
            'SetGraphColumns' must be used to set that number of columns.<br />
            The various options set by the commands below are all cleared at the start of a script
             and after each graphing command.
            &nbsp;</td>
          </TR>
        <TR>
          <TD class="scriptcommand">GraphPreStoredValues #T</TD>
          <td>
            Graphs values that have already been stored, using types if <b>#T</b> is non-zero&nbsp; Values
            are stored for possible reuse whenever the 'GraphValuesInArrays' command is used.&nbsp; In 
            addition, specific operations may store values for graphing (so far, just the
             'ListISVectorsToGraph' command).
          </td>
          </TR>
        <TR>
          <TD class="scriptcommand">SetGraphTypes # [# ...]</TD>
          <td>
            Sets the list of data types to plot in the next graphing command&nbsp; If only one type is
            provided, its values will be plotted versus their index in the array.
          </td>
          </TR>
        <TR>
          <TD class="scriptcommand">SetGraphColumns # [# ...]</TD>
          <td>
            Sets the list of columns to be plotted in the next graphing command, numbered from 1.&nbsp; Columns after 
            the first one will each be plotted versus the first column.</td>
          </TR>
       <TR>
          <TD class="scriptcommand">SetGraphSymbolss # [# ...]</TD>
          <td>
            Sets a list of symbols to be substituted for the default ones in the next graphing
             command&nbsp; These can be numbers from -1 to 19: open and
             filled square (1 & 2), open and filled diamond (3 & 4), open and filled
             triangle (5 & 6), X and + (7 & 8), open and filled circle (9 & 10),
            open and filled inverted triangle (11 & 12), U (13), S (14), circle
            with vertical line (15), small dot (18), and horizontal line (19).  In addition, 0 gives no symbol
            and -1 shows the point number for each data value instead of a symbol. </td>
          </TR>
        <TR>
          <TD class="scriptcommand">SetGraphOptions opt [#] [opt] [#]...</TD>
          <td>
            This command can set multiple options by having a list of keywords, each one followed by
            0, 1, or 2 values: <br />
            ordinal &nbsp;&nbsp;Plot each data type or column versus each point's index in the data array 
            (can be abbreviated to 'ord')<br />
            connect &nbsp;&nbsp;Draw lines connecting successive data values (can be abbreviated 'con')<br />
            color # &nbsp;&nbsp;Use colors for symbols, lines, and key label.&nbsp; If <B>#</B> is 0, the colors
            will be used in their fixed order (starting with dark blue, dark red, dark green, and magenta, 
            with black not occurring until the 8th color).  With a non-zero value of <B>#</B>, that curve will be
            drawn in black instead of its default color.<br />
            xlog # &nbsp;&nbsp;Take the log of the X values after adding the base value in <b>#</b> <br />
            xsqrt # &nbsp;&nbsp;Take the log of the Y values after adding the base value in <b>#</b> <br />
            ylog # &nbsp;&nbsp;Take the square root of the X values after adding the base value in <b>#</b> <br />
            ysqrt # &nbsp;&nbsp;Take the square root of the Y values after adding the base value in <b>#</b> <br />
            xrange #L #H &nbsp;&nbsp;Set the range of the X axis with low and high values given by
             <b>#L</b> and <b>#H</b> <br />
            yrange #L #H&nbsp;&nbsp;Set the range of the X axis with low and high values given by 
            <b>#L</b> and <b>#H</b> <br />
            Note that when taking the log or square root, the base value is used prevent negative numbers
             as well as to control the relative compression of the axis at the high end.&nbsp; The numeric
            labels on the axis correspond to values after, not before, this operation.
          </td>
          </TR>
        <TR>
          <TD class="scriptcommand">SetGraphAxisLabel text</TD>
          <td>
            Sets the label for the X axis in the next graph.&nbsp;</td>
          </TR>
        <TR>
          <TD class="scriptcommand">SetGraphKeyLabel text</TD>
          <td>
            Sets one label to appear after a symbol in the key ion the right in the bext graph.&nbsp; This
             command can be used multiple times, once for each type or column being graphed.</td>
          </TR>
        <TR>
          <TD class="scriptcommand">CloseAllGraphs</TD>
          <td>
            This command will close all graph windows that are still open.&nbsp;</td>
          </TR>
        <TR>
          <TD class="scriptcommand">GetLastTiltXYZToGraph</TD>
          <td>
            Stores the X/Y/Z values from the last tilt series in the graphing arrays, with tilt angles in
            column 1 and X, Y, Z values in columns 2-4.
          </td>
          </TR>
          <TD class="scriptcommand"><A name="scale_matrix"></A><B>Scale Matrix Commands</B></TD>
          <td>These commands output the 4 elements of the various scale matrices used to
            convert between 4 different kinds of positional coordinates:<br /> &nbsp; camera coordinates
            in right-handed unbinned pixels;<br /> &nbsp; 'specimen' coordinates in microns, a right-handed
            rectilinear system with the X axis along the tilt axis; <br /> &nbsp; IS (image shift or projector
             shift) coordinates in their basic units; <br /> &nbsp;  stage coordinates in microns.&nbsp;
            They report 4 values that specify an amount of change in a coordinate being scaled
             to per unit of change in a coordinate being scaled from, namely X per X, X per Y,
            Y per X, and Y per Y in that order.&nbsp; The coordinate transformation is <br />
            Xout = Xin * XperX + Yin * XperY <br />
            Yout = Xin * YperX + Yin * YperY <br />
            All commands return a matrix for the current camera where relevant, and all require an entry
             <b>#M</b> for the magnification index, or 0 to use the current
            index.&nbsp; Variables to assign to can be entered after that.
          </td>
        </TR>
        <TR>
          <TD class="scriptcommand">ISToCameraMatrix #M</TD>
          <td>Converts from image shift or projector shift to camera coordinates</td>
        </TR>
        <TR>
          <TD class="scriptcommand">CameraToISMatrix #M</TD>
          <td>Converts from camera to image shift or projector shift coordinates</td>
        </TR>
       <TR>
          <TD class="scriptcommand">CameraToStageMatrix #M</TD>
          <td>Converts from camera to stage coordinates</td>
        </TR>
        <TR>
          <TD class="scriptcommand">StageToCameraMatrix #M</TD>
          <td>Converts from stage&nbsp;to&nbsp;camera coordinates.</td>
        </TR>
       <TR>
          <TD class="scriptcommand">ISToSpecimenMatrix #M</TD>
          <td>Converts from image shift or projector shift to&nbsp;specimen coordinates.</td>
        </TR>
        <TR>
          <TD class="scriptcommand">SpecimenToISMatrix #M</TD>
          <td>Converts from&nbsp;specimen to image shift or projector shift coordinates.</td>
        </TR>
       <TR>
          <TD class="scriptcommand">SpecimenToCameraMatrix #M</TD>
          <td>Converts from specimen&nbsp;to camera&nbsp; coordinates.</td>
        </TR>
        <TR>
          <TD class="scriptcommand">CameraToSpecimenMatrix #M</TD>
          <td>Converts from camera&nbsp;to specimen&nbsp; coordinates.</td>
        </TR>
       <TR>
          <TD class="scriptcommand">ISToStageMatrix #M</TD>
          <td>Converts from image shift or projector shift to stage&nbsp; coordinates.</td>
        </TR>
        <TR>
          <TD class="scriptcommand">StageToISMatrix #M</TD>
          <td>Converts from stage&nbsp; to image shift or projector shift coordinates.</td>
        </TR>
       <TR>
          <TD class="scriptcommand">SpecimenToStageMatrix #M</TD>
          <td>Converts from specimen to stage coordinates.&nbsp; The matrix should have two
            terms near 0 and two terms near +/-1.</td>
        </TR>
        <TR>
          <TD class="scriptcommand">StageToSpecimenMatrix #M</TD>
          <td>Converts from stage to specimen coordinates.</td>
        </TR>
        <TR>
          <TD colspan="2"><A name="process_running"></A><B>Process-Running Commands</B></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RunInShell command</TD>
          <TD>Runs the given <b>command</b> with the system command processor.&nbsp; It appears that
            any command that will run in a Command Prompt window can be run.&nbsp; Thus
            commands can include: &#39;|&#39; to pipe from one program to another; &#39;&amp;&#39; to run
            successive programs unconditionally; &#39;&amp;&amp;&#39; or &#39;||&#39; to run successive programs
            conditionally; &#39;&gt; outfile&#39; to redirect standard output to a file, &#39;2&gt; errfile&#39;
            to redirect standard error output to a file, or &#39;&gt; outfile 2&gt;&amp;1&#39; to redirect
            both to one file.&nbsp; Single arguments like filenames that contain spaces
            should be enclosed in double quotes.&nbsp; The exit status of the command will
            be placed in <i>reportedValue1</i>; if it is -1, this indicates an error before
            running the command, and <i>reportedValue2</i> will be set with the following values: 1
            if argument list too big, 2 or 3 if command interpreter cannot be found or is
            not executable, 4 for insufficient memory or other memory problem, 5 for
            unidentified error.&nbsp; In any case, a non-zero exit status will not be
            considered a script error, and you need to test for failure explicitly. These
            error codes are not very helpful - it seems that the exit status is 1 if the
            command cannot be found or cannot be started, so if you want to pass information
            back with the exit status, you cannot use a 1, and might want to use a value
            besides 1 for failure of the operation to distinguish it from failure to run the
            command.&nbsp;&nbsp; If STOP is used while the command is running, the script
            will stop and the thread that is running the command will be killed, but the
            command will keep running.&nbsp; If this feature or the DOS window that opens is a
             problem, see the if you can use the 'RunProcess' command</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">RunProcess command</TD>
          <TD>Runs the program given by <b>command</b> with 
            the argument list defined previously with the 'NextProcessArgs' command and input possibly
             defined previously with 'PipeToNextProcess', waits for the program to finish,
             and sets <i>reportedValue1</i> 
            with its exit status.&nbsp; See <a href = menu_tools.htm>The Tools Menu and Running External Commands</a>
            for a description of the rules governing this command.&nbsp; Failure to start the program generates
            a script error, but a non-zero exit status will not.&nbsp; Unlike 'RunInShell', this
            command avoids opening a DOS window (unless the property 'AllowWindowWithTools' is set).&nbsp; Redirection 
            of input from a file and output to a file
            are possible, but if you need more elaborate shell features like piping, you need to use
            'RunInShell'.&nbsp; If STOP is used while the command is running, the process will be 
            terminated.&nbsp; Command added in 4.1, 8/24/22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">CreateProcess command</TD>
          <TD>Like 'RunProcess' except that it starts the program without waiting for it to finish.&nbsp;
            See <a href = menu_tools.htm>The Tools Menu and Running External Commands</a>
            for a description of the rules governing this command.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">NextProcessArgs arg [arg] [...]</TD>
          <TD>Sets arguments for the next process run with 'CreateProcess' or 'RunExternalTool'.&nbsp; The argument
          list can contain script variables that are substituted, as well as several keywords
          that are replaced with path entries. &nbsp;See <a href = menu_tools.htm>The Tools
           Menu and Running External Commands</a> for a description of these keywords and
           the rules governing the arguments entry. The arguments are
          used up by running the process and must be defined with this command each time a
          process is run. </TD>
        </TR>
       <TR>
          <TD class="scriptcommand">PipeToNextProcess var</TD>
          <TD>Sets an input string to be piped into the next process run with 'CreateProcess' or
             'RunExternalTool', which should be more efficient than writing the input to a file
             and redirecting input from it.&nbsp; The variable <b>var</b> would typically contain
             an array of strings or numeric values, one per line of input.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">RunExternalTool #N|name</TD>
          <TD>Runs an external tool shown in the Tools menu, where <b>#N</b> is either the number of
            the tool in the Tools menu, numbered from 1, or <b>name</b> is the full name of the tool in the menu.
            If arguments were set with 'NextProcessArgs', or input to be piped in set with 
            'PipeToNextProcess', they will be included when running the command.</TD>
        </TR>
       <TR>
          <TD class="scriptcommand">ExternalToolArgPlace #</TD>
          <TD>Specifies whether arguments set with 'NextProcessArgs' should be placed before
            (-1 for <b>#</b>) or after (1 for <b>#</b>) the arguments defined for an external tool in the
             properties file, or replace the defined arguments (0 for <b>#</b>).&nbsp; The default is 0
            and a setting is retained for the duration of the script.</TD>
        </TR>
        <TR>
          <TD colspan="2"><A name="other_misc"></A><B>Other Commands</B></TD>
        </TR>
         <TR>
          <TD class="scriptcommand">CircleFromPoints #X1 #Y1 #X2 #Y2 #X3 #Y3</TD>
          <TD>Reports the X and Y center coordinate and the radius in microns for the circle
            through three points whose coordinates are given on the line as <b>#X1:#Y1 #X2:#Y2 #X3:#Y3</b>.&nbsp;
            Values can be assigned to variables at end of command.</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">SetCameraPLAOffset</TD>
          <TD>Sets or refines a PLA offset between two cameras on a JEOL scope using PLA for
            image shift.&nbsp; To use:<br />
            Take an image with the camera to be aligned to (e.g., an on-axis camera).<br />
            Center a feature and take a new image.<br />
            Switch to the other camera (e.g., an off-axis camera).<br />
            Use right mouse-shifting, or set the marker point and use the <strong>To Marker</strong>
            button or Shift P hot key to center the feature with image shift only.<br />
            Run this command.&nbsp; It will report the existing and new offsets.<br />
            Iterate if desired for a more accurate result.&nbsp; If aligning more than two
            cameras, use one camera as a reference for aligning each of the others to.&nbsp;
            Command added in 3.9, 12/23/20.</TD>
        </TR>
         <TR>
          <TD class="scriptcommand">AccumulateRecordDose #</TD>
          <TD>Adds <b>#</b> to a cumulative dose that will be assigned as the PriorRecordDose value
            for images that are taken while the script is running.&nbsp; This dose accumulator is disabled
            when a script starts.&nbsp; Use this command with a <b>#</b> of 0 to enable the accumulator 
            and initialize it to 0; the next image will have a PriorRecordDose.&nbsp; Thereafter,for each 
            Record image or montage, get the dose from a buffer ('A' after a Record, 'C' after a 
            montage) with the 'ImageConditions' command and use this command with that dose value 
            for <b>#</b>.&nbsp; Use -1 for <b>#</b> to disable the accumulator again if needed.&nbsp; Command added in 4.1, 4/1/22.
          </TD>
        </TR>
       <TR>
          <TD width="207">Plugin name func [args]</TD>
          <TD>Calls the function <b>func</b> in the plugin named <b>name</b> with appropriate
            list of arguments for that function.&nbsp; Arguments (<b>args</b>) are entered as items
            separated by spaces, except that a string argument at the end may consist of
            multiple words.&nbsp; The return value of the function is reported and placed
            into <i>reportedValue1</i>.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ListPluginCalls</TD>
          <TD>Lists the names of script-callable functions in all loaded plugins along with the
            arguments that they expect, in parentheses.&nbsp; For each argument, there
            should be one item provided on the command line calling the function, with all
            items separated by spaces as usual.&nbsp; Two exceptions to this are: a string
            argument at the end can include spaces; an argument listed as [out]double is a
            returned value, assigned to <i>reportedValue2</i> or higher.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportMontagePiece #</TD>
          <TD>Reports the piece number in X and Y (numbered from 1), piece coordinates in X and Y, 
            and the number of pieces in X and Y for the just-acquired piece of the montage being
            acquired if <b>#</b> is 0, or for the next piece if <b>#</b> is non-zero.&nbsp; This command
            can be used only in a script run from the montage, currently set by the property
             'MontageScriptToRun'.&nbsp; The script is run between acquiring and saving an image.
            &nbsp; Command added in 4.1, 16-Jan-23.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">MailSubject text</TD>
          <TD>Sets subject line for an email message (default is 'Message from SerialEM script').
            <b>text</b> can include variables to be substituted.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetNextEmailAddress # [addr]</TD>
          <TD>If <B>#</B> is 0, sets the email address(es) to be used on the next sending of email by any 
            source to <b>addr</b>, which can contain several addresses separated by commas.&nbsp; If
            <b>#</b> is 1, it appends to the addresses defined in the user settings.&nbsp; If <b>#</b> is -1, 
            an address set by a previous command and not used yet is canceled.&nbsp; Command added in 4.1, 4/23/22.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SendEmail text</TD>
          <TD>Sends an email containing the given <b>text</b>, which can include variables to be
            substituted. An SMTP server and address to send from must be defined in the
            properties file, and recipient(s) must be defined using either 'Set Email Address' in
            the Settings Menu or the 'SetNextEmailAddress' command.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ErrorBoxSendEmail text</TD>
          <TD>Sends an email containing the given <b>text</b> if the script stops with a message box;
            the text can have variables to be substituted.&nbsp; Requirements are the same
            as for &#39;SendEmail&#39;.&nbsp; If the message box occurs during Navigator Acquire at
            Items and the user has selected to send emails there, two emails will be sent,
            thus allowing more specific information from the one specified here.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportProperty name [var]</TD>
          <TD>Reports the value of one general program property given by <b>name</b>.&nbsp; The command can
            be used with nearly all of the general (non-camera-specific) properties that
            contain just a single numeric entry and can be set by name in
            SerialEMproperties.txt.&nbsp; Follow with the full <b>name</b> of the property (case
            insensitive) and with an optional variable name <b>var</b> for the value.&nbsp;An error will
            result if the name does not match one of the properties that can be reported.&nbsp;
            The list of available properties in the development version of SerialEM is in
            <a href="http://bio3d.colorado.edu/ftp/SerialEM/Scripts/ScriptableProperties.txt">
            http://bio3d.colorado.edu/ftp/SerialEM/Scripts/ScriptableProperties.txt</a></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportCameraProperty #C name [var]</TD>
          <TD>Like 'ReportProperty', but reports the value of a camera property given by <b>name</b>, where <b>#C</b> is the
            active camera number in the Camera Setup dialog (numbered from 1), or 0 for the current 
            camera.&nbsp; Command added in 4.1, 29-Apr-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetProperty name value</TD>
          <TD>Sets the value of one program property.&nbsp; This works just
            like &#39;ReportProperty&#39;.&nbsp; Follow with the full <b>name</b> of the property (case
            insensitive) and with its new <b>value</b>.&nbsp; </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetCameraProperty # name value</TD>
          <TD>Like 'SetProperty', but sets a camera property for active camera <b>#C</b> or the current camera
            if <b>#C</b> is 0.&nbsp; Command added in 4.1, 29-Apr-23.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportUserSetting name [var]</TD>
          <TD>Reports the value of one user setting, using the <b>name</b> for
            it in SerialEMsettings.txt.&nbsp; The command can be used with nearly all of the
            general (non-camera-specific) settings that contain just a single numeric entry.&nbsp;
            Follow with the full name of the setting (case insensitive) and with an optional
            variable name <b>var</b> for the value.&nbsp; An error will result if the name does not match
            one of the settings that can be set.&nbsp; The list of available settings in
          the development version of SerialEM is in
          <a href="http://bio3d.colorado.edu/ftp/SerialEM/Scripts/ScriptableSettings.txt">http://bio3d.colorado.edu/ftp/SerialEM/Scripts/ScriptableSettings.txt</a></TD>
        </TR>
        <TR>
          <TD class="scriptcommand">SetUserSetting name val [#K]</TD>
          <TD>Sets the value of one user setting.&nbsp; This works just
            like &#39;ReportUserSetting&#39;.&nbsp; Follow with the <b>name</b> of the setting and its
            value <b>val</b>.&nbsp; The original value is automatically restored when the script stops
            unless the optional entry <b>#K</b> is non-zero to keep the setting.&nbsp; If the script
            is suspended, the new value will be set again when it is resumed.&nbsp; Multiple
            changes in the same setting can be done; the original value or last kept new
            value will be restored when the script stops, and the latest new value will be
            set on resume.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">LoadScriptPackAtEnd #S name</TD>
          <TD>Loads the script package with the given <b>name</b> after the script completes 
            successfully.&nbsp; The current scripts are saved to the current package if <b>#S</b> is
            non-zero, otherwise they are not.&nbsp;  Command added in 4.0, 2/4/22.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportEnvironVar name</TD>
          <TD>Reports whether the environment variable given by <b>name</b> exists in <i>reportedValue1</i>
            and its value in <I>reportedValue2</I> if so or 'none' if not.&nbsp; The name must be a single word
             without spaces.&nbsp; Command added in 3.9, 1/8/21.
          </TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportSettingsFile</TD>
          <TD>Reports the name of the current settings file and the name of the current script
            package file, or "None" if scripts were loaded from settings.&nbsp; Command added in 3.9, 1/8/21.</TD>
        </TR>
        <TR>
          <TD class="scriptcommand">ReportSystemPath</TD>
          <TD>Reports the &#39;system path&#39;, the directory where calibrations and properties 
            files are located.&nbsp; Command added in 4.1, 16-Apr-23.</TD>
        </TR>
      </TABLE>
    <P><A NAME="arithForArgs"></A><B>Commands Allowing Arithmetic Expressions for Arguments</B></P>
      In addition to the commands starting with 'Set', these commands
    allow arithmetic arguments:
    <pre>
AbsoluteFocusLimits
BackgroundTilt
BeamTiltDirection
ChangeEnergyLoss
ChangeFocus
ChangeIntensityBy
ChangeItemRegistration
ChangeMag
ChangeMagAndIntensity
CircleFromPoints
CropImage
CtfFind
Delay
EarlyReturnNextShot
EchoEval
EchoNoLineEnd
EchoReplaceLine
ElapsedTickTime
ExposeFilm
FocusChangeLimits
FrameThresholdNextShot
ImageShiftByMicrons
ImageShiftByPixels
ImageShiftByUnits
IncPercentC2
IncTargetDefocus
LongOperation
ManualFilmExposure
ModifyFrameTSShifts
MoveBeamByFieldFraction
MoveBeamByMicrons
MovePiezoXY
MovePiezoZ
MoveStage
MoveStageTo
MoveStageWithSpeed
MultipleRecords
PreCookMontage
QuickFlyback
RecordAndTiltTo
ReduceImage
RelaxStage
ResetShiftIfAbove
SetSlitIn
ShiftItemsByMicrons
SmoothFocusNextShot
SpecialExposeFilm
StageShiftByPixels
StepFocusNextShot
SubareaMean
TestRelaxingStage
TestSTEMshift
TiltBy
TiltDuringRecord
TiltTo
UpdateHWDarkRef
WaitForDose
WaitForMidnight
WalkUpTo
ZemlinTableau</pre>
    </basefont>
  </BODY>
</HTML>
