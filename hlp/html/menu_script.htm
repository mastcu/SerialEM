<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
  <HEAD>
    <TITLE>Script Menu Commands</TITLE>
    <META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
    <style type="text/css"> <!-- BODY { font-family:"Arial" }
  TD { font-size:16 }
    .style1
      {
        width: 154px;
      }
      .style2
      {
        width: 483px;
      }
      .auto-style1 {
        width: 557px;
      }
      .auto-style2 {
        width: 180px;
      }
  --></style>
  </HEAD>
  <BODY BGCOLOR="#ffffff" TEXT="#000000">
    <basefont size="2">
      <P><A NAME="menu_script"></A><B><FONT size="3">Script menu commands</FONT></B></P>
      <P>The Script menu offers the following commands for controlling scripts:</P>
      <TABLE BORDER cols="2">
        <TR VALIGN="top">
          <TD class="auto-style2">Edit</TD>
          <TD class="auto-style1">Opens a submenu for opening script editors</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A HREF="#hid_macro_edit1">Edit 1, 2, ...</A></TD>
          <TD class="auto-style1">Opens a window for editing a script.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2">Run</TD>
          <TD class="auto-style1">Opens a submenu for running scripts.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; <A HREF="#hid_macro_run1">Run 1, 2, ...</A></TD>
          <TD class="auto-style1">Runs a script.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_runonecommand">Edit/Run One Line</a>...</TD>
          <TD class="auto-style1">Opens window to allow up to 5 one-line scripts.</TD>
        </TR>
         <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_keepfocusononeline">Keep Focus on One Line</a></TD>
          <TD class="auto-style1">Toggles whether keyboard focus returns to One-Line Script window after script runs.</TD>
        </TR>
         <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_mapfunctionkey">Map Function Key</a></TD>
          <TD class="auto-style1">Assign a script to a function key.</TD>
        </TR>
         <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_listfkeymappings">List F Key Mappings</a></TD>
          <TD class="auto-style1">Print list of function key mapppings to the log.</TD>
        </TR>
       <TR VALIGN="top">
          <TD class="auto-style2"><A HREF="#hid_macro_stop">Stop</A></TD>
          <TD class="auto-style1">Stops script at next command.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><A HREF="#hid_macro_end">End</A></TD>
          <TD class="auto-style1">Stops script at end of loop or repeat.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><A HREF="#hid_macro_resume">Resume</A></TD>
          <TD class="auto-style1">Resumes script at place where it stopped.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><A HREF="#hid_macro_toolbar">Toolbar</A></TD>
          <TD class="auto-style1">Opens a toolbar with buttons for all scripts.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><A HREF="#hid_macro_setlength">Set Height</A></TD>
          <TD class="auto-style1">Sets the number of buttons and button height in the script toolbar.</TD>
        </TR>
        
        <TR VALIGN="top">
          <TD class="auto-style2"><A HREF="#hid_script_setpanelrows">Set Cam Panel Rows</A></TD>
          <TD class="auto-style1">Sets the number of rows of script buttons in the Camera &amp; 
            Script control panel.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><A HREF="#hid_macro_controls">Controls</A></TD>
          <TD class="auto-style1">Opens dialog box to set conditions for stopping a script.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_loadnewpackage">Load New Package...</a></TD>
          <TD class="auto-style1">Loads all scripts from a file and makes that file be the 
            current package.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_savepackage">Save Package</a></TD>
          <TD class="auto-style1">Saves all scripts to the current package file. </TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_savepackageas">Save Package As</a></TD>
          <TD class="auto-style1">Saves all scripts to a new file and makes that the new 
            current package. </TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_macro_readmany">Load Many</a></TD>
          <TD class="auto-style1">Loads all scripts in a file into their given script numbers.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_macro_listfunctions">List Functions</a></TD>
          <TD class="auto-style1">Lists all functions defined in scripts.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_listpersistentvars">List Persistent Vars</a></TD>
          <TD class="auto-style1">Lists all persistent variables defined by scripts in the log window.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_clearpersistentvars">Clear Persistent Vars</a></TD>
          <TD class="auto-style1">Clears all persistent variables defined by scripts.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><A HREF="#hid_script_setindentsize">Set Indent Size</A></TD>
          <TD class="auto-style1">Sets number of spaces for automatic indenting in editor.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_showindentbuttons">Show Indent Buttons</a></TD>
          <TD class="auto-style1">Toggles whether to show buttons for adjusting indentation 
            of lines in editor.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_usemonospacedfont">Use Monospaced Font</a></TD>
          <TD class="auto-style1">Toggles whether to use an equally spaced font in the editor.</TD>
        </TR>
       <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_set_num_status">Set # of Status Lines</a></TD>
          <TD class="auto-style1">Sets the number of status lines displayed in the Camrea & Script panel.</TD>
        </TR>
       <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_monospacestatuslines">Monospace Status Lines</a></TD>
          <TD class="auto-style1">Toggles whether to use an equally spaced font in the status lines.</TD>
        </TR>
         <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_runonprogramstart">Run at Program Start...</a></TD>
          <TD class="auto-style1">Toggles whether to run a script on program startup and 
            lets you select script.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_runatprogramend">Run at Program End...</a></TD>
          <TD class="auto-style1">Toggles whether to run a script on program exit and lets 
            you select script.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_runifprogramidle">Run if Program Idle...</a></TD>
          <TD class="auto-style1">Toggles whether to run a script periodically when the program is idle and
            lets you select script and time interval.</TD>
        </TR>
       <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_runbackgroundscript">Run Background Script...</a></TD>
          <TD class="auto-style1">Starts a script to run continuously in the background when 
            the program is idle or a regular script allows it to run.</TD>
        </TR>
       <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_stopbackgroundscript">Stop Background Script</a></TD>
          <TD class="auto-style1">Stops a script running in the background.</TD>
        </TR>
        <TR VALIGN="top">
          <TD class="auto-style2"><a href="#hid_script_openeditorsonstart">Open Editors on Start</a></TD>
          <TD class="auto-style1">Toggles whether editing windows will be restored on program 
            startup.</TD>
        </TR>
       <TR VALIGN="top">
          <TD class="auto-style2"><A HREF="#hid_macro_verbose">Verbose</A></TD>
          <TD class="auto-style1">Toggles echoing of each line at start of script.</TD>
        </TR>
        </TABLE>
      <BR>
      <P>For a list of available script entries, see <A HREF="script_commands.htm">Script 
          Commands</A>; for general information about scripts see <A HREF="about_scripts.htm">
          About scripts</A>.
      </P>
      <P><A NAME="hid_macro_edit1"></A><B>Edit command (Script menu)</B></P>
      <P>Use one of these commands to open a <A HREF="hidd_macro.htm">Script Editing 
        Window</A> for editing the given script. Use the left or right
        &#39;Editor &#39; arrows in the editing 
        window to get to scripts numbered higher than 10.&nbsp;  You
        can also open an editor for an existing script by clicking with the right mouse 
        button on a button for the script in the Script Toolbar or
        in the <A HREF="hidd_camera_macro.htm">Camera &amp; Script Control Panel</A>, or 
        by holding down the
        Ctrl key and pressing as usual with the left mouse button.</P>
      <P><A NAME="hid_macro_run1"></A><B>Run commands (Script menu - Run submenu)</B></P>
      <P>Use one of these commands to run a selected script.&nbsp; There is an entry for 
        all of the currently available scripts.</P>
    </b>
      <P><A NAME="hid_script_runonecommand"></A><b>Edit/Run One Line command (Script menu)</b></P>
    <P>Use this command to open a small free-standing window in which you can enter a 
      set of one-line scripts and run them.&nbsp; As of SerialEM 4.1, 30-Mar-23, 
      &#39;one-line&#39; no longer means &#39;one command&#39;.&nbsp; Multiple commands can be 
      entered, separated by &#39;;&#39; (semicolon).&nbsp; The window allows up to 10 such 
      scripts.&nbsp; When you edit in one of the lines, its <strong>Run</strong> 
      button becomes the default button for the window (as shown by the <strong>Run</strong> 
      being in bold) 
      and pressing Enter (Return) will run that script.&nbsp; This window is 
      resizable, so you can change the height to show just the number that you need, 
      or change the length to accommodate longer entries.&nbsp; The lines are preserved 
      between sessions in the settings file.&nbsp; The first time that you open the 
      window, it will show one text box; subsequently it will restore its previous 
      size and location.</P>
    <P>Even Python scripts can be run in this window.&nbsp; They need to start with 
      &#39;#!Python&#39;.&nbsp; An &#39;import serialem as sem&#39; line is added automatically if 
      there is not a serialem import statement.&nbsp; If you want to use any statements 
      requiring indentation, use 3 or more spaces, and make sure indentation is 
      consistent.&nbsp; If there are no semicolons followed by 3 spaces, spaces after 
      semicolons are removed to prevent indentation errors.</P>
    <P>Command completion with tab or ` works in 
      this window just as in a regular script editor (but not for Python).&nbsp; In addition, Ctrl-A will 
      select the whole line, after which it can be deleted with the Delete key, or the 
      whole line can be deleted with Ctrl-U.&nbsp; 
      Ctrl-Z can be used to undo the last operation.&nbsp; Ctrl-X, Ctrl-C, and Ctrl-V also work 
      for cut, copy, and paste.&nbsp; Up and down arrows can be used to jump to the line 
      above or below.&nbsp; The Escape key will return 
      focus to the main program, without closing the window, so that other keyboard 
      commands can be used.&nbsp; If you turn on the next option focus will return to 
      the text box of the script that was run when it is done, so you can easily 
      change it and run again, or move to another script with an arrow key and run 
      that.</P>
       <P><A NAME="hid_script_keepfocusononeline"></A><B>Keep Focus on One Line command (Script menu)</B></P>
    <p>Use this command to toggle whether keyboard focus returns to the line of the 
      one-line script that is run.</p>
      <P><A NAME="hid_script_mapfunctionkey"></A><B>Map Function Key command (Script menu)</B></P>
    <p>Use this command to assign a script to a function key, so that it can be run 
      with the keyboard shortcut Ctrl - Fn.&nbsp; By default Ctrl F1 to Ctrl F12 run 
      scripts 1 to 12.&nbsp; An assignment here replaces that default.&nbsp; First 
      enter the number of the function key that you want to map.&nbsp; Then select the 
      script to assign in the script combo box.&nbsp; Scripts with names are kept 
      track of by name so that they can be found if scripts are rearranged.&nbsp; 
      Otherwise, the script number is saved.</p>
      <P><A NAME="hid_script_listfkeymappings"></A><B>List F Key Mappings command (Script menu)</B></P>
    <p>Use this command to get a list of the saved assignments in the log.&nbsp; If an 
      F key is not listed, there is no assignments and the script at that number will 
      be run.</p>
        <P><A NAME="hid_macro_stop"></A><B>Stop command (Script menu)</B></P>
      <P>Use this command to stop a running script.</P>
      <P><A NAME="hid_macro_end"></A><B>End command (Script menu)</B></P>
      <P>Use this command to stop a running script at the end of a loop or the end of the 
        script (before repeating). In addition, when a script is run from the Navigator, 
        the End command can be used while the script is stopped to terminate that script 
        and let the Navigator go on to acquire at the next point.</P>
      <P><A NAME="hid_macro_resume"></A><B>Resume command (Script menu)</B></P>
       <P>Use this command to resume a script that was stopped with the Stop or End 
        command. If you want to start a script from the beginning, run it rather than 
        resuming it. The next command in sequence will be executed if you stopped with 
        End. If you stopped with STOP, the program will show you the line that it 
        stopped on and ask whether you want to redo this command or go on to the next. 
        In some cases a script that stops because of an error condition can be resumed 
        from the point at which it stopped; the program will resume from either the 
        current or next command as appropriate for the type of error.</P>
      <P><A NAME="hid_macro_toolbar"></A><B>Toolbar command (Script menu)</B></P>
      <P>This command opens a small panel with buttons for all scripts, or as many are 
        specified with the Set Length command. The buttons are wide enough to allow 
        somewhat longer script names than in the <A HREF="hidd_camera_macro.htm">Camera 
          &amp; Script Control Panel</A>. Individual buttons will be enabled when a 
        script is available to run or when it is open in an editing window. You
        can open an editor window for any existing script by holding down the
        Ctrl key while pressing the button.  If you lose 
        the toolbar behind other windows, invoke this menu command again to raise it. 
        The program will remember this window's position and whether it is open 
        between sessions.</P>
      <P><A NAME="hid_macro_setlength"></A><B>Set Height command (Script menu)</B></P>
      <P>Use this command to set the number of buttons in the script toolbar, and their 
        height in pixels.&nbsp; Initially, the toolbar will have 10 buttons.&nbsp; The 
        button height can be increased if the buttons seem too narrow to select 
        reliably, or decreased to fit more buttons on the screen.&nbsp; Enter a height of 0 to 
        return to the initial height.&nbsp; The spacing between buttons may also be 
        decreased when the height is decreased, especially when </P>
       <P><A NAME="hid_script_setpanelrows"></A><B>Set Cam Panel Rows command (Script menu)</B></P>
    <p>Use this command to set the number of rows of script buttons and spinners in 
      the <a href="hidd_camera_macro.htm">Camera &amp; Script control panel</a>.&nbsp; It 
      is possible to have up to 12 buttons in 4 rows.&nbsp; Enter a value between 1 
      and 4.</p>
     <P><A NAME="hid_macro_controls"></A><B>Controls command (Script menu)</B></P>
      <P>Use this command to open the <A HREF="hidd_macrocontrol.htm">Script Controls dialog 
          box</A> in order to set conditions for stopping a script. The script can be 
        stopped when the stage reaches a certain tilt angle, image intensity falls 
        below a certain level, image shift exceeds a certain amount, montage error is 
        too large, or the script has repeated a given number of times.</P>
      <P><A NAME="hid_script_loadnewpackage"></A><B>Load New Package command (Script menu)</B></P>
    <p>Use this command to load a package of scripts from a file and make that file be 
      the 'current script package file', which is loaded and saved along with the 
      settings file.&nbsp; As of SerialEM 3.8, scripts are no longer saved 
      in the settings file but in a separate file, with the name of that file saved in 
      the settings file.&nbsp; This means that you can have multiple packages of 
      scripts without having to store them in different settings files, and also that 
      you can have multiple settings files all using the same scripts.&nbsp; You will 
      be asked whether you want to save the current package first, in case it has 
      changed.&nbsp; If a script is empty in the newly loaded package, an existing 
      script in that position will be cleared out.</p>
      <P><A NAME="hid_script_savepackage"></A><B>Save Package command (Script menu)</B></P>
    <p>Use this command to save all scripts, including one-line scripts, to the 
      current package file.</p>
      <P><A NAME="hid_script_savepackageas"></A><B>Save Package As command (Script menu)</B></P>
    <p>Use this command to save all scripts to a new file, which becomes the current 
      package file whose name is saved with the settings.</p>
      <P><A NAME="hid_macro_readmany"></A><B>Load Many command (Script menu)</B></P>
      <P>Use this command to load multiple scripts from a file and place them into their 
        respective script numbers, leaving any other existing scripts unchanged and not 
        changing which file is considered the current script package.&nbsp; These scripts must have been saved so that each 
        one starts with a line with &#39;Macro&#39; and the script number, and ends with the line 
        &#39;EndMacro&#39;.&nbsp; This is the way scripts were stored in settings files and 
        now in script package files, so this command can be used to read only the scripts from a 
        settings file. However a single script saved from the editing window cannot be 
        read with this command because it does not have these starting and ending lines.</P>
      <P><A NAME="hid_macro_listfunctions"></A><B>List Functions command (Script menu)</B></P>
    <P>Use this command to get a list in the log window of all functions defined in 
      all scripts.&nbsp; The function name will be followed by the number of 
      arguments and 0 or 1 for whether it takes a string argument.</P>
    
      <P><A NAME="hid_script_listpersistentvars"></A><B>List Persistent Vars command (Script menu)</B></P>
    <P>Use this command to get a list in the log window of all currently defined persistent variables.</P>
        <P><A NAME="hid_script_clearpersistentvars"></A><B>Clear Persistent Vars command (Script menu)</B></P>
    <P>Use this command to clear all of the persistent variables that have been 
      defined by previously run scripts.&nbsp; This will make a stopped script 
      non-resumable.</P>
    <P><A NAME="hid_script_setindentsize"></A><B>Set Indent Size command (Script menu)</B></P>
    <p>Use this command to set the number of spaces that the script editor will use 
      for auto-indenting when Tab or ` (the back-tick character) is typed.&nbsp; This 
      spacing is added at the first line of a block starting with IF, LOOP, ELSE, or 
      Function, and taken away when such a block ends.&nbsp; Enter 0 to prevent 
      auto-indenting.</p>
    <P><A NAME="hid_script_showindentbuttons"></A><B>Show Indent Buttons command (Script menu)</B></P>
    <p>Use this command to toggle between showing and hiding the three buttons at the 
      bottom of the editor window for adjusting indentation in selected lines.&nbsp; 
      The change will not take effect until you resize or reopen windows.&nbsp; These 
      buttons were added to help with scripting in Python but could be useful for 
      regular scripting too.</p>
    <P><A NAME="hid_script_usemonospacedfont"></A><B>Use Monospaced Font command (Script menu)</B></P>
    <p>Use this command to toggle between using the regular proportional font and an 
      equally-spaced font in all editor windows.&nbsp; If it is grayed out, it means 
      that no monospaced font was available.&nbsp; The program tries to access Lucida 
      Console, Consolas, and Lucida Sans Typewriter, and if those fail it tries to use Courier New 
      with a heavier weight.&nbsp; However, it cannot tell if the system is going to 
      use a Courier font even though it asked for a better one.&nbsp; If you get a 
      font you do not like, add the property 'ScriptMonospaceFont' with the exact name 
      of a monospaced font available on your system, which it will try first..</p>
    <P><A NAME="hid_script_set_num_status"></A><B>Set # of Status Lines command (Script menu)</B></P>
    <p>Use this command to adjust the number of status lines visible at the bottom of 
      the Camera &amp; Script control panel.&nbsp; These lines are written to with the 
      &#39;SetStatusLine&#39; script command, and the number of lines is always set so that 
      the line being written will be displayed.&nbsp; Thus, this setting can be changed 
      by that command, and this menu entry allows one way to close up the lines, the 
      other being a script command &#39;SetUserSetting NumStatusLines 0 1&#39;.&nbsp; Enter a 
      value from 0 to 6, the current maximum.</p>
    <P><A NAME="hid_script_monospacestatuslines"></A><B>Monospace Status Lines command (Script menu)</B></P>
    <p>Use this command to toggle whether the status lines written at the&nbsp; bottom 
      of the Camera &amp; Script control panel use the regular proportional font or an 
      equally-spaced font.&nbsp; See the <strong>Use Monospaced Font</strong> command 
      just above for more details on using a monospaced font.</p>
      <P><A NAME="hid_script_runonprogramstart"></a><B>Run at Program Start command (Script menu)</B></P>
        <P>Use this command to choose a script to run when the program starts.&nbsp; The 
          menu entry shows up as checked when a script has been chosen.&nbsp; When you 
          select this command, a dialog will open with a drop-down list in which you can 
          select the script by its name or number.&nbsp; It is best to have a (short) name 
          assigned to the script so that if scripts are rearranged, or a different set is 
          loaded, the program will not run the wrong script.&nbsp; This script may do 
          complex operations.</P>
      <P><A NAME="hid_script_runatprogramend"></a><B>Run at Program End command (Script menu)</B></P>
        <P>Use this command to choose a script to run when the program exits, just as for 
          previous command for a startup script.&nbsp; This script is run after the 
          program asks whether to save the Navigator and log and leaves Low Dose mode, if 
          appropriate, and saves settings.&nbsp; These steps will be skipped when the 
          program re-enters its exit routine after the script is run.&nbsp; While the 
          script may do complex operations, the user should be warned if they are going to 
          take more than a few seconds.</P>
      <P><A NAME="hid_script_runifprogramidle"></a><B>Run if Program Idle command (Script menu)</B></P>
        <p>Use this command to choose a script to run periodically when the program is not 
          busy doing any other operations.&nbsp; Each time, the script is run from the 
          start until it finishes or exits.&nbsp; When you select this command, a dialog 
          will open with a drop-down list in which you can select the script by its name 
          or number; having a named script is advisable.&nbsp; After specifying the 
          script, you can then enter the interval in seconds at which the script should 
          run. It will not run with an interval of 0, so setting it to 0 would be a quick 
          way to disable it.&nbsp; The menu entry shows up as checked when a script has 
          been chosen and the interval is nonzero.&nbsp; </p>
    
      <P><A NAME="hid_script_runbackgroundscript"></a><B>Run Background Script command (Script menu)</B></P>
      <p>Use this command to start a script to run continuously in the background, the 
        same as with the script command 'RunBackgroundScript'.&nbsp; The script is 
        started once and then is able to execute commands whenever the program is idle, 
        or when a regular script allows it to run. Currently the script is not allowed 
        to execute during other program operations, but this capability can be added for 
        particular operations if the need becomes clear.&nbsp; The background script can 
        do synchronized communication with a regular script using a special shared 
        variable referred to as the 'background script variable'.&nbsp; This variable 
        can contain a 1-D or 2-D array; it can be set from a defined variable with 
        'SetBkgdScriptVar' and accessed by copying it to a variable with 
        'GetBkgdScriptVar'.&nbsp; The background script can also access other variables 
        in a regular script, including persistent ones when no script it running, with 
        the command 'CopyOtherScriptVar'.&nbsp; A regular script can use the same 
        command to access variables in the background script.&nbsp; The two scripts run 
        in separate instances of the script processing class and each object can have 
        its own persistent variables.</p>
    <p>When you select the command, a script chooser will open, showing the name or 
      number of the last background script run, if any.&nbsp;&nbsp; The script will be 
      checked and started after you finish selecting it.</p>
    <p>How many commands the background script can execute at a time depends on the 
      situation:</p>
    <ul>
      <li>If the program is idle, the script will run one command after another just 
        like a regular script.</li>
      <li>If a regular script allows it to run by giving the command 
        'AllowTimeForBkgdScript 1', then the idle time processor will allow it to run at 
        least one command before going back to the regular script or other task.&nbsp; 
        However, it may be able to run many commands until one is run that does not 
        allow looping in the idle time processor.&nbsp; (For those who want to know: in 
        MacroMasterList.h, commands that have 4, 5, or 6 as the second numeric entry 
        allow looping in the idle time processor, which means that the next command is 
        run immediately instead of waiting for the system to call the idle time 
        processor again.)</li>
      <li>If a regular script uses the command 'WaitForBkgdScriptVar' with a 0 or 1, the 
        background script will be allowed to run until it either accesses or sets the 
        background script variable, respectively.</li>
      <li>For a Python script, 'command' means 'SerialEM script command' and the 
        background script can do as much as it wants in Python code between calling such 
        commands.</li>
    </ul>
    <P><A NAME="hid_script_stopbackgroundscript"></a>A background script cannot be 
      stopped directly with the STOP button, only with the next menu item or the 
      corresponding script command.&nbsp; However, if it runs a task or takes an 
      image, the STOP button will be enabled, and pressing the button during this time 
      will stop the script.&nbsp; Similarly, if an error occurs in a task started by 
      the background script, the background script will be stopped unless it catches 
      the error.</P>
    <P>The program has some ability to prevent changes to the scripts being used by a 
      background script.&nbsp; The editor for the script that was run directly will 
      have action buttons disabled as if it was being run in a regular script.&nbsp; 
      Scripts that are currently being called by the directly run script at the moment 
      when changes would be saved to the script in memory will be protected from such 
      changes, so editing in these windows may be lost.&nbsp; These protections are 
      imperfect, so it is advisable not to interact with scripts involved in a 
      background script except in testing situations.&nbsp; </P>
    <P><B>Stop Background Script command (Script menu)</B></P>
    <p>Use this command to stop a background script, it is equivalent to the script 
      command 'StopBackgroundScript'.</p>
    <P><A NAME="hid_script_openeditorsonstart"></A><B>Open Editors on Start command (Script menu)</B></P>
    <p>Use this command to control whether editor windows are restored to their last 
      state when the program is restarted.&nbsp; In addition, if this option is selected, 
      editor windows will be opened or closed when a new settings file is read to 
      match the state when those settings were saved.</p>
    <P><A NAME="hid_macro_verbose"></A><B>Verbose command (Script menu)</B></P>
   <P>Use this command to set the initial value of the verbose option when a script is 
        started. With this option on, each script command will be echoed to the log 
        before being executed. The option value can be changed by the Verbose command 
        within a script.</P>
      </BODY>
</HTML>
